{"version":3,"names":["cov_rysv2hmrl","actualCoverage","splitMessage","text","maxLength","b","f","s","length","char","chunks","lines","split","currentChunk","line","push","trim","lineChunks","match","RegExp","DiscordManager","constructor","client","logger","config","isPostingEnabled","mirrorMessage","supportChannelId","sendMirroredMessage","targetChannel","content","info","name","id","supportChannel","channels","fetch","isTextBased","send","err","error","mirrorContent","part","setPostingEnabled","enabled","setMirrorMessage","createDiscordManager"],"sources":["discord-utils.js"],"sourcesContent":["// discord-utils.js\n// Discord utility functions for message handling and posting\n\n/**\n * Splits a string into multiple chunks of a specified maximum length, respecting line breaks.\n * @param {string} text - The text to split\n * @param {Object} options - Options for splitting\n * @param {number} options.maxLength - Maximum length of each chunk (default: 2000)\n * @returns {string[]} Array of text chunks\n */\nexport function splitMessage(text, { maxLength = 2000 } = {}) {\n  if (text.length <= maxLength) {\n    return [text];\n  }\n  const char = '\\n';\n  const chunks = [];\n  const lines = text.split(char);\n  let currentChunk = '';\n  for (const line of lines) {\n    if (line.length > maxLength) {\n      if (currentChunk.length > 0) {\n        chunks.push(currentChunk.trim());\n      }\n      const lineChunks = line.match(new RegExp(`.{1,${maxLength}}`, 'g')) || [];\n      chunks.push(...lineChunks);\n      currentChunk = '';\n      continue;\n    }\n    if (currentChunk.length + line.length + char.length > maxLength) {\n      chunks.push(currentChunk.trim());\n      currentChunk = '';\n    }\n    currentChunk += line + char;\n  }\n  if (currentChunk.length > 0) {\n    chunks.push(currentChunk.trim());\n  }\n  return chunks;\n}\n\n/**\n * Discord manager class for handling Discord client operations\n */\nexport class DiscordManager {\n  constructor(client, logger, config = {}) {\n    this.client = client;\n    this.logger = logger;\n    this.isPostingEnabled = config.isPostingEnabled || false;\n    this.mirrorMessage = config.mirrorMessage || false;\n    this.supportChannelId = config.supportChannelId;\n  }\n\n  /**\n   * Sends a message to a target channel and mirrors it to the support log channel.\n   * @param {Object} targetChannel - Discord channel object\n   * @param {string} content - Message content to send\n   */\n  async sendMirroredMessage(targetChannel, content) {\n    if (!this.isPostingEnabled) {\n      this.logger.info(`Posting is disabled. Skipping message to ${targetChannel.name}.`);\n      if (this.supportChannelId && targetChannel.id !== this.supportChannelId) {\n        try {\n          const supportChannel = await this.client.channels.fetch(this.supportChannelId);\n          if (supportChannel && supportChannel.isTextBased()) {\n            await supportChannel.send(`(Posting is currently disabled. Skipped message to ${targetChannel.name})`);\n          }\n        } catch (err) {\n          this.logger.error(`Failed to send disabled posting notification:`, err);\n        }\n      }\n      return;\n    }\n\n    await targetChannel.send(content);\n\n    // Optionally send a notification to the support channel that posting is disabled\n    if (this.supportChannelId && this.mirrorMessage && targetChannel.id !== this.supportChannelId) {\n      try {\n        const supportChannel = await this.client.channels.fetch(this.supportChannelId);\n        if (supportChannel && supportChannel.isTextBased()) {\n          const mirrorContent = `[Bot message from #${targetChannel.name}]:\\n>>> ${content}`;\n          for (const part of splitMessage(mirrorContent)) {\n            if (part) {\n              await supportChannel.send(part);\n            }\n          }\n        }\n      } catch (err) {\n        this.logger.error(`Failed to send mirrored message:`, err);\n      }\n    }\n  }\n\n  /**\n   * Update posting enabled state\n   * @param {boolean} enabled - Whether posting is enabled\n   */\n  setPostingEnabled(enabled) {\n    this.isPostingEnabled = enabled;\n  }\n\n  /**\n   * Update mirror message state\n   * @param {boolean} enabled - Whether message mirroring is enabled\n   */\n  setMirrorMessage(enabled) {\n    this.mirrorMessage = enabled;\n  }\n}\n\n/**\n * Helper function to create a Discord manager instance\n * @param {Object} client - Discord client instance\n * @param {Object} logger - Winston logger instance\n * @param {Object} config - Configuration options\n * @returns {DiscordManager} New Discord manager instance\n */\nexport function createDiscordManager(client, logger, config = {}) {\n  return new DiscordManager(client, logger, config);\n}\n"],"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","ignoreList":[]}