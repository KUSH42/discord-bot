{"version":3,"names":["cov_2ke0z9wlv7","actualCoverage","DuplicateDetector","delay","ScraperApplication","constructor","dependencies","f","s","browser","browserService","classifier","contentClassifier","announcer","contentAnnouncer","config","state","stateManager","discord","discordService","eventBus","logger","authManager","b","xUser","getRequired","twitterUsername","twitterPassword","minInterval","parseInt","get","maxInterval","duplicateDetector","isRunning","timerId","currentSession","stats","totalRuns","successfulRuns","failedRuns","totalTweetsFound","totalTweetsAnnounced","lastRunTime","lastError","nextPollTimestamp","start","Error","info","initializeBrowser","ensureAuthenticated","startPolling","emit","startTime","Date","pollingInterval","getNextInterval","error","stop","stopPolling","closeBrowser","stopTime","getStats","browserOptions","headless","args","process","env","DISPLAY","push","launch","userAgent","setUserAgent","close","loginToX","login","clickNextButton","clickLoginButton","runPolling","pollXProfile","scheduleNextPoll","message","timestamp","scheduleRetry","clearTimeout","interval","now","setTimeout","debug","retryInterval","Math","min","jitter","random","baseInterval","floor","yesterday","setDate","getDate","sinceDate","toISOString","split","verifyAuthentication","searchUrl","generateSearchUrl","goto","contentSelectors","contentLoaded","selector","waitForSelector","timeout","warn","i","evaluate","window","scrollTo","document","body","scrollHeight","tweets","extractTweets","length","newTweets","filterNewTweets","tweet","processNewTweet","tweetID","tweetsFound","nextInterval","nextRunTime","round","toLocaleTimeString","performEnhancedRetweetDetection","shouldProcessRetweets","navigateToProfileTimeline","tweetCategory","isNewContent","url","monitoredUser","articleSelectors","articles","querySelectorAll","console","log","article","linkSelectors","tweetLink","querySelector","href","tweetIdMatch","match","authorSelectors","author","authorElement","textContent","trim","textSelectors","text","textElement","innerText","timeElement","getAttribute","isReply","startsWith","allText","includes","quoteTweetBlock","isRetweet","socialContext","substring","err","duplicateCount","oldContentCount","isDuplicate","markAsSeen","announceOldTweets","getBoolean","botStartTime","tweetTime","isNew","metadata","retweetMetadata","retweetDetection","classification","type","confidence","platform","details","statusId","detectionMethod","classifyXContent","content","id","originalAuthor","isOld","result","announceContent","success","skipped","reason","handleEmailVerification","email","emailInputSelectors","emailInput","continueButtonSelectors","continueClicked","click","isAuthenticated","refreshAuth","isLoggedIn","max","next","duplicateDetectorStats","performEnhancedScrolling","username","profileUrl","validateCookieFormat","cookies","Array","isArray","every","cookie","name","value","includeDate","dispose"],"sources":["scraper-application.js"],"sourcesContent":["import { DuplicateDetector } from '../duplicate-detector.js';\nimport { delay } from '../utils/delay.js';\n\n/**\n * X (Twitter) scraping application orchestrator\n * Coordinates browser automation, content classification, and announcements\n */\nexport class ScraperApplication {\n  constructor(dependencies) {\n    this.browser = dependencies.browserService;\n    this.classifier = dependencies.contentClassifier;\n    this.announcer = dependencies.contentAnnouncer;\n    this.config = dependencies.config;\n    this.state = dependencies.stateManager;\n    this.discord = dependencies.discordService;\n    this.eventBus = dependencies.eventBus;\n    this.logger = dependencies.logger;\n    this.authManager = dependencies.authManager;\n    this.delay = dependencies.delay || delay;\n\n    // Scraper configuration\n    this.xUser = this.config.getRequired('X_USER_HANDLE');\n    this.twitterUsername = this.config.getRequired('TWITTER_USERNAME');\n    this.twitterPassword = this.config.getRequired('TWITTER_PASSWORD');\n\n    // Polling configuration\n    this.minInterval = parseInt(this.config.get('X_QUERY_INTERVAL_MIN', '300000'), 10);\n    this.maxInterval = parseInt(this.config.get('X_QUERY_INTERVAL_MAX', '600000'), 10);\n\n    // State management\n    this.duplicateDetector = new DuplicateDetector();\n    this.isRunning = false;\n    this.timerId = null;\n    this.currentSession = null;\n\n    // Statistics\n    this.stats = {\n      totalRuns: 0,\n      successfulRuns: 0,\n      failedRuns: 0,\n      totalTweetsFound: 0,\n      totalTweetsAnnounced: 0,\n      lastRunTime: null,\n      lastError: null,\n    };\n    this.nextPollTimestamp = null;\n  }\n\n  /**\n   * Start X content monitoring\n   * @returns {Promise<void>}\n   */\n  async start() {\n    if (this.isRunning) {\n      throw new Error('Scraper application is already running');\n    }\n\n    try {\n      this.logger.info('Starting X scraper application...');\n\n      // Initialize browser\n      await this.initializeBrowser();\n\n      // Perform initial login\n      await this.ensureAuthenticated();\n\n      // Start polling\n      this.startPolling();\n\n      this.isRunning = true;\n      this.logger.info('âœ… X scraper application started successfully');\n\n      // Emit start event\n      this.eventBus.emit('scraper.started', {\n        startTime: new Date(),\n        xUser: this.xUser,\n        pollingInterval: this.getNextInterval(),\n      });\n    } catch (error) {\n      this.logger.error('Failed to start scraper application:', error);\n      await this.stop();\n      throw error;\n    }\n  }\n\n  /**\n   * Stop X content monitoring\n   * @returns {Promise<void>}\n   */\n  async stop() {\n    if (!this.isRunning) {\n      return;\n    }\n\n    try {\n      this.logger.info('Stopping X scraper application...');\n\n      // Stop polling\n      this.stopPolling();\n\n      // Close browser\n      await this.closeBrowser();\n\n      this.isRunning = false;\n      this.logger.info('X scraper application stopped');\n\n      // Emit stop event\n      this.eventBus.emit('scraper.stopped', {\n        stopTime: new Date(),\n        stats: this.getStats(),\n      });\n    } catch (error) {\n      this.logger.error('Error stopping scraper application:', error);\n    }\n  }\n\n  /**\n   * Initialize browser for scraping\n   * @returns {Promise<void>}\n   */\n  async initializeBrowser() {\n    const browserOptions = {\n      headless: false,\n      args: [\n        '--no-sandbox',\n        '--disable-setuid-sandbox',\n        '--disable-dev-shm-usage',\n        '--disable-accelerated-2d-canvas',\n        '--no-first-run',\n        '--no-zygote',\n        '--disable-gpu',\n      ],\n    };\n\n    // Add display if running in headless environment\n    if (process.env.DISPLAY) {\n      browserOptions.args.push(`--display=${process.env.DISPLAY}`);\n    }\n\n    await this.browser.launch(browserOptions);\n    this.logger.info('Browser initialized for X scraping');\n\n    const userAgent =\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';\n    await this.browser.setUserAgent(userAgent);\n    this.logger.info(`User agent set to: ${userAgent}`);\n  }\n\n  /**\n   * Close browser\n   * @returns {Promise<void>}\n   */\n  async closeBrowser() {\n    try {\n      if (this.browser.isRunning()) {\n        await this.browser.close();\n        this.logger.info('Browser closed');\n      }\n    } catch (error) {\n      this.logger.error('Error closing browser:', error);\n    }\n  }\n\n  /**\n   * Login to X (Twitter)\n   * @returns {Promise<void>}\n   */\n  async loginToX() {\n    return this.authManager.login();\n  }\n\n  /**\n   * Clicks the \"Next\" button during login\n   * @returns {Promise<boolean>}\n   */\n  async clickNextButton() {\n    return this.authManager.clickNextButton();\n  }\n\n  /**\n   * Clicks the \"Log in\" button\n   * @returns {Promise<boolean>}\n   */\n  async clickLoginButton() {\n    return this.authManager.clickLoginButton();\n  }\n\n  /**\n   * Start polling for new content\n   */\n  startPolling() {\n    if (this.timerId) {\n      this.stopPolling();\n    }\n\n    const runPolling = async () => {\n      try {\n        await this.pollXProfile();\n        this.scheduleNextPoll();\n      } catch (error) {\n        this.logger.error('Error in polling cycle:', error);\n        this.stats.failedRuns++;\n        this.stats.lastError = error.message;\n\n        // Emit error event\n        this.eventBus.emit('scraper.error', {\n          error,\n          timestamp: new Date(),\n          stats: this.getStats(),\n        });\n\n        // Schedule retry with exponential backoff\n        this.scheduleRetry();\n      }\n    };\n\n    // Start first poll immediately\n    runPolling();\n  }\n\n  /**\n   * Stop polling\n   */\n  stopPolling() {\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = null;\n      this.nextPollTimestamp = null;\n    }\n  }\n\n  /**\n   * Schedule next polling cycle\n   */\n  scheduleNextPoll() {\n    const interval = this.getNextInterval();\n    this.nextPollTimestamp = Date.now() + interval;\n    this.timerId = setTimeout(async () => {\n      if (this.isRunning) {\n        await this.pollXProfile();\n        this.scheduleNextPoll();\n      }\n    }, interval);\n\n    this.logger.debug(`Next X poll scheduled in ${interval}ms`);\n  }\n\n  /**\n   * Schedule retry after error\n   */\n  scheduleRetry() {\n    const retryInterval = Math.min(this.maxInterval, this.minInterval * 2);\n    this.nextPollTimestamp = Date.now() + retryInterval;\n    this.timerId = setTimeout(async () => {\n      if (this.isRunning) {\n        try {\n          await this.pollXProfile();\n          this.scheduleNextPoll(); // Resume normal scheduling on success\n        } catch (error) {\n          this.logger.error('Error during retry scheduling:', error);\n          this.scheduleRetry(); // Continue retry on failure\n        }\n      }\n    }, retryInterval);\n\n    this.logger.info(`Retry scheduled in ${retryInterval}ms`);\n  }\n\n  /**\n   * Get next polling interval with jitter\n   * @returns {number} Interval in milliseconds\n   */\n  getNextInterval() {\n    const jitter = Math.random() * 0.2 - 0.1; // Â±10% jitter\n    const baseInterval = this.minInterval + Math.random() * (this.maxInterval - this.minInterval);\n    return Math.floor(baseInterval * (1 + jitter));\n  }\n\n  /**\n   * Poll X profile for new content\n   * @returns {Promise<void>}\n   */\n  async pollXProfile() {\n    this.nextPollTimestamp = null;\n    this.stats.totalRuns++;\n    this.stats.lastRunTime = new Date();\n\n    try {\n      this.logger.info(`Polling X profile: @${this.xUser}`);\n\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const sinceDate = yesterday.toISOString().split('T')[0];\n\n      // Verify authentication before searching\n      await this.verifyAuthentication();\n\n      // Always use search for normal post detection\n      const searchUrl = this.generateSearchUrl(true);\n      this.logger.info(`Navigating to search URL: ${searchUrl}`);\n      await this.browser.goto(searchUrl);\n\n      // This is the search for normal tweets. Retweet logic should not be invoked here.\n      this.logger.info('Executing search for new tweets.');\n\n      // Wait for content to load - try multiple selectors\n      const contentSelectors = [\n        'article[data-testid=\"tweet\"]',\n        'article[role=\"article\"]',\n        'div[data-testid=\"cellInnerDiv\"]',\n        'main[role=\"main\"]',\n      ];\n\n      let contentLoaded = false;\n      for (const selector of contentSelectors) {\n        try {\n          await this.browser.waitForSelector(selector, { timeout: 5000 });\n          this.logger.debug(`Content loaded, found selector: ${selector}`);\n          contentLoaded = true;\n          break;\n        } catch {\n          this.logger.debug(`Selector not found: ${selector}`);\n          continue;\n        }\n      }\n\n      if (!contentLoaded) {\n        this.logger.warn('No content selectors found, proceeding anyway');\n      }\n\n      // Scroll down to load more tweets\n      for (let i = 0; i < 3; i++) {\n        /* eslint-disable no-undef */\n        await this.browser.evaluate(() => window.scrollTo(0, document.body.scrollHeight));\n        /* eslint-enable no-undef */\n        await this.delay(3000); // Wait for content to load\n      }\n\n      // Extract tweets\n      const tweets = await this.extractTweets();\n      this.stats.totalTweetsFound += tweets.length;\n\n      this.logger.info(`Found ${tweets.length} tweets from @${this.xUser}`);\n\n      // Process new tweets\n      const newTweets = this.filterNewTweets(tweets);\n\n      this.logger.info(`After filtering: ${newTweets.length} new tweets out of ${tweets.length} total tweets`);\n\n      if (newTweets.length > 0) {\n        for (const tweet of newTweets) {\n          try {\n            await this.processNewTweet(tweet);\n            this.stats.totalTweetsAnnounced++;\n          } catch (error) {\n            this.logger.error(`Error processing tweet ${tweet.tweetID}:`, error);\n          }\n        }\n      }\n\n      this.stats.successfulRuns++;\n\n      // Emit poll completion event\n      this.eventBus.emit('scraper.poll.completed', {\n        timestamp: new Date(),\n        tweetsFound: tweets.length,\n        newTweets: newTweets.length,\n        stats: this.getStats(),\n      });\n\n      const nextInterval = this.getNextInterval();\n      const nextRunTime = new Date(Date.now() + nextInterval);\n\n      this.logger.info(\n        `X scraper run finished. Next run in ~${Math.round(nextInterval / 60000)} minutes, at ${nextRunTime.toLocaleTimeString()}`\n      );\n\n      // Perform the enhanced retweet detection as a separate, final step.\n      await this.performEnhancedRetweetDetection();\n    } catch (error) {\n      this.logger.error('Error polling X profile:', error);\n      // In case of a major failure, we still want to schedule the next poll\n      // to avoid the scraper getting stuck in a failed state.\n      this.scheduleNextPoll();\n      throw error;\n    }\n  }\n\n  /**\n   * Performs a separate check for retweets by navigating to the user's profile.\n   * This is designed to catch retweets that might be missed by the standard search.\n   * @returns {Promise<void>}\n   */\n  async performEnhancedRetweetDetection() {\n    try {\n      if (!this.shouldProcessRetweets()) {\n        return;\n      }\n      this.logger.info('Performing enhanced retweet detection...');\n      await this.navigateToProfileTimeline(this.xUser);\n\n      const tweets = await this.extractTweets();\n      this.logger.info(`Found ${tweets.length} potential retweets on profile page.`);\n\n      const newTweets = this.filterNewTweets(tweets);\n      this.logger.info(`Found ${newTweets.length} new tweets during enhanced retweet detection.`);\n\n      for (const tweet of newTweets) {\n        this.logger.debug(`Checking tweet ${tweet.tweetID}, category: ${tweet.tweetCategory}`);\n        if (this.isNewContent(tweet)) {\n          this.logger.info(`âœ… Found new tweet to process: ${tweet.url} (${tweet.tweetCategory})`);\n          await this.processNewTweet(tweet);\n          this.stats.totalTweetsAnnounced++;\n        } else {\n          this.logger.debug(`Skipping tweet ${tweet.tweetID} as it is old.`);\n        }\n      }\n    } catch (error) {\n      this.logger.error('Error during enhanced retweet detection:', error);\n      // Do not rethrow, as a failure here should not stop the main polling cycle.\n    }\n  }\n\n  /**\n   * Extract tweets from current page\n   * @returns {Promise<Array>} Array of tweet objects\n   */\n  async extractTweets() {\n    const monitoredUser = this.xUser; // Pass the monitored user to browser context\n    return await this.browser.evaluate(monitoredUser => {\n      /* eslint-disable no-undef */\n      const tweets = [];\n\n      // Try multiple selectors for tweet articles (X keeps changing these)\n      const articleSelectors = [\n        'article[data-testid=\"tweet\"]',\n        'article[role=\"article\"]',\n        'div[data-testid=\"cellInnerDiv\"] article',\n        'article',\n      ];\n\n      let articles = [];\n      for (const selector of articleSelectors) {\n        articles = document.querySelectorAll(selector);\n        if (articles.length > 0) {\n          console.log(`Found ${articles.length} articles using selector: ${selector}`);\n          break;\n        }\n      }\n\n      if (articles.length === 0) {\n        console.log('No tweet articles found with any selector');\n        return tweets;\n      }\n\n      for (const article of articles) {\n        try {\n          // Extract tweet URL with multiple selectors\n          const linkSelectors = ['a[href*=\"/status/\"]', 'time[datetime] + a', 'a[role=\"link\"][href*=\"/status/\"]'];\n\n          let tweetLink = null;\n          for (const selector of linkSelectors) {\n            tweetLink = article.querySelector(selector);\n            if (tweetLink) {\n              break;\n            }\n          }\n\n          if (!tweetLink) {\n            continue;\n          }\n\n          const url = tweetLink.href;\n          const tweetIdMatch = url.match(/status\\/(\\d+)/);\n          if (!tweetIdMatch) {\n            continue;\n          }\n\n          const tweetID = tweetIdMatch[1];\n\n          // Extract author with multiple selectors\n          const authorSelectors = [\n            '[data-testid=\"User-Name\"] a',\n            '[data-testid=\"User-Names\"] a',\n            'a[role=\"link\"][href^=\"/\"]',\n            'div[dir=\"ltr\"] span',\n          ];\n\n          let author = 'Unknown';\n          for (const selector of authorSelectors) {\n            const authorElement = article.querySelector(selector);\n            if (authorElement && authorElement.textContent.trim()) {\n              author = authorElement.textContent.trim();\n              break;\n            }\n          }\n\n          // Extract text content with multiple selectors\n          const textSelectors = ['[data-testid=\"tweetText\"]', '[lang] span', 'div[dir=\"ltr\"]', 'span[dir=\"ltr\"]'];\n\n          let text = '';\n          for (const selector of textSelectors) {\n            const textElement = article.querySelector(selector);\n            if (textElement && textElement.innerText) {\n              text = textElement.innerText;\n              break;\n            }\n          }\n\n          // Extract timestamp\n          const timeElement = article.querySelector('time');\n          const timestamp = timeElement ? timeElement.getAttribute('datetime') : null;\n\n          // Determine tweet category\n          let tweetCategory = 'Post';\n\n          // Check for reply indicators\n          let isReply = text.startsWith('@');\n          if (!isReply) {\n            // Check for \"Replying to\" text content in the article\n            const allText = article.innerText || '';\n            isReply = allText.includes('Replying to') || allText.includes('Show this thread');\n          }\n\n          if (isReply) {\n            tweetCategory = 'Reply';\n          }\n\n          // Check for quote tweet\n          const quoteTweetBlock = article.querySelector('div[role=\"link\"][tabindex=\"0\"] a[href*=\"/status/\"]');\n          if (quoteTweetBlock && quoteTweetBlock.href !== url) {\n            tweetCategory = 'Quote';\n          }\n\n          // Check for retweet - enhanced detection with author comparison\n          let isRetweet = false;\n\n          // Method 1: Check if author is different from monitored user\n          if (author !== monitoredUser && author !== `@${monitoredUser}` && author !== 'Unknown') {\n            isRetweet = true;\n          }\n\n          // Method 2: Check for social context element (modern retweet indicator)\n          if (!isRetweet) {\n            const socialContext = article.querySelector('[data-testid=\"socialContext\"]');\n            if (socialContext && socialContext.innerText.includes('reposted')) {\n              isRetweet = true;\n            }\n          }\n\n          // Method 3: Check for classic RT @ pattern\n          if (!isRetweet && text.startsWith('RT @')) {\n            isRetweet = true;\n          }\n\n          if (isRetweet) {\n            tweetCategory = 'Retweet';\n          }\n\n          tweets.push({\n            tweetID,\n            url,\n            author,\n            text,\n            timestamp,\n            tweetCategory,\n          });\n\n          console.log(`Extracted tweet: ${tweetID} - ${tweetCategory} - ${text.substring(0, 50)}...`);\n        } catch (err) {\n          console.error('Error extracting tweet:', err);\n        }\n      }\n\n      console.log(`Total tweets extracted: ${tweets.length}`);\n      return tweets;\n      /* eslint-enable no-undef */\n    }, monitoredUser);\n  }\n\n  /**\n   * Filter tweets to only include new ones\n   * @param {Array} tweets - All extracted tweets\n   * @returns {Array} New tweets only\n   */\n  filterNewTweets(tweets) {\n    const newTweets = [];\n    let duplicateCount = 0;\n    let oldContentCount = 0;\n\n    this.logger.debug(`Starting to filter ${tweets.length} tweets`);\n\n    for (const tweet of tweets) {\n      if (!this.duplicateDetector.isDuplicate(tweet.url)) {\n        // Mark as seen immediately to prevent future duplicates\n        this.duplicateDetector.markAsSeen(tweet.url);\n\n        // Check if tweet is new enough based on bot start time\n        if (this.isNewContent(tweet)) {\n          newTweets.push(tweet);\n          this.logger.debug(`Added new tweet: ${tweet.tweetID} - ${tweet.text.substring(0, 50)}...`);\n        } else {\n          oldContentCount++;\n          this.logger.debug(`Filtered out old tweet: ${tweet.tweetID} - timestamp: ${tweet.timestamp}`);\n        }\n      } else {\n        duplicateCount++;\n        this.logger.debug(`Filtered out duplicate tweet: ${tweet.tweetID}`);\n      }\n    }\n\n    this.logger.info(\n      `Filtering results: ${newTweets.length} new, ${duplicateCount} duplicates, ${oldContentCount} old content`\n    );\n\n    return newTweets;\n  }\n\n  /**\n   * Check if content is new enough to announce\n   * @param {Object} tweet - Tweet object\n   * @returns {boolean} True if content is new\n   */\n  isNewContent(tweet) {\n    const announceOldTweets = this.config.getBoolean('ANNOUNCE_OLD_TWEETS', false);\n\n    // If configured to announce old tweets, consider all tweets as new\n    if (announceOldTweets) {\n      this.logger.debug(`ANNOUNCE_OLD_TWEETS=true, considering tweet ${tweet.tweetID} as new`);\n      return true;\n    }\n\n    const botStartTime = this.state.get('botStartTime');\n    if (!botStartTime) {\n      this.logger.debug(`No bot start time set, considering tweet ${tweet.tweetID} as new`);\n      return true; // If no start time set, consider all content new\n    }\n\n    if (!tweet.timestamp) {\n      this.logger.debug(`No timestamp for tweet ${tweet.tweetID}, considering as new`);\n      return true; // If no timestamp available, assume it's new\n    }\n\n    const tweetTime = new Date(tweet.timestamp);\n    const isNew = tweetTime >= botStartTime;\n\n    this.logger.debug(\n      `Tweet ${tweet.tweetID}: tweetTime=${tweetTime.toISOString()}, botStartTime=${botStartTime.toISOString()}, isNew=${isNew}`\n    );\n\n    return isNew;\n  }\n\n  /**\n   * Check if enhanced retweet processing should be enabled\n   * @returns {boolean} True if retweet processing is enabled\n   */\n  shouldProcessRetweets() {\n    return this.config.getBoolean('ENABLE_RETWEET_PROCESSING', true);\n  }\n\n  /**\n   * Process a new tweet\n   * @param {Object} tweet - Tweet object\n   * @returns {Promise<void>}\n   */\n  async processNewTweet(tweet) {\n    try {\n      // Prepare metadata for classification\n      const metadata = {\n        timestamp: tweet.timestamp,\n        author: tweet.author,\n        monitoredUser: this.xUser,\n      };\n\n      // Add retweet metadata if available from enhanced detection\n      if (tweet.retweetMetadata) {\n        metadata.isRetweet = tweet.tweetCategory === 'Retweet';\n        metadata.retweetDetection = tweet.retweetMetadata;\n      }\n\n      // Check if this is a retweet based on author comparison (bypass classifier)\n      let classification;\n      if (\n        tweet.tweetCategory === 'Retweet' &&\n        tweet.author !== this.xUser &&\n        tweet.author !== `@${this.xUser}` &&\n        tweet.author !== 'Unknown'\n      ) {\n        // Bypass classifier for author-based retweets - send directly to retweet channel\n        this.logger.info(`Bypassing classifier for author-based retweet: ${tweet.author} != ${this.xUser}`);\n        classification = {\n          type: 'retweet',\n          confidence: 0.99,\n          platform: 'x',\n          details: {\n            statusId: tweet.tweetID,\n            author: tweet.author,\n            detectionMethod: 'author-based',\n          },\n        };\n      } else {\n        // Use classifier for other tweets\n        this.logger.info(\n          `Using classifier for tweet: category=${tweet.tweetCategory}, author=${tweet.author}, xUser=${this.xUser}`\n        );\n        classification = this.classifier.classifyXContent(tweet.url, tweet.text, metadata);\n      }\n\n      // Create content object for announcement\n      const content = {\n        platform: 'x',\n        type: classification.type,\n        id: tweet.tweetID,\n        url: tweet.url,\n        author: classification.type === 'retweet' ? this.xUser : tweet.author,\n        originalAuthor: tweet.author, // Store original author for retweets\n        text: tweet.text,\n        timestamp: tweet.timestamp,\n        isOld: !this.isNewContent(tweet),\n      };\n\n      // Announce the content\n      const result = await this.announcer.announceContent(content);\n\n      if (result.success) {\n        this.logger.info(`Announced ${classification.type} from @${tweet.author}: ${tweet.tweetID}`);\n      } else if (result.skipped) {\n        this.logger.debug(`Skipped ${classification.type} from @${tweet.author}: ${result.reason}`);\n      } else {\n        this.logger.warn(`Failed to announce ${classification.type} from @${tweet.author}: ${result.reason}`);\n      }\n\n      // Emit tweet processed event\n      this.eventBus.emit('scraper.tweet.processed', {\n        tweet: content,\n        classification,\n        result,\n        timestamp: new Date(),\n      });\n    } catch (error) {\n      this.logger.error(`Error processing tweet ${tweet.tweetID}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle email verification screen\n   * @returns {Promise<void>}\n   */\n  async handleEmailVerification() {\n    try {\n      this.logger.info('Handling email verification screen...');\n\n      // Get email from configuration\n      const email = this.config.get('TWITTER_EMAIL') || this.config.get('TWITTER_USERNAME');\n      if (!email || !email.includes('@')) {\n        this.logger.warn('No valid email found in configuration for email verification');\n        throw new Error('Email verification required but no email configured');\n      }\n\n      // Look for email input field - X uses a generic text input for email/phone\n      const emailInputSelectors = [\n        'input[data-testid=\"ocfEnterTextTextInput\"]', // X's email verification input\n        'input[name=\"text\"]', // Fallback generic text input\n        'input[name=\"email\"]',\n        'input[type=\"email\"]',\n        'input[placeholder*=\"email\" i]',\n      ];\n\n      let emailInput = null;\n      for (const selector of emailInputSelectors) {\n        try {\n          await this.browser.waitForSelector(selector, { timeout: 5000 });\n          emailInput = selector;\n          this.logger.debug(`Found email input with selector: ${selector}`);\n          break;\n        } catch {\n          this.logger.debug(`Email input selector failed: ${selector}`);\n          continue;\n        }\n      }\n\n      if (!emailInput) {\n        this.logger.warn('Could not find email input field, proceeding anyway');\n        return;\n      }\n\n      // Enter email\n      await this.browser.type(emailInput, email);\n      this.logger.info(`Entered email: ${email}`);\n\n      // Look for and click continue/next button\n      const continueButtonSelectors = [\n        'div[role=\"button\"]:has-text(\"Next\")',\n        'button:has-text(\"Next\")',\n        'div[role=\"button\"]:has-text(\"Continue\")',\n        'button:has-text(\"Continue\")',\n        '[data-testid=\"ocf_submit_button\"]',\n        'button[type=\"submit\"]',\n      ];\n\n      let continueClicked = false;\n      for (const selector of continueButtonSelectors) {\n        try {\n          await this.browser.waitForSelector(selector, { timeout: 5000 });\n          await this.browser.click(selector);\n          this.logger.info(`Clicked continue button using selector: ${selector}`);\n          continueClicked = true;\n          break;\n        } catch {\n          this.logger.debug(`Continue button selector failed: ${selector}`);\n          continue;\n        }\n      }\n\n      if (!continueClicked) {\n        this.logger.warn('Could not find continue button after email entry');\n      }\n\n      // Wait a bit for the next screen to load\n      await this.delay(3000);\n    } catch (error) {\n      this.logger.error('Error handling email verification:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify authentication status\n   * @returns {Promise<void>}\n   */\n  async verifyAuthentication() {\n    try {\n      this.logger.debug('Verifying X authentication status...');\n      const isAuthenticated = await this.authManager.isAuthenticated();\n      if (isAuthenticated) {\n        this.logger.debug('âœ… Authentication verified successfully');\n        return;\n      }\n\n      this.logger.warn('Authentication check failed, re-authenticating...');\n      await this.ensureAuthenticated();\n    } catch (error) {\n      this.logger.error('Authentication verification failed:', error);\n      this.logger.info('Attempting to re-authenticate after verification failure...');\n      await this.ensureAuthenticated();\n    }\n  }\n\n  /**\n   * Refresh authentication cookies\n   * @returns {Promise<void>}\n   */\n  async refreshAuth() {\n    try {\n      this.logger.info('Refreshing X authentication...');\n\n      // Navigate to home page to refresh session\n      await this.browser.goto('https://x.com/home');\n\n      // Check if we're still logged in\n      const isLoggedIn = await this.browser.evaluate(() => {\n        /* eslint-disable no-undef */\n        return !document.querySelector('[data-testid=\"login\"]');\n        /* eslint-enable no-undef */\n      });\n\n      if (!isLoggedIn) {\n        this.logger.warn('Authentication expired, re-logging in...');\n        await this.loginToX();\n      }\n\n      this.logger.info('Authentication refreshed successfully');\n    } catch (error) {\n      this.logger.error('Failed to refresh authentication:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if scraper is running\n   * @returns {boolean} True if running\n   */\n  isRunning() {\n    return this.isRunning;\n  }\n\n  /**\n   * Get scraper statistics\n   * @returns {Object} Statistics object\n   */\n  getStats() {\n    return {\n      isRunning: this.isRunning,\n      xUser: this.xUser,\n      pollingInterval: {\n        min: this.minInterval,\n        max: this.maxInterval,\n        next: this.nextPollTimestamp,\n      },\n      ...this.stats,\n      duplicateDetectorStats: this.duplicateDetector.getStats(),\n    };\n  }\n\n  /**\n   * Perform enhanced scrolling for comprehensive content loading\n   * @returns {Promise<void>}\n   */\n  async performEnhancedScrolling() {\n    // Scroll down multiple times to load more content for retweet detection\n    for (let i = 0; i < 5; i++) {\n      /* eslint-disable no-undef */\n      await this.browser.evaluate(() => window.scrollTo(0, document.body.scrollHeight));\n      /* eslint-enable no-undef */\n      await this.delay(1500); // Wait for content to load\n    }\n  }\n\n  /**\n   * Navigate to user profile timeline for retweet detection\n   * @param {string} username - X username\n   * @returns {Promise<void>}\n   */\n  async navigateToProfileTimeline(username) {\n    const profileUrl = `https://x.com/${username}`;\n    await this.browser.goto(profileUrl);\n\n    // Wait for timeline to load\n    await this.browser.waitForSelector('[data-testid=\"primaryColumn\"]');\n\n    // Perform deeper scrolling for retweets\n    await this.performEnhancedScrolling();\n  }\n\n  /**\n   * Ensure user is authenticated (alias for loginToX)\n   * @returns {Promise<void>}\n   */\n  async ensureAuthenticated() {\n    try {\n      await this.authManager.ensureAuthenticated();\n    } catch (err) {\n      this.logger.error('Authentication failed:', err);\n      throw err;\n    }\n  }\n\n  /**\n   * Validate cookie format\n   * @param {Array} cookies - Array of cookie objects\n   * @returns {boolean} True if cookies are valid\n   */\n  validateCookieFormat(cookies) {\n    if (!cookies || !Array.isArray(cookies) || cookies.length === 0) {\n      return false;\n    }\n\n    return cookies.every(cookie => {\n      return (\n        cookie && typeof cookie === 'object' && typeof cookie.name === 'string' && typeof cookie.value === 'string'\n      );\n    });\n  }\n\n  /**\n   * Dispose of resources\n   * @returns {Promise<void>}\n   */\n  /**\n   * Generate X search URL\n   * @param {boolean} includeDate - Whether to include the since date parameter\n   * @returns {string} The search URL\n   */\n  generateSearchUrl(includeDate = true) {\n    let searchUrl = `https://x.com/search?q=(from%3A${this.xUser})`;\n    if (includeDate) {\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const sinceDate = yesterday.toISOString().split('T')[0];\n      searchUrl += `%20since%3A${sinceDate}`;\n    }\n    searchUrl += '&f=live&pf=on&src=typed_query';\n    return searchUrl;\n  }\n\n  async dispose() {\n    await this.stop();\n  }\n}\n"],"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","ignoreList":[]}