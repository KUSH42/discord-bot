{"version":3,"names":["describe","it","expect","beforeEach","afterEach","jest","mockClient","mockChannel","mockMessage","mockUser","createMockClient","createMockChannel","createMockMessage","unstable_mockModule","Client","fn","GatewayIntentBits","Guilds","GuildMessages","MessageContent","ChannelType","GuildText","Events","Ready","MessageCreate","Error","discordClient","testChannel","supportChannel","clearAllMocks","id","name","channels","cache","set","clearAllTimers","login","mockResolvedValue","result","toHaveBeenCalledWith","toBe","error","mockRejectedValue","rejects","toThrow","readyHandler","messageHandler","errorHandler","on","emit","toHaveBeenCalled","channelId","fetch","channel","get","_restrictedChannel$pe","restrictedChannel","permissions","has","mockReturnValue","hasPermission","messageContent","sentMessage","content","send","embed","title","description","color","fields","value","inline","embeds","incomingMessage","author","bot","message","botMessage","commandPrefix","createCommandHandler","startsWith","args","slice","length","trim","split","command","shift","toLowerCase","reply","enabled","commandHandler","enableMessage","disableMessage","not","supportMessage","regularMessage","youtubeChannel","videoData","channelTitle","url","thumbnail","posts","replies","quotes","retweets","Object","values","forEach","tweetData","text","type","announceToChannel","channelType","data","failingChannel","announceWithErrorHandling","success","console","apiError","code","handled","reason","rateLimitError","retry_after","mockRejectedValueOnce","mockResolvedValueOnce","sendWithRetry","retries","Promise","resolve","setTimeout","toHaveBeenCalledTimes","reconnectHandler","disconnectHandler","urlProcessor","videoUrlRegex","matches","matchAll","match","videoId","react","log","messageWithYouTube","tweetUrlRegex","tweetId","messageWithTwitter","recentUrls","Set","duplicateFilter","urls","newUrls","filter","add","originalMessage","duplicateMessage","shouldProcessFirst","shouldProcessDuplicate","logMessage","level","logEmbed","toUpperCase","timestamp","Date","toISOString","objectContaining","metrics","messagesProcessed","commandsExecuted","urlsDetected","errors","metricsTracker","eventType"],"sources":["discord-integration.test.js"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport {\n  mockClient,\n  mockChannel,\n  mockMessage,\n  mockUser,\n  createMockClient,\n  createMockChannel,\n  createMockMessage,\n} from '../mocks/discord.mock.js';\n\n// Mock Discord.js module\njest.unstable_mockModule('discord.js', () => ({\n  Client: jest.fn(() => createMockClient()),\n  GatewayIntentBits: {\n    Guilds: 1,\n    GuildMessages: 512,\n    MessageContent: 32768,\n  },\n  ChannelType: { GuildText: 0 },\n  Events: {\n    Ready: 'ready',\n    MessageCreate: 'messageCreate',\n    Error: 'error',\n  },\n}));\n\ndescribe('Discord Integration Tests', () => {\n  let discordClient;\n  let testChannel;\n  let supportChannel;\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Create fresh mock instances\n    discordClient = createMockClient();\n    testChannel = createMockChannel({ id: 'test-channel-id', name: 'test-channel' });\n    supportChannel = createMockChannel({ id: 'support-channel-id', name: 'support' });\n\n    // Set up client channels\n    discordClient.channels.cache.set('test-channel-id', testChannel);\n    discordClient.channels.cache.set('support-channel-id', supportChannel);\n  });\n\n  afterEach(() => {\n    jest.clearAllTimers();\n  });\n\n  describe('Client Connection and Authentication', () => {\n    it('should successfully connect to Discord', async () => {\n      discordClient.login.mockResolvedValue('token');\n\n      const result = await discordClient.login('test-token');\n\n      expect(discordClient.login).toHaveBeenCalledWith('test-token');\n      expect(result).toBe('token');\n    });\n\n    it('should handle login failures gracefully', async () => {\n      const error = new Error('Invalid token');\n      discordClient.login.mockRejectedValue(error);\n\n      await expect(discordClient.login('invalid-token')).rejects.toThrow('Invalid token');\n    });\n\n    it('should set up event listeners correctly', () => {\n      const readyHandler = jest.fn();\n      const messageHandler = jest.fn();\n      const errorHandler = jest.fn();\n\n      discordClient.on('ready', readyHandler);\n      discordClient.on('messageCreate', messageHandler);\n      discordClient.on('error', errorHandler);\n\n      expect(discordClient.on).toHaveBeenCalledWith('ready', readyHandler);\n      expect(discordClient.on).toHaveBeenCalledWith('messageCreate', messageHandler);\n      expect(discordClient.on).toHaveBeenCalledWith('error', errorHandler);\n    });\n\n    it('should handle ready event', () => {\n      const readyHandler = jest.fn();\n      discordClient.on('ready', readyHandler);\n\n      // Simulate ready event\n      discordClient.emit('ready');\n\n      expect(readyHandler).toHaveBeenCalled();\n    });\n  });\n\n  describe('Channel Management', () => {\n    it('should fetch channels correctly', async () => {\n      const channelId = 'test-channel-id';\n      discordClient.channels.fetch.mockResolvedValue(testChannel);\n\n      const channel = await discordClient.channels.fetch(channelId);\n\n      expect(discordClient.channels.fetch).toHaveBeenCalledWith(channelId);\n      expect(channel).toBe(testChannel);\n      expect(channel.id).toBe(channelId);\n    });\n\n    it('should handle non-existent channels', async () => {\n      const channelId = 'non-existent-channel';\n      const error = new Error('Unknown Channel');\n      discordClient.channels.fetch.mockRejectedValue(error);\n\n      await expect(discordClient.channels.fetch(channelId)).rejects.toThrow('Unknown Channel');\n    });\n\n    it('should cache channels properly', () => {\n      const channel = discordClient.channels.cache.get('test-channel-id');\n\n      expect(channel).toBe(testChannel);\n      expect(channel.id).toBe('test-channel-id');\n    });\n\n    it('should handle channel permissions', () => {\n      // Mock channel with permissions\n      const restrictedChannel = createMockChannel({\n        id: 'restricted-channel',\n        permissions: {\n          has: jest.fn().mockReturnValue(false), // No send permission\n        },\n      });\n\n      const hasPermission = restrictedChannel.permissions?.has('SEND_MESSAGES');\n      expect(hasPermission).toBe(false);\n    });\n  });\n\n  describe('Message Handling', () => {\n    it('should send messages to channels', async () => {\n      const messageContent = 'Test message';\n      const sentMessage = { id: 'sent-message-id', content: messageContent };\n      testChannel.send.mockResolvedValue(sentMessage);\n\n      const result = await testChannel.send(messageContent);\n\n      expect(testChannel.send).toHaveBeenCalledWith(messageContent);\n      expect(result).toBe(sentMessage);\n    });\n\n    it('should send embeds to channels', async () => {\n      const embed = {\n        title: 'Test Embed',\n        description: 'This is a test embed',\n        color: 0x0099ff,\n        fields: [{ name: 'Field 1', value: 'Value 1', inline: true }],\n      };\n\n      const sentMessage = { id: 'embed-message-id', embeds: [embed] };\n      testChannel.send.mockResolvedValue(sentMessage);\n\n      const result = await testChannel.send({ embeds: [embed] });\n\n      expect(testChannel.send).toHaveBeenCalledWith({ embeds: [embed] });\n      expect(result).toBe(sentMessage);\n    });\n\n    it('should handle message sending failures', async () => {\n      const error = new Error('Missing Permissions');\n      testChannel.send.mockRejectedValue(error);\n\n      await expect(testChannel.send('Test message')).rejects.toThrow('Missing Permissions');\n    });\n\n    it('should process incoming messages', () => {\n      const messageHandler = jest.fn();\n      discordClient.on('messageCreate', messageHandler);\n\n      const incomingMessage = createMockMessage({\n        content: '!health',\n        author: { id: 'user123', bot: false },\n      });\n\n      // Simulate message creation event\n      discordClient.emit('messageCreate', incomingMessage);\n\n      expect(messageHandler).toHaveBeenCalledWith(incomingMessage);\n    });\n\n    it('should ignore bot messages', () => {\n      const messageHandler = jest.fn((message) => {\n        if (message.author.bot) {\n          return;\n        } // Ignore bot messages\n        // Process user message\n      });\n\n      discordClient.on('messageCreate', messageHandler);\n\n      const botMessage = createMockMessage({\n        content: 'Bot message',\n        author: { id: 'bot123', bot: true },\n      });\n\n      discordClient.emit('messageCreate', botMessage);\n\n      expect(messageHandler).toHaveBeenCalledWith(botMessage);\n      // Handler should ignore bot messages internally\n    });\n  });\n\n  describe('Bot Commands Processing', () => {\n    const commandPrefix = '!';\n\n    const createCommandHandler = () => {\n      return jest.fn((message) => {\n        if (message.author.bot) {\n          return;\n        }\n        if (!message.content.startsWith(commandPrefix)) {\n          return;\n        }\n\n        const args = message.content.slice(commandPrefix.length).trim().split(/ +/);\n        const command = args.shift().toLowerCase();\n\n        switch (command) {\n          case 'health':\n            return message.reply('Bot is healthy! 🟢');\n          case 'kill':\n            return message.reply('Posting disabled! ❌');\n          case 'restart':\n            return message.reply('Bot restarted! 🔄');\n          case 'announce': {\n            const enabled = args[0] === 'true';\n            return message.reply(`Announcements ${enabled ? 'enabled' : 'disabled'}!`);\n          }\n          default:\n            return message.reply('Unknown command!');\n        }\n      });\n    };\n\n    it('should process health command', async () => {\n      const commandHandler = createCommandHandler();\n      const message = createMockMessage({\n        content: '!health',\n        channel: supportChannel,\n      });\n\n      await commandHandler(message);\n\n      expect(message.reply).toHaveBeenCalledWith('Bot is healthy! 🟢');\n    });\n\n    it('should process kill command', async () => {\n      const commandHandler = createCommandHandler();\n      const message = createMockMessage({\n        content: '!kill',\n        channel: supportChannel,\n      });\n\n      await commandHandler(message);\n\n      expect(message.reply).toHaveBeenCalledWith('Posting disabled! ❌');\n    });\n\n    it('should process announce command with arguments', async () => {\n      const commandHandler = createCommandHandler();\n      const enableMessage = createMockMessage({\n        content: '!announce true',\n        channel: supportChannel,\n      });\n\n      await commandHandler(enableMessage);\n\n      expect(enableMessage.reply).toHaveBeenCalledWith('Announcements enabled!');\n\n      const disableMessage = createMockMessage({\n        content: '!announce false',\n        channel: supportChannel,\n      });\n\n      await commandHandler(disableMessage);\n\n      expect(disableMessage.reply).toHaveBeenCalledWith('Announcements disabled!');\n    });\n\n    it('should handle unknown commands', async () => {\n      const commandHandler = createCommandHandler();\n      const message = createMockMessage({\n        content: '!unknown',\n        channel: supportChannel,\n      });\n\n      await commandHandler(message);\n\n      expect(message.reply).toHaveBeenCalledWith('Unknown command!');\n    });\n\n    it('should ignore non-command messages', async () => {\n      const commandHandler = createCommandHandler();\n      const message = createMockMessage({\n        content: 'Regular message without command prefix',\n        channel: supportChannel,\n      });\n\n      await commandHandler(message);\n\n      expect(message.reply).not.toHaveBeenCalled();\n    });\n\n    it('should only process commands in support channel', () => {\n      const commandHandler = jest.fn((message) => {\n        if (message.author.bot) {\n          return;\n        }\n        if (message.channel.id !== 'support-channel-id') {\n          return;\n        }\n        if (!message.content.startsWith(commandPrefix)) {\n          return;\n        }\n\n        message.reply('Command processed in support channel');\n      });\n\n      // Command in support channel\n      const supportMessage = createMockMessage({\n        content: '!health',\n        channel: supportChannel,\n      });\n\n      commandHandler(supportMessage);\n      expect(supportMessage.reply).toHaveBeenCalledWith('Command processed in support channel');\n\n      // Command in regular channel (should be ignored)\n      const regularMessage = createMockMessage({\n        content: '!health',\n        channel: testChannel,\n      });\n\n      commandHandler(regularMessage);\n      expect(regularMessage.reply).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Content Announcement Integration', () => {\n    it('should announce YouTube videos to correct channel', async () => {\n      const youtubeChannel = createMockChannel({\n        id: 'youtube-channel-id',\n        name: 'youtube-announcements',\n      });\n      discordClient.channels.cache.set('youtube-channel-id', youtubeChannel);\n\n      const videoData = {\n        id: 'dQw4w9WgXcQ',\n        title: 'Rick Astley - Never Gonna Give You Up',\n        channelTitle: 'Rick Astley',\n        url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n        thumbnail: 'https://i.ytimg.com/vi/dQw4w9WgXcQ/hqdefault.jpg',\n      };\n\n      const embed = {\n        title: `New Video: ${videoData.title}`,\n        url: videoData.url,\n        author: { name: videoData.channelTitle },\n        thumbnail: { url: videoData.thumbnail },\n        color: 0xff0000,\n      };\n\n      await youtubeChannel.send({ embeds: [embed] });\n\n      expect(youtubeChannel.send).toHaveBeenCalledWith({ embeds: [embed] });\n    });\n\n    it('should announce X/Twitter posts to multiple channels', async () => {\n      const channels = {\n        posts: createMockChannel({ id: 'x-posts-channel', name: 'x-posts' }),\n        replies: createMockChannel({ id: 'x-replies-channel', name: 'x-replies' }),\n        quotes: createMockChannel({ id: 'x-quotes-channel', name: 'x-quotes' }),\n        retweets: createMockChannel({ id: 'x-retweets-channel', name: 'x-retweets' }),\n      };\n\n      Object.values(channels).forEach((channel) => {\n        discordClient.channels.cache.set(channel.id, channel);\n      });\n\n      const tweetData = {\n        id: '1234567890123456789',\n        text: 'This is a test tweet',\n        author: 'testuser',\n        url: 'https://x.com/testuser/status/1234567890123456789',\n        type: 'post',\n      };\n\n      const announceToChannel = async (channelType, data) => {\n        const channel = channels[channelType];\n        if (!channel) {\n          return;\n        }\n\n        const message = `New ${channelType.slice(0, -1)}: ${data.text}\\n${data.url}`;\n        await channel.send(message);\n      };\n\n      await announceToChannel('posts', tweetData);\n\n      expect(channels.posts.send).toHaveBeenCalledWith(`New post: ${tweetData.text}\\n${tweetData.url}`);\n    });\n\n    it('should handle announcement failures gracefully', async () => {\n      const failingChannel = createMockChannel({ id: 'failing-channel' });\n      failingChannel.send.mockRejectedValue(new Error('Channel not found'));\n\n      const announceWithErrorHandling = async (channel, content) => {\n        try {\n          await channel.send(content);\n          return { success: true };\n        } catch (error) {\n          console.error('Failed to send announcement:', error.message);\n          return { success: false, error: error.message };\n        }\n      };\n\n      const result = await announceWithErrorHandling(failingChannel, 'Test message');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Channel not found');\n    });\n  });\n\n  describe('Error Handling and Recovery', () => {\n    it('should handle Discord API errors', async () => {\n      const apiError = new Error('API Error');\n      apiError.code = 50013; // Missing Permissions\n      testChannel.send.mockRejectedValue(apiError);\n\n      const errorHandler = jest.fn((error) => {\n        if (error.code === 50013) {\n          console.error('Missing permissions to send message');\n          return { handled: true, reason: 'permissions' };\n        }\n        return { handled: false };\n      });\n\n      try {\n        await testChannel.send('Test message');\n      } catch (error) {\n        const result = errorHandler(error);\n        expect(result.handled).toBe(true);\n        expect(result.reason).toBe('permissions');\n      }\n    });\n\n    it('should handle rate limiting', async () => {\n      const rateLimitError = new Error('Rate Limited');\n      rateLimitError.code = 50004;\n      rateLimitError.retry_after = 5000; // 5 seconds\n\n      testChannel.send.mockRejectedValueOnce(rateLimitError);\n      testChannel.send.mockResolvedValueOnce({ id: 'success-message' });\n\n      const sendWithRetry = async (channel, content, retries = 1) => {\n        try {\n          return await channel.send(content);\n        } catch (error) {\n          if (error.code === 50004 && retries > 0) {\n            await new Promise((resolve) => setTimeout(resolve, 1)); // Minimal delay for test\n            return sendWithRetry(channel, content, retries - 1);\n          }\n          throw error;\n        }\n      };\n\n      const result = await sendWithRetry(testChannel, 'Test message');\n\n      expect(testChannel.send).toHaveBeenCalledTimes(2);\n      expect(result.id).toBe('success-message');\n    });\n\n    it('should handle connection losses', () => {\n      const reconnectHandler = jest.fn();\n      const disconnectHandler = jest.fn();\n\n      discordClient.on('disconnect', disconnectHandler);\n      discordClient.on('reconnecting', reconnectHandler);\n\n      // Simulate disconnect\n      discordClient.emit('disconnect');\n      expect(disconnectHandler).toHaveBeenCalled();\n\n      // Simulate reconnect\n      discordClient.emit('reconnecting');\n      expect(reconnectHandler).toHaveBeenCalled();\n    });\n  });\n\n  describe('Message Filtering and Validation', () => {\n    it('should detect and process YouTube URLs in messages', () => {\n      const urlProcessor = jest.fn((message) => {\n        const videoUrlRegex =\n          /https?:\\/\\/(?:(?:www\\.)?youtube\\.com\\/(?:watch\\?v=|live\\/|shorts\\/|embed\\/|v\\/)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/g;\n        const matches = [...message.content.matchAll(videoUrlRegex)];\n\n        if (matches.length > 0) {\n          matches.forEach((match) => {\n            const videoId = match[1];\n            message.react('📺');\n            console.log(`Found YouTube video: ${videoId}`);\n          });\n        }\n      });\n\n      const messageWithYouTube = createMockMessage({\n        content: 'Check this out: https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n      });\n\n      urlProcessor(messageWithYouTube);\n\n      expect(messageWithYouTube.react).toHaveBeenCalledWith('📺');\n    });\n\n    it('should detect and process X/Twitter URLs in messages', () => {\n      const urlProcessor = jest.fn((message) => {\n        const tweetUrlRegex =\n          /https?:\\/\\/(?:[\\w-]+\\.)*(?:x\\.com|twitter\\.com|vxtwitter\\.com|fxtwitter\\.com|nitter\\.[^/]+)\\/(?:(?:i\\/web\\/)?status(?:es)?|[^/]+\\/status(?:es)?)\\/(\\d+)/g;\n        const matches = [...message.content.matchAll(tweetUrlRegex)];\n\n        if (matches.length > 0) {\n          matches.forEach((match) => {\n            const tweetId = match[1];\n            message.react('🐦');\n            console.log(`Found Twitter/X post: ${tweetId}`);\n          });\n        }\n      });\n\n      const messageWithTwitter = createMockMessage({\n        content: 'Look at this tweet: https://x.com/user/status/1234567890123456789',\n      });\n\n      urlProcessor(messageWithTwitter);\n\n      expect(messageWithTwitter.react).toHaveBeenCalledWith('🐦');\n    });\n\n    it('should filter duplicate URLs within time window', () => {\n      const recentUrls = new Set();\n      const duplicateFilter = jest.fn((message) => {\n        const urls = message.content.match(/https?:\\/\\/[^\\s]+/g) || [];\n        const newUrls = urls.filter((url) => !recentUrls.has(url));\n\n        if (newUrls.length === 0 && urls.length > 0) {\n          message.react('🔁'); // Duplicate indicator\n          return false; // Skip processing\n        }\n\n        newUrls.forEach((url) => recentUrls.add(url));\n        return true; // Process message\n      });\n\n      const originalMessage = createMockMessage({\n        content: 'First: https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n      });\n\n      const duplicateMessage = createMockMessage({\n        content: 'Duplicate: https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n      });\n\n      const shouldProcessFirst = duplicateFilter(originalMessage);\n      const shouldProcessDuplicate = duplicateFilter(duplicateMessage);\n\n      expect(shouldProcessFirst).toBe(true);\n      expect(shouldProcessDuplicate).toBe(false);\n      expect(duplicateMessage.react).toHaveBeenCalledWith('🔁');\n    });\n  });\n\n  describe('Logging and Monitoring Integration', () => {\n    it('should log Discord events to support channel', async () => {\n      const logMessage = async (level, message) => {\n        const logEmbed = {\n          color: level === 'error' ? 0xff0000 : level === 'warn' ? 0xffff00 : 0x00ff00,\n          title: `${level.toUpperCase()}: Bot Log`,\n          description: message,\n          timestamp: new Date().toISOString(),\n        };\n\n        await supportChannel.send({ embeds: [logEmbed] });\n      };\n\n      await logMessage('info', 'Bot started successfully');\n      await logMessage('error', 'Failed to process webhook');\n\n      expect(supportChannel.send).toHaveBeenCalledTimes(2);\n      expect(supportChannel.send).toHaveBeenCalledWith({\n        embeds: [\n          expect.objectContaining({\n            title: 'INFO: Bot Log',\n            description: 'Bot started successfully',\n          }),\n        ],\n      });\n    });\n\n    it('should track message processing metrics', () => {\n      const metrics = {\n        messagesProcessed: 0,\n        commandsExecuted: 0,\n        urlsDetected: 0,\n        errors: 0,\n      };\n\n      const metricsTracker = jest.fn((eventType, data = {}) => {\n        switch (eventType) {\n          case 'message_processed':\n            metrics.messagesProcessed++;\n            break;\n          case 'command_executed':\n            metrics.commandsExecuted++;\n            break;\n          case 'url_detected':\n            metrics.urlsDetected++;\n            break;\n          case 'error':\n            metrics.errors++;\n            break;\n        }\n      });\n\n      // Simulate events\n      metricsTracker('message_processed');\n      metricsTracker('command_executed');\n      metricsTracker('url_detected');\n      metricsTracker('error');\n\n      expect(metrics.messagesProcessed).toBe(1);\n      expect(metrics.commandsExecuted).toBe(1);\n      expect(metrics.urlsDetected).toBe(1);\n      expect(metrics.errors).toBe(1);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}