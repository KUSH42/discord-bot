{"version":3,"names":["cov_igneruij4","actualCoverage","StateManager","constructor","initialState","b","f","s","state","subscribers","Map","validators","locked","get","key","defaultValue","undefined","Error","Object","prototype","hasOwnProperty","call","set","value","has","validator","validationResult","oldValue","hasChanged","notifySubscribers","update","updates","validatedUpdates","entries","changes","push","change","delete","subscribe","callback","unsubscribe","callbacks","index","indexOf","splice","length","setValidator","removeValidator","getKeys","keys","getAll","reset","newState","oldState","allKeys","Set","newValue","lock","unlock","isLocked","createSnapshot","timestamp","Date","now","subscriberCount","Array","from","values","reduce","sum","arr","validatorCount","size","restoreSnapshot","snapshot","callbacksCopy","setImmediate","includes","error","console","getStats","stateKeys","memoryUsage","JSON","stringify"],"sources":["state-manager.js"],"sourcesContent":["/**\n * Centralized state management with validation and subscriptions\n */\nexport class StateManager {\n  constructor(initialState = {}) {\n    this.state = { ...initialState };\n    this.subscribers = new Map();\n    this.validators = new Map();\n    this.locked = false;\n  }\n\n  /**\n   * Get a state value\n   * @param {string} key - State key\n   * @param {*} defaultValue - Default value if key doesn't exist\n   * @returns {*} State value\n   */\n  get(key, defaultValue = undefined) {\n    if (typeof key !== 'string') {\n      throw new Error('State key must be a string');\n    }\n\n    return Object.prototype.hasOwnProperty.call(this.state, key) ? this.state[key] : defaultValue;\n  }\n\n  /**\n   * Set a state value\n   * @param {string} key - State key\n   * @param {*} value - New value\n   * @returns {boolean} True if value was set, false if validation failed\n   */\n  set(key, value) {\n    if (typeof key !== 'string') {\n      throw new Error('State key must be a string');\n    }\n\n    if (this.locked) {\n      throw new Error('StateManager is locked and cannot be modified');\n    }\n\n    // Validate value if validator exists\n    if (this.validators.has(key)) {\n      const validator = this.validators.get(key);\n      const validationResult = validator(value, this.state[key]);\n\n      if (validationResult !== true) {\n        throw new Error(`Validation failed for key '${key}': ${validationResult}`);\n      }\n    }\n\n    const oldValue = this.state[key];\n    const hasChanged = oldValue !== value;\n\n    if (hasChanged) {\n      this.state[key] = value;\n      this.notifySubscribers(key, value, oldValue);\n    }\n\n    return true;\n  }\n\n  /**\n   * Update multiple state values atomically\n   * @param {Object} updates - Object with key-value pairs to update\n   */\n  update(updates) {\n    if (typeof updates !== 'object' || updates === null) {\n      throw new Error('Updates must be an object');\n    }\n\n    if (this.locked) {\n      throw new Error('StateManager is locked and cannot be modified');\n    }\n\n    // Validate all updates first\n    const validatedUpdates = {};\n    for (const [key, value] of Object.entries(updates)) {\n      if (this.validators.has(key)) {\n        const validator = this.validators.get(key);\n        const validationResult = validator(value, this.state[key]);\n\n        if (validationResult !== true) {\n          throw new Error(`Validation failed for key '${key}': ${validationResult}`);\n        }\n      }\n      validatedUpdates[key] = value;\n    }\n\n    // Apply all updates\n    const changes = [];\n    for (const [key, value] of Object.entries(validatedUpdates)) {\n      const oldValue = this.state[key];\n      if (oldValue !== value) {\n        this.state[key] = value;\n        changes.push({ key, value, oldValue });\n      }\n    }\n\n    // Notify subscribers of changes\n    for (const change of changes) {\n      this.notifySubscribers(change.key, change.value, change.oldValue);\n    }\n  }\n\n  /**\n   * Check if a key exists in the state\n   * @param {string} key - State key\n   * @returns {boolean} True if key exists\n   */\n  has(key) {\n    return Object.prototype.hasOwnProperty.call(this.state, key);\n  }\n\n  /**\n   * Delete a state key\n   * @param {string} key - State key\n   * @returns {boolean} True if key was deleted\n   */\n  delete(key) {\n    if (typeof key !== 'string') {\n      throw new Error('State key must be a string');\n    }\n\n    if (this.locked) {\n      throw new Error('StateManager is locked and cannot be modified');\n    }\n\n    if (Object.prototype.hasOwnProperty.call(this.state, key)) {\n      const oldValue = this.state[key];\n      delete this.state[key];\n      this.notifySubscribers(key, undefined, oldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Subscribe to changes in a specific state key\n   * @param {string} key - State key to watch\n   * @param {Function} callback - Callback function (newValue, oldValue, key) => void\n   * @returns {Function} Unsubscribe function\n   */\n  subscribe(key, callback) {\n    if (typeof key !== 'string') {\n      throw new Error('State key must be a string');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    if (!this.subscribers.has(key)) {\n      this.subscribers.set(key, []);\n    }\n\n    this.subscribers.get(key).push(callback);\n\n    // Return unsubscribe function\n    return () => this.unsubscribe(key, callback);\n  }\n\n  /**\n   * Unsubscribe from state changes\n   * @param {string} key - State key\n   * @param {Function} callback - Callback function to remove\n   */\n  unsubscribe(key, callback) {\n    if (!this.subscribers.has(key)) {\n      return;\n    }\n\n    const callbacks = this.subscribers.get(key);\n    const index = callbacks.indexOf(callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n\n      // Clean up empty arrays\n      if (callbacks.length === 0) {\n        this.subscribers.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Set a validator for a state key\n   * @param {string} key - State key\n   * @param {Function} validator - Validator function (newValue, oldValue) => true | string\n   */\n  setValidator(key, validator) {\n    if (typeof key !== 'string') {\n      throw new Error('State key must be a string');\n    }\n\n    if (typeof validator !== 'function') {\n      throw new Error('Validator must be a function');\n    }\n\n    this.validators.set(key, validator);\n  }\n\n  /**\n   * Remove a validator for a state key\n   * @param {string} key - State key\n   */\n  removeValidator(key) {\n    this.validators.delete(key);\n  }\n\n  /**\n   * Get all state keys\n   * @returns {Array<string>} Array of state keys\n   */\n  getKeys() {\n    return Object.keys(this.state);\n  }\n\n  /**\n   * Get all state as a copy\n   * @returns {Object} Copy of current state\n   */\n  getAll() {\n    return { ...this.state };\n  }\n\n  /**\n   * Reset state to initial values or provided state\n   * @param {Object} newState - New state object (optional)\n   */\n  reset(newState = {}) {\n    if (this.locked) {\n      throw new Error('StateManager is locked and cannot be modified');\n    }\n\n    const oldState = { ...this.state };\n    this.state = { ...newState };\n\n    // Notify subscribers of all changes\n    const allKeys = new Set([...Object.keys(oldState), ...Object.keys(newState)]);\n    for (const key of allKeys) {\n      const oldValue = oldState[key];\n      const newValue = this.state[key];\n\n      if (oldValue !== newValue) {\n        this.notifySubscribers(key, newValue, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Lock the state manager (prevent modifications)\n   */\n  lock() {\n    this.locked = true;\n  }\n\n  /**\n   * Unlock the state manager (allow modifications)\n   */\n  unlock() {\n    this.locked = false;\n  }\n\n  /**\n   * Check if state manager is locked\n   * @returns {boolean} True if locked\n   */\n  isLocked() {\n    return this.locked;\n  }\n\n  /**\n   * Create a snapshot of current state\n   * @returns {Object} State snapshot with metadata\n   */\n  createSnapshot() {\n    return {\n      state: { ...this.state },\n      timestamp: Date.now(),\n      subscriberCount: Array.from(this.subscribers.values()).reduce((sum, arr) => sum + arr.length, 0),\n      validatorCount: this.validators.size,\n    };\n  }\n\n  /**\n   * Restore state from snapshot\n   * @param {Object} snapshot - State snapshot\n   */\n  restoreSnapshot(snapshot) {\n    if (!snapshot || typeof snapshot !== 'object') {\n      throw new Error('Invalid snapshot');\n    }\n\n    this.reset(snapshot.state);\n  }\n\n  /**\n   * Notify subscribers of state changes\n   * @private\n   */\n  notifySubscribers(key, newValue, oldValue) {\n    const callbacks = this.subscribers.get(key);\n    if (!callbacks || callbacks.length === 0) {\n      return;\n    }\n\n    // Create a copy to avoid issues if callbacks modify the array\n    const callbacksCopy = [...callbacks];\n\n    // Execute callbacks asynchronously to avoid blocking\n    setImmediate(() => {\n      for (const callback of callbacksCopy) {\n        // Check if the callback is still subscribed before invoking\n        if (this.subscribers.has(key) && this.subscribers.get(key).includes(callback)) {\n          try {\n            callback(newValue, oldValue, key);\n          } catch (error) {\n            console.error(`StateManager: Subscriber error for key '${key}':`, error);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Get statistics about the state manager\n   */\n  getStats() {\n    return {\n      stateKeys: this.getKeys().length,\n      subscriberCount: Array.from(this.subscribers.values()).reduce((sum, arr) => sum + arr.length, 0),\n      validatorCount: this.validators.size,\n      locked: this.locked,\n      memoryUsage: JSON.stringify(this.state).length,\n    };\n  }\n}\n"],"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","ignoreList":[]}