{"version":3,"names":["BrowserService","launch","options","Error","newPage","goto","url","waitForSelector","selector","waitForNavigation","evaluate","script","args","type","text","click","getTextContent","getAttribute","attribute","screenshot","setCookies","cookies","getCookies","urls","setUserAgent","userAgent","setViewport","viewport","waitFor","ms","getContent","getCurrentUrl","elementExists","getElements","closePage","close","isRunning","dispose"],"sources":["browser-service.js"],"sourcesContent":["/**\n * Abstract Browser service interface\n * Defines the contract for browser automation that can be mocked in tests\n */\nexport class BrowserService {\n  /**\n   * Launch a browser instance\n   * @param {Object} options - Browser launch options\n   * @returns {Promise<void>}\n   */\n  async launch(options = {}) {\n    throw new Error('Abstract method: launch must be implemented');\n  }\n\n  /**\n   * Create a new page\n   * @returns {Promise<Object>} Page object\n   */\n  async newPage() {\n    throw new Error('Abstract method: newPage must be implemented');\n  }\n\n  /**\n   * Navigate to a URL\n   * @param {string} url - URL to navigate to\n   * @param {Object} options - Navigation options\n   * @returns {Promise<Object>} Response object\n   */\n  async goto(url, options = {}) {\n    throw new Error('Abstract method: goto must be implemented');\n  }\n\n  /**\n   * Wait for a selector to appear\n   * @param {string} selector - CSS selector\n   * @param {Object} options - Wait options\n   * @returns {Promise<Object>} Element handle\n   */\n  async waitForSelector(selector, options = {}) {\n    throw new Error('Abstract method: waitForSelector must be implemented');\n  }\n\n  /**\n   * Wait for navigation to complete\n   * @param {Object} options - Wait options\n   * @returns {Promise<Object>} Response object\n   */\n  async waitForNavigation(options = {}) {\n    throw new Error('Abstract method: waitForNavigation must be implemented');\n  }\n\n  /**\n   * Execute JavaScript in the page context\n   * @param {string|Function} script - JavaScript code or function\n   * @param {...*} args - Arguments to pass to the function\n   * @returns {Promise<*>} Result of the script execution\n   */\n  async evaluate(script, ...args) {\n    throw new Error('Abstract method: evaluate must be implemented');\n  }\n\n  /**\n   * Type text into an element\n   * @param {string} selector - CSS selector\n   * @param {string} text - Text to type\n   * @param {Object} options - Type options\n   * @returns {Promise<void>}\n   */\n  async type(selector, text, options = {}) {\n    throw new Error('Abstract method: type must be implemented');\n  }\n\n  /**\n   * Click an element\n   * @param {string} selector - CSS selector\n   * @param {Object} options - Click options\n   * @returns {Promise<void>}\n   */\n  async click(selector, options = {}) {\n    throw new Error('Abstract method: click must be implemented');\n  }\n\n  /**\n   * Get text content of an element\n   * @param {string} selector - CSS selector\n   * @returns {Promise<string>} Text content\n   */\n  async getTextContent(selector) {\n    throw new Error('Abstract method: getTextContent must be implemented');\n  }\n\n  /**\n   * Get attribute value of an element\n   * @param {string} selector - CSS selector\n   * @param {string} attribute - Attribute name\n   * @returns {Promise<string|null>} Attribute value\n   */\n  async getAttribute(selector, attribute) {\n    throw new Error('Abstract method: getAttribute must be implemented');\n  }\n\n  /**\n   * Take a screenshot\n   * @param {Object} options - Screenshot options\n   * @returns {Promise<Buffer>} Screenshot buffer\n   */\n  async screenshot(options = {}) {\n    throw new Error('Abstract method: screenshot must be implemented');\n  }\n\n  /**\n   * Set cookies\n   * @param {Array<Object>} cookies - Array of cookie objects\n   * @returns {Promise<void>}\n   */\n  async setCookies(cookies) {\n    throw new Error('Abstract method: setCookies must be implemented');\n  }\n\n  /**\n   * Get cookies\n   * @param {Array<string>} urls - URLs to get cookies for (optional)\n   * @returns {Promise<Array<Object>>} Array of cookie objects\n   */\n  async getCookies(urls = []) {\n    throw new Error('Abstract method: getCookies must be implemented');\n  }\n\n  /**\n   * Set user agent\n   * @param {string} userAgent - User agent string\n   * @returns {Promise<void>}\n   */\n  async setUserAgent(userAgent) {\n    throw new Error('Abstract method: setUserAgent must be implemented');\n  }\n\n  /**\n   * Set viewport size\n   * @param {Object} viewport - Viewport dimensions\n   * @returns {Promise<void>}\n   */\n  async setViewport(viewport) {\n    throw new Error('Abstract method: setViewport must be implemented');\n  }\n\n  /**\n   * Wait for a specified amount of time\n   * @param {number} ms - Milliseconds to wait\n   * @returns {Promise<void>}\n   */\n  async waitFor(ms) {\n    throw new Error('Abstract method: waitFor must be implemented');\n  }\n\n  /**\n   * Get page content/HTML\n   * @returns {Promise<string>} Page HTML content\n   */\n  async getContent() {\n    throw new Error('Abstract method: getContent must be implemented');\n  }\n\n  /**\n   * Get current page URL\n   * @returns {Promise<string>} Current URL\n   */\n  async getCurrentUrl() {\n    throw new Error('Abstract method: getCurrentUrl must be implemented');\n  }\n\n  /**\n   * Check if element exists\n   * @param {string} selector - CSS selector\n   * @returns {Promise<boolean>} True if element exists\n   */\n  async elementExists(selector) {\n    throw new Error('Abstract method: elementExists must be implemented');\n  }\n\n  /**\n   * Get multiple elements\n   * @param {string} selector - CSS selector\n   * @returns {Promise<Array<Object>>} Array of element handles\n   */\n  async getElements(selector) {\n    throw new Error('Abstract method: getElements must be implemented');\n  }\n\n  /**\n   * Close the current page\n   * @returns {Promise<void>}\n   */\n  async closePage() {\n    throw new Error('Abstract method: closePage must be implemented');\n  }\n\n  /**\n   * Close the browser\n   * @returns {Promise<void>}\n   */\n  async close() {\n    throw new Error('Abstract method: close must be implemented');\n  }\n\n  /**\n   * Check if browser is running\n   * @returns {boolean} True if browser is running\n   */\n  isRunning() {\n    throw new Error('Abstract method: isRunning must be implemented');\n  }\n\n  /**\n   * Dispose of resources\n   * @returns {Promise<void>}\n   */\n  async dispose() {\n    await this.close();\n  }\n}\n"],"mappings":"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","ignoreList":[]}