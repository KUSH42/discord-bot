1f88b9b2038d861c3726f5661da748a5
/**
 * Abstract Browser service interface
 * Defines the contract for browser automation that can be mocked in tests
 */
export class BrowserService {
  /**
   * Launch a browser instance
   * @param {Object} options - Browser launch options
   * @returns {Promise<void>}
   */
  async launch(options = {}) {
    throw new Error('Abstract method: launch must be implemented');
  }

  /**
   * Create a new page
   * @returns {Promise<Object>} Page object
   */
  async newPage() {
    throw new Error('Abstract method: newPage must be implemented');
  }

  /**
   * Navigate to a URL
   * @param {string} url - URL to navigate to
   * @param {Object} options - Navigation options
   * @returns {Promise<Object>} Response object
   */
  async goto(url, options = {}) {
    throw new Error('Abstract method: goto must be implemented');
  }

  /**
   * Wait for a selector to appear
   * @param {string} selector - CSS selector
   * @param {Object} options - Wait options
   * @returns {Promise<Object>} Element handle
   */
  async waitForSelector(selector, options = {}) {
    throw new Error('Abstract method: waitForSelector must be implemented');
  }

  /**
   * Wait for navigation to complete
   * @param {Object} options - Wait options
   * @returns {Promise<Object>} Response object
   */
  async waitForNavigation(options = {}) {
    throw new Error('Abstract method: waitForNavigation must be implemented');
  }

  /**
   * Execute JavaScript in the page context
   * @param {string|Function} script - JavaScript code or function
   * @param {...*} args - Arguments to pass to the function
   * @returns {Promise<*>} Result of the script execution
   */
  async evaluate(script, ...args) {
    throw new Error('Abstract method: evaluate must be implemented');
  }

  /**
   * Type text into an element
   * @param {string} selector - CSS selector
   * @param {string} text - Text to type
   * @param {Object} options - Type options
   * @returns {Promise<void>}
   */
  async type(selector, text, options = {}) {
    throw new Error('Abstract method: type must be implemented');
  }

  /**
   * Click an element
   * @param {string} selector - CSS selector
   * @param {Object} options - Click options
   * @returns {Promise<void>}
   */
  async click(selector, options = {}) {
    throw new Error('Abstract method: click must be implemented');
  }

  /**
   * Get text content of an element
   * @param {string} selector - CSS selector
   * @returns {Promise<string>} Text content
   */
  async getTextContent(selector) {
    throw new Error('Abstract method: getTextContent must be implemented');
  }

  /**
   * Get attribute value of an element
   * @param {string} selector - CSS selector
   * @param {string} attribute - Attribute name
   * @returns {Promise<string|null>} Attribute value
   */
  async getAttribute(selector, attribute) {
    throw new Error('Abstract method: getAttribute must be implemented');
  }

  /**
   * Take a screenshot
   * @param {Object} options - Screenshot options
   * @returns {Promise<Buffer>} Screenshot buffer
   */
  async screenshot(options = {}) {
    throw new Error('Abstract method: screenshot must be implemented');
  }

  /**
   * Set cookies
   * @param {Array<Object>} cookies - Array of cookie objects
   * @returns {Promise<void>}
   */
  async setCookies(cookies) {
    throw new Error('Abstract method: setCookies must be implemented');
  }

  /**
   * Get cookies
   * @param {Array<string>} urls - URLs to get cookies for (optional)
   * @returns {Promise<Array<Object>>} Array of cookie objects
   */
  async getCookies(urls = []) {
    throw new Error('Abstract method: getCookies must be implemented');
  }

  /**
   * Set user agent
   * @param {string} userAgent - User agent string
   * @returns {Promise<void>}
   */
  async setUserAgent(userAgent) {
    throw new Error('Abstract method: setUserAgent must be implemented');
  }

  /**
   * Set viewport size
   * @param {Object} viewport - Viewport dimensions
   * @returns {Promise<void>}
   */
  async setViewport(viewport) {
    throw new Error('Abstract method: setViewport must be implemented');
  }

  /**
   * Wait for a specified amount of time
   * @param {number} ms - Milliseconds to wait
   * @returns {Promise<void>}
   */
  async waitFor(ms) {
    throw new Error('Abstract method: waitFor must be implemented');
  }

  /**
   * Get page content/HTML
   * @returns {Promise<string>} Page HTML content
   */
  async getContent() {
    throw new Error('Abstract method: getContent must be implemented');
  }

  /**
   * Get current page URL
   * @returns {Promise<string>} Current URL
   */
  async getCurrentUrl() {
    throw new Error('Abstract method: getCurrentUrl must be implemented');
  }

  /**
   * Check if element exists
   * @param {string} selector - CSS selector
   * @returns {Promise<boolean>} True if element exists
   */
  async elementExists(selector) {
    throw new Error('Abstract method: elementExists must be implemented');
  }

  /**
   * Get multiple elements
   * @param {string} selector - CSS selector
   * @returns {Promise<Array<Object>>} Array of element handles
   */
  async getElements(selector) {
    throw new Error('Abstract method: getElements must be implemented');
  }

  /**
   * Close the current page
   * @returns {Promise<void>}
   */
  async closePage() {
    throw new Error('Abstract method: closePage must be implemented');
  }

  /**
   * Close the browser
   * @returns {Promise<void>}
   */
  async close() {
    throw new Error('Abstract method: close must be implemented');
  }

  /**
   * Check if browser is running
   * @returns {boolean} True if browser is running
   */
  isRunning() {
    throw new Error('Abstract method: isRunning must be implemented');
  }

  /**
   * Dispose of resources
   * @returns {Promise<void>}
   */
  async dispose() {
    await this.close();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,