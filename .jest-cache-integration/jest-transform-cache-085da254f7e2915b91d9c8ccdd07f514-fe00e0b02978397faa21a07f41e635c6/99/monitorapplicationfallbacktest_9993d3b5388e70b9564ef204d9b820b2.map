{"version":3,"names":["describe","it","expect","beforeEach","afterEach","jest","MonitorApplication","monitorApp","mockYoutubeService","mockHttpService","mockContentClassifier","mockContentAnnouncer","mockConfig","mockStateManager","mockEventBus","mockLogger","realTimeouts","useFakeTimers","setTimeout","global","clearTimeout","getChannelDetails","fn","getVideoDetails","getChannelVideos","post","isSuccessResponse","mockReturnValue","classifyYouTubeContent","type","details","announceContent","mockResolvedValue","success","getRequired","mockImplementation","key","values","YOUTUBE_CHANNEL_ID","YOUTUBE_API_KEY","PSH_CALLBACK_URL","get","getNumber","getBoolean","Date","emit","info","warn","error","debug","dependencies","youtubeService","httpService","contentClassifier","contentAnnouncer","config","stateManager","eventBus","logger","useRealTimers","clearAllMocks","spyOn","isValid","method","request","body","headers","handleWebhook","fallbackTimerId","toBeNull","performApiFallback","not","toHaveBeenCalled","videoId","mockRejectedValue","Error","toBeTruthy","toHaveBeenCalledWith","advanceTimersByTime","id","snippet","title","toHaveBeenCalledTimes","mockVideos","publishedAt","channelTitle","processVideo","stats","fallbackPolls","toBe","rejects","toThrow","any","start","scheduleApiFallback","stop","mockVideo","duplicateDetector","video","source","isDuplicate","isLive","objectContaining","platform","timestamp"],"sources":["monitor-application-fallback.test.js"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { MonitorApplication } from '../../src/application/monitor-application.js';\n\ndescribe('MonitorApplication - Fallback Integration Tests', () => {\n  let monitorApp;\n  let mockYoutubeService;\n  let mockHttpService;\n  let mockContentClassifier;\n  let mockContentAnnouncer;\n  let mockConfig;\n  let mockStateManager;\n  let mockEventBus;\n  let mockLogger;\n  let realTimeouts;\n\n  beforeEach(() => {\n    jest.useFakeTimers();\n\n    // Store real timeout functions for specific tests\n    realTimeouts = {\n      setTimeout: global.setTimeout,\n      clearTimeout: global.clearTimeout,\n    };\n\n    mockYoutubeService = {\n      getChannelDetails: jest.fn(),\n      getVideoDetails: jest.fn(),\n      getChannelVideos: jest.fn(),\n    };\n\n    mockHttpService = {\n      post: jest.fn(),\n      isSuccessResponse: jest.fn().mockReturnValue(true),\n    };\n\n    mockContentClassifier = {\n      classifyYouTubeContent: jest.fn().mockReturnValue({\n        type: 'video',\n        details: {},\n      }),\n    };\n\n    mockContentAnnouncer = {\n      announceContent: jest.fn().mockResolvedValue({ success: true }),\n    };\n\n    mockConfig = {\n      getRequired: jest.fn().mockImplementation(key => {\n        const values = {\n          YOUTUBE_CHANNEL_ID: 'UCTestChannel',\n          YOUTUBE_API_KEY: 'test-api-key',\n          PSH_CALLBACK_URL: 'https://example.com/webhook',\n        };\n        return values[key];\n      }),\n      get: jest.fn().mockReturnValue('test-secret'),\n      getNumber: jest.fn().mockReturnValue(300000),\n      getBoolean: jest.fn().mockReturnValue(false),\n    };\n\n    mockStateManager = {\n      get: jest.fn().mockReturnValue(new Date('2023-01-01T00:00:00Z')),\n    };\n\n    mockEventBus = {\n      emit: jest.fn(),\n    };\n\n    mockLogger = {\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      debug: jest.fn(),\n    };\n\n    const dependencies = {\n      youtubeService: mockYoutubeService,\n      httpService: mockHttpService,\n      contentClassifier: mockContentClassifier,\n      contentAnnouncer: mockContentAnnouncer,\n      config: mockConfig,\n      stateManager: mockStateManager,\n      eventBus: mockEventBus,\n      logger: mockLogger,\n    };\n\n    monitorApp = new MonitorApplication(dependencies);\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n    jest.clearAllMocks();\n  });\n\n  describe('Error-Triggered Fallback Integration', () => {\n    it('should trigger fallback when webhook processing fails due to XML parsing error', async () => {\n      // Setup\n      jest\n        .spyOn(monitorApp, 'verifyWebhookSignatureDebug')\n        .mockReturnValue({ isValid: true, details: { method: 'sha1' } });\n      jest.spyOn(monitorApp, 'parseNotificationXML').mockReturnValue(null);\n      jest.spyOn(monitorApp, 'performApiFallback').mockResolvedValue();\n\n      const request = {\n        body: '<xml>malformed</xml>',\n        headers: { 'x-hub-signature': 'sha1=test' },\n        method: 'POST',\n      };\n\n      // Execute\n      await monitorApp.handleWebhook(request);\n\n      // Verify no fallback scheduled for XML parsing failures (these don't trigger fallback)\n      expect(monitorApp.fallbackTimerId).toBeNull();\n      expect(monitorApp.performApiFallback).not.toHaveBeenCalled();\n    });\n\n    it('should trigger fallback when webhook processing fails due to video details API error', async () => {\n      // Setup\n      jest\n        .spyOn(monitorApp, 'verifyWebhookSignatureDebug')\n        .mockReturnValue({ isValid: true, details: { method: 'sha1' } });\n      jest.spyOn(monitorApp, 'parseNotificationXML').mockReturnValue({ videoId: 'test123' });\n      jest.spyOn(monitorApp, 'performApiFallback').mockResolvedValue();\n      mockYoutubeService.getVideoDetails.mockRejectedValue(new Error('API Error'));\n\n      const request = {\n        body: '<xml>valid</xml>',\n        headers: { 'x-hub-signature': 'sha1=test' },\n        method: 'POST',\n      };\n\n      // Execute\n      await monitorApp.handleWebhook(request);\n\n      // Verify fallback was scheduled\n      expect(monitorApp.fallbackTimerId).toBeTruthy();\n      expect(mockLogger.warn).toHaveBeenCalledWith('Scheduling API fallback due to notification processing failure');\n\n      // Fast forward timer to trigger fallback\n      jest.advanceTimersByTime(30000);\n\n      expect(monitorApp.performApiFallback).toHaveBeenCalled();\n    });\n\n    it('should trigger fallback when webhook processing fails due to video processing error', async () => {\n      // Setup\n      jest\n        .spyOn(monitorApp, 'verifyWebhookSignatureDebug')\n        .mockReturnValue({ isValid: true, details: { method: 'sha1' } });\n      jest.spyOn(monitorApp, 'parseNotificationXML').mockReturnValue({ videoId: 'test123' });\n      jest.spyOn(monitorApp, 'processVideo').mockRejectedValue(new Error('Processing Error'));\n      jest.spyOn(monitorApp, 'performApiFallback').mockResolvedValue();\n      mockYoutubeService.getVideoDetails.mockResolvedValue({\n        id: 'test123',\n        snippet: { title: 'Test Video' },\n      });\n\n      const request = {\n        body: '<xml>valid</xml>',\n        headers: { 'x-hub-signature': 'sha1=test' },\n        method: 'POST',\n      };\n\n      // Execute\n      await monitorApp.handleWebhook(request);\n\n      // Verify fallback was scheduled\n      expect(monitorApp.fallbackTimerId).toBeTruthy();\n\n      // Fast forward timer to trigger fallback\n      jest.advanceTimersByTime(30000);\n\n      expect(monitorApp.performApiFallback).toHaveBeenCalled();\n    });\n\n    it('should NOT trigger fallback when webhook processing succeeds completely', async () => {\n      // Setup\n      jest\n        .spyOn(monitorApp, 'verifyWebhookSignatureDebug')\n        .mockReturnValue({ isValid: true, details: { method: 'sha1' } });\n      jest.spyOn(monitorApp, 'parseNotificationXML').mockReturnValue({ videoId: 'test123' });\n      jest.spyOn(monitorApp, 'processVideo').mockResolvedValue();\n      jest.spyOn(monitorApp, 'performApiFallback').mockResolvedValue();\n      mockYoutubeService.getVideoDetails.mockResolvedValue({\n        id: 'test123',\n        snippet: { title: 'Test Video' },\n      });\n\n      const request = {\n        body: '<xml>valid</xml>',\n        headers: { 'x-hub-signature': 'sha1=test' },\n        method: 'POST',\n      };\n\n      // Execute\n      await monitorApp.handleWebhook(request);\n\n      // Verify no fallback was scheduled\n      expect(monitorApp.fallbackTimerId).toBeNull();\n      expect(monitorApp.performApiFallback).not.toHaveBeenCalled();\n    });\n\n    it('should handle multiple notification errors with only one fallback scheduled', async () => {\n      // Setup\n      jest\n        .spyOn(monitorApp, 'verifyWebhookSignatureDebug')\n        .mockReturnValue({ isValid: true, details: { method: 'sha1' } });\n      jest.spyOn(monitorApp, 'parseNotificationXML').mockReturnValue({ videoId: 'test123' });\n      jest.spyOn(monitorApp, 'performApiFallback').mockResolvedValue();\n      mockYoutubeService.getVideoDetails.mockRejectedValue(new Error('API Error'));\n\n      const request = {\n        body: '<xml>valid</xml>',\n        headers: { 'x-hub-signature': 'sha1=test' },\n        method: 'POST',\n      };\n\n      // Execute multiple failing webhooks\n      await monitorApp.handleWebhook(request);\n      await monitorApp.handleWebhook(request);\n      await monitorApp.handleWebhook(request);\n\n      // Verify only one fallback was scheduled\n      expect(monitorApp.fallbackTimerId).toBeTruthy();\n      expect(mockLogger.debug).toHaveBeenCalledWith('API fallback already scheduled, skipping');\n\n      // Fast forward timer to trigger fallback\n      jest.advanceTimersByTime(30000);\n\n      expect(monitorApp.performApiFallback).toHaveBeenCalledTimes(1);\n    });\n\n    it('should complete full fallback workflow when triggered by error', async () => {\n      // Setup\n      const mockVideos = [\n        {\n          id: 'fallback-video-1',\n          snippet: {\n            title: 'Fallback Video 1',\n            publishedAt: '2023-01-02T00:00:00Z',\n            channelTitle: 'Test Channel',\n          },\n        },\n        {\n          id: 'fallback-video-2',\n          snippet: {\n            title: 'Fallback Video 2',\n            publishedAt: '2023-01-03T00:00:00Z',\n            channelTitle: 'Test Channel',\n          },\n        },\n      ];\n\n      jest.spyOn(monitorApp, 'processVideo').mockResolvedValue();\n      mockYoutubeService.getChannelVideos.mockResolvedValue(mockVideos);\n\n      // Execute fallback directly (simulating triggered fallback)\n      await monitorApp.performApiFallback();\n\n      // Verify complete fallback workflow\n      expect(mockYoutubeService.getChannelVideos).toHaveBeenCalledWith('UCTestChannel', 5);\n      expect(monitorApp.processVideo).toHaveBeenCalledWith(mockVideos[0], 'api-fallback');\n      expect(monitorApp.processVideo).toHaveBeenCalledWith(mockVideos[1], 'api-fallback');\n      expect(monitorApp.stats.fallbackPolls).toBe(1);\n      expect(mockLogger.info).toHaveBeenCalledWith('API fallback check completed successfully');\n    });\n\n    it('should handle fallback API errors gracefully', async () => {\n      // Setup\n      mockYoutubeService.getChannelVideos.mockRejectedValue(new Error('Fallback API Error'));\n\n      // Execute fallback directly (simulating triggered fallback)\n      await expect(monitorApp.performApiFallback()).rejects.toThrow('Fallback API Error');\n\n      // Verify fallback error was logged\n      expect(mockLogger.error).toHaveBeenCalledWith('API fallback check failed:', expect.any(Error));\n      expect(monitorApp.stats.fallbackPolls).toBe(1);\n    });\n\n    it('should not start automatic polling during monitor startup', async () => {\n      // Setup\n      jest.spyOn(monitorApp, 'performApiFallback').mockResolvedValue();\n      jest.spyOn(monitorApp, 'subscribeToPubSubHubbub').mockResolvedValue();\n      mockYoutubeService.getChannelDetails.mockResolvedValue({\n        snippet: { title: 'Test Channel' },\n      });\n\n      // Execute startup\n      await monitorApp.start();\n\n      // Verify no automatic polling started\n      expect(monitorApp.fallbackTimerId).toBeNull();\n      expect(monitorApp.performApiFallback).not.toHaveBeenCalled();\n\n      // Fast forward through extended time periods\n      jest.advanceTimersByTime(30 * 60 * 1000); // 30 minutes\n\n      // Verify still no automatic polling\n      expect(monitorApp.performApiFallback).not.toHaveBeenCalled();\n    });\n\n    it('should clear fallback timer on monitor stop', async () => {\n      // Setup\n      jest.spyOn(monitorApp, 'subscribeToPubSubHubbub').mockResolvedValue();\n      jest.spyOn(monitorApp, 'unsubscribeFromPubSubHubbub').mockResolvedValue();\n      mockYoutubeService.getChannelDetails.mockResolvedValue({\n        snippet: { title: 'Test Channel' },\n      });\n\n      // Start monitor and schedule a fallback\n      await monitorApp.start();\n      monitorApp.scheduleApiFallback();\n      expect(monitorApp.fallbackTimerId).toBeTruthy();\n\n      // Stop monitor\n      await monitorApp.stop();\n\n      // Verify fallback timer was cleared\n      expect(monitorApp.fallbackTimerId).toBeNull();\n      expect(mockLogger.info).toHaveBeenCalledWith('Scheduled API fallback cleared');\n    });\n  });\n\n  describe('Fallback Workflow Integration', () => {\n    it('should properly integrate with duplicate detection during fallback', async () => {\n      // Setup\n      const mockVideo = {\n        id: 'duplicate-video',\n        snippet: {\n          title: 'Duplicate Video',\n          publishedAt: '2023-01-02T00:00:00Z',\n          channelTitle: 'Test Channel',\n        },\n      };\n\n      mockYoutubeService.getChannelVideos.mockResolvedValue([mockVideo]);\n\n      // Mock duplicate detection\n      jest.spyOn(monitorApp.duplicateDetector, 'isDuplicate').mockReturnValue(true);\n      jest.spyOn(monitorApp, 'processVideo').mockImplementation(async (video, source) => {\n        // Simulate the real processVideo logic for duplicates\n        if (monitorApp.duplicateDetector.isDuplicate(`https://www.youtube.com/watch?v=${video.id}`)) {\n          mockLogger.debug(`Duplicate video detected: ${video.snippet.title} (${video.id})`);\n          return;\n        }\n        // Normal processing...\n      });\n\n      // Execute fallback\n      await monitorApp.performApiFallback();\n\n      // Verify duplicate was detected and skipped\n      expect(monitorApp.duplicateDetector.isDuplicate).toHaveBeenCalledWith(\n        'https://www.youtube.com/watch?v=duplicate-video'\n      );\n      expect(mockLogger.debug).toHaveBeenCalledWith('Duplicate video detected: Duplicate Video (duplicate-video)');\n      expect(mockContentAnnouncer.announceContent).not.toHaveBeenCalled();\n    });\n\n    it('should properly integrate with content classification during fallback', async () => {\n      // Setup\n      const mockVideo = {\n        id: 'classified-video',\n        snippet: {\n          title: 'Test Video',\n          publishedAt: '2023-01-02T00:00:00Z',\n          channelTitle: 'Test Channel',\n        },\n      };\n\n      mockYoutubeService.getChannelVideos.mockResolvedValue([mockVideo]);\n      mockContentClassifier.classifyYouTubeContent.mockReturnValue({\n        type: 'livestream',\n        details: { isLive: true },\n      });\n\n      // Execute fallback\n      await monitorApp.performApiFallback();\n\n      // Verify content was classified\n      expect(mockContentClassifier.classifyYouTubeContent).toHaveBeenCalledWith(mockVideo);\n      expect(mockContentAnnouncer.announceContent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          platform: 'youtube',\n          type: 'livestream',\n          id: 'classified-video',\n          isLive: true,\n        })\n      );\n    });\n\n    it('should emit proper events during fallback workflow', async () => {\n      // Setup\n      const mockVideo = {\n        id: 'event-video',\n        snippet: {\n          title: 'Event Video',\n          publishedAt: '2023-01-02T00:00:00Z',\n          channelTitle: 'Test Channel',\n        },\n      };\n\n      mockYoutubeService.getChannelVideos.mockResolvedValue([mockVideo]);\n\n      // Execute fallback\n      await monitorApp.performApiFallback();\n\n      // Verify video processed event was emitted\n      expect(mockEventBus.emit).toHaveBeenCalledWith(\n        'monitor.video.processed',\n        expect.objectContaining({\n          video: expect.objectContaining({\n            id: 'event-video',\n            platform: 'youtube',\n          }),\n          source: 'api-fallback',\n          timestamp: expect.any(Date),\n        })\n      );\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}