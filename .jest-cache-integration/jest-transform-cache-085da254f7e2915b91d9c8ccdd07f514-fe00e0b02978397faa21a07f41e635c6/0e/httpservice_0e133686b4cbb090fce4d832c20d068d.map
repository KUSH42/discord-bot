{"version":3,"names":["HttpService","get","url","Error","post","data","put","delete","patch","head","request","method","downloadFile","destination","uploadFile","file","setDefaultHeaders","setTimeout","setBaseUrl","addRequestInterceptor","addResponseInterceptor","createInstance","validateUrl","URL","buildQueryString","params","searchParams","URLSearchParams","key","value","Object","entries","undefined","Array","isArray","forEach","v","append","toString","joinUrlPath","segments","filter","segment","map","replace","join","isSuccessResponse","response","status","isClientError","isServerError","getContentType","headers","contentType","split","trim","isJsonResponse","dispose"],"sources":["http-service.js"],"sourcesContent":["/**\n * Abstract HTTP service interface\n * Defines the contract for HTTP operations that can be mocked in tests\n */\nexport class HttpService {\n  /**\n   * Make a GET request\n   * @param {string} url - Request URL\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async get(url) {\n    throw new Error('Abstract method: get must be implemented');\n  }\n\n  /**\n   * Make a POST request\n   * @param {string} url - Request URL\n   * @param {*} data - Request body data\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async post(url, data = null) {\n    throw new Error('Abstract method: post must be implemented');\n  }\n\n  /**\n   * Make a PUT request\n   * @param {string} url - Request URL\n   * @param {*} data - Request body data\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async put(url, data = null) {\n    throw new Error('Abstract method: put must be implemented');\n  }\n\n  /**\n   * Make a DELETE request\n   * @param {string} url - Request URL\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async delete(url) {\n    throw new Error('Abstract method: delete must be implemented');\n  }\n\n  /**\n   * Make a PATCH request\n   * @param {string} url - Request URL\n   * @param {*} data - Request body data\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async patch(url, data = null) {\n    throw new Error('Abstract method: patch must be implemented');\n  }\n\n  /**\n   * Make a HEAD request\n   * @param {string} url - Request URL\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async head(url) {\n    throw new Error('Abstract method: head must be implemented');\n  }\n\n  /**\n   * Make a generic HTTP request\n   * @param {string} method - HTTP method\n   * @param {string} url - Request URL\n   * @param {*} data - Request body data\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async request(method, url, data = null) {\n    throw new Error('Abstract method: request must be implemented');\n  }\n\n  /**\n   * Download a file\n   * @param {string} url - File URL\n   * @param {string} destination - Local destination path\n   * @param {Object} options - Download options\n   * @returns {Promise<string>} Path to downloaded file\n   */\n  // eslint-disable-next-line no-unused-vars\n  async downloadFile(url, destination) {\n    throw new Error('Abstract method: downloadFile must be implemented');\n  }\n\n  /**\n   * Upload a file\n   * @param {string} url - Upload URL\n   * @param {string|Buffer} file - File path or buffer\n   * @param {Object} options - Upload options\n   * @returns {Promise<Object>} Response object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async uploadFile(url, file) {\n    throw new Error('Abstract method: uploadFile must be implemented');\n  }\n\n  /**\n   * Set default headers for all requests\n   * @param {Object} headers - Default headers\n   */\n  setDefaultHeaders() {\n    throw new Error('Abstract method: setDefaultHeaders must be implemented');\n  }\n\n  /**\n   * Set default timeout for all requests\n   * @param {number} timeout - Timeout in milliseconds\n   */\n  setTimeout() {\n    throw new Error('Abstract method: setTimeout must be implemented');\n  }\n\n  /**\n   * Set base URL for relative requests\n   * @param {string} baseUrl - Base URL\n   */\n  setBaseUrl() {\n    throw new Error('Abstract method: setBaseUrl must be implemented');\n  }\n\n  /**\n   * Add request interceptor\n   * @param {Function} interceptor - Request interceptor function\n   * @returns {Function} Remove interceptor function\n   */\n  addRequestInterceptor() {\n    throw new Error('Abstract method: addRequestInterceptor must be implemented');\n  }\n\n  /**\n   * Add response interceptor\n   * @param {Function} interceptor - Response interceptor function\n   * @returns {Function} Remove interceptor function\n   */\n  addResponseInterceptor() {\n    throw new Error('Abstract method: addResponseInterceptor must be implemented');\n  }\n\n  /**\n   * Create a new HTTP client instance with custom configuration\n   * @param {Object} config - Client configuration\n   * @returns {HttpService} New HTTP service instance\n   */\n  createInstance() {\n    throw new Error('Abstract method: createInstance must be implemented');\n  }\n\n  /**\n   * Validate URL format\n   * @param {string} url - URL to validate\n   * @returns {boolean} True if valid URL\n   */\n  validateUrl(url) {\n    if (typeof url !== 'string') {\n      return false;\n    }\n\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Build query string from object\n   * @param {Object} params - Query parameters\n   * @returns {string} Query string\n   */\n  buildQueryString(params) {\n    if (!params || typeof params !== 'object') {\n      return '';\n    }\n\n    const searchParams = new URLSearchParams();\n\n    for (const [key, value] of Object.entries(params)) {\n      if (value !== null && value !== undefined) {\n        if (Array.isArray(value)) {\n          value.forEach((v) => searchParams.append(key, v));\n        } else {\n          searchParams.append(key, value);\n        }\n      }\n    }\n\n    return searchParams.toString();\n  }\n\n  /**\n   * Join URL path segments\n   * @param {...string} segments - Path segments\n   * @returns {string} Joined path\n   */\n  joinUrlPath(...segments) {\n    return segments\n      .filter((segment) => segment)\n      .map((segment) => segment.toString().replace(/^\\/+|\\/+$/g, ''))\n      .join('/');\n  }\n\n  /**\n   * Check if response indicates success\n   * @param {Object} response - Response object\n   * @returns {boolean} True if successful response\n   */\n  isSuccessResponse(response) {\n    return response && response.status >= 200 && response.status < 300;\n  }\n\n  /**\n   * Check if response indicates client error\n   * @param {Object} response - Response object\n   * @returns {boolean} True if client error response\n   */\n  isClientError(response) {\n    return response && response.status >= 400 && response.status < 500;\n  }\n\n  /**\n   * Check if response indicates server error\n   * @param {Object} response - Response object\n   * @returns {boolean} True if server error response\n   */\n  isServerError(response) {\n    return response && response.status >= 500 && response.status < 600;\n  }\n\n  /**\n   * Get content type from response\n   * @param {Object} response - Response object\n   * @returns {string|null} Content type or null\n   */\n  getContentType(response) {\n    if (!response || !response.headers) {\n      return null;\n    }\n\n    const contentType = response.headers['content-type'] || response.headers['Content-Type'];\n    return contentType ? contentType.split(';')[0].trim() : null;\n  }\n\n  /**\n   * Check if response is JSON\n   * @param {Object} response - Response object\n   * @returns {boolean} True if JSON response\n   */\n  isJsonResponse(response) {\n    const contentType = this.getContentType(response);\n    return contentType === 'application/json';\n  }\n\n  /**\n   * Dispose of resources\n   * @returns {Promise<void>}\n   */\n  async dispose() {\n    // No resources to dispose by default\n  }\n}\n"],"mappings":"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","ignoreList":[]}