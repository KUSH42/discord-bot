{"version":3,"names":["cov_2k731dkomu","actualCoverage","google","YouTubeService","YouTubeApiService","constructor","logger","youtube","f","s","b","version","auth","process","env","YOUTUBE_API_KEY","getVideoDetails","videoId","validateVideoId","Error","response","videos","list","part","id","data","items","error","message","getChannelDetails","channelId","validateChannelId","channels","getChannelVideos","maxResults","channelResponse","uploadPlaylistId","contentDetails","relatedPlaylists","uploads","playlistResponse","playlistItems","playlistId","Math","min","videoIds","map","item","snippet","resourceId","length","videosResponse","join","searchVideos","query","options","searchParams","q","type","order","publishedAfter","search","getVideoStatistics","_response$data$items$","statistics","getPlaylistDetails","playlists","getPlaylistVideos","isVideoLive","video","liveBroadcastContent","getLiveStreamDetails","liveStreamingDetails","getVideoComments","commentThreads","getChannelUploadPlaylist","channel","getQuotaUsage","used","remaining","resetTime","validateApiKey","mine","includes"],"sources":["youtube-api-service.js"],"sourcesContent":["import { google } from 'googleapis';\nimport { YouTubeService } from '../interfaces/youtube-service.js';\n\n/**\n * YouTube Data API implementation of YouTubeService\n */\nexport class YouTubeApiService extends YouTubeService {\n  constructor({ logger, youtube }) {\n    super();\n    this.logger = logger;\n    this.youtube =\n      youtube ||\n      google.youtube({\n        version: 'v3',\n        auth: process.env.YOUTUBE_API_KEY,\n      });\n  }\n\n  /**\n   * Get video details by ID\n   */\n  async getVideoDetails(videoId) {\n    if (!this.validateVideoId(videoId)) {\n      throw new Error(`Invalid video ID: ${videoId}`);\n    }\n\n    try {\n      const response = await this.youtube.videos.list({\n        part: 'snippet,contentDetails,liveStreamingDetails,statistics',\n        id: videoId,\n      });\n\n      return response.data.items[0] || null;\n    } catch (error) {\n      throw new Error(`Failed to fetch video details for ${videoId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get channel details by ID\n   */\n  async getChannelDetails(channelId) {\n    if (!this.validateChannelId(channelId)) {\n      throw new Error(`Invalid channel ID: ${channelId}`);\n    }\n\n    try {\n      const response = await this.youtube.channels.list({\n        part: 'snippet,contentDetails,statistics',\n        id: channelId,\n      });\n\n      return response.data.items[0] || null;\n    } catch (error) {\n      throw new Error(`Failed to fetch channel details for ${channelId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get latest videos from a channel\n   */\n  async getChannelVideos(channelId, maxResults = 10) {\n    if (!this.validateChannelId(channelId)) {\n      throw new Error(`Invalid channel ID: ${channelId}`);\n    }\n\n    try {\n      // First get the upload playlist ID\n      const channelResponse = await this.youtube.channels.list({\n        part: 'contentDetails',\n        id: channelId,\n      });\n\n      if (!channelResponse.data.items[0]) {\n        throw new Error(`Channel ${channelId} not found`);\n      }\n\n      const uploadPlaylistId = channelResponse.data.items[0].contentDetails.relatedPlaylists.uploads;\n\n      // Then get videos from the upload playlist\n      const playlistResponse = await this.youtube.playlistItems.list({\n        part: 'snippet',\n        playlistId: uploadPlaylistId,\n        maxResults: Math.min(maxResults, 50),\n      });\n\n      // Get detailed info for each video\n      const videoIds = playlistResponse.data.items.map((item) => item.snippet.resourceId.videoId);\n\n      if (videoIds.length === 0) {\n        return [];\n      }\n\n      const videosResponse = await this.youtube.videos.list({\n        part: 'snippet,contentDetails,liveStreamingDetails,statistics',\n        id: videoIds.join(','),\n      });\n\n      return videosResponse.data.items;\n    } catch (error) {\n      throw new Error(`Failed to fetch channel videos for ${channelId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Search for videos\n   */\n  async searchVideos(query, options = {}) {\n    try {\n      const searchParams = {\n        part: 'snippet',\n        q: query,\n        type: 'video',\n        maxResults: options.maxResults || 10,\n        order: options.order || 'relevance',\n      };\n\n      if (options.channelId) {\n        searchParams.channelId = options.channelId;\n      }\n\n      if (options.publishedAfter) {\n        searchParams.publishedAfter = options.publishedAfter;\n      }\n\n      const response = await this.youtube.search.list(searchParams);\n      return response.data.items;\n    } catch (error) {\n      throw new Error(`Failed to search videos: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get video statistics\n   */\n  async getVideoStatistics(videoId) {\n    if (!this.validateVideoId(videoId)) {\n      throw new Error(`Invalid video ID: ${videoId}`);\n    }\n\n    try {\n      const response = await this.youtube.videos.list({\n        part: 'statistics',\n        id: videoId,\n      });\n\n      return response.data.items[0]?.statistics || null;\n    } catch (error) {\n      throw new Error(`Failed to fetch video statistics for ${videoId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get playlist details\n   */\n  async getPlaylistDetails(playlistId) {\n    try {\n      const response = await this.youtube.playlists.list({\n        part: 'snippet,contentDetails',\n        id: playlistId,\n      });\n\n      return response.data.items[0] || null;\n    } catch (error) {\n      throw new Error(`Failed to fetch playlist details for ${playlistId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get videos from a playlist\n   */\n  async getPlaylistVideos(playlistId, maxResults = 50) {\n    try {\n      const response = await this.youtube.playlistItems.list({\n        part: 'snippet',\n        playlistId,\n        maxResults: Math.min(maxResults, 50),\n      });\n\n      return response.data.items;\n    } catch (error) {\n      throw new Error(`Failed to fetch playlist videos for ${playlistId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Check if a video is live\n   */\n  async isVideoLive(videoId) {\n    try {\n      const video = await this.getVideoDetails(videoId);\n      if (!video) {\n        return false;\n      }\n\n      return video.snippet.liveBroadcastContent === 'live';\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get live streaming details\n   */\n  async getLiveStreamDetails(videoId) {\n    try {\n      const video = await this.getVideoDetails(videoId);\n      if (!video || !video.liveStreamingDetails) {\n        return null;\n      }\n\n      return video.liveStreamingDetails;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Get video comments\n   */\n  async getVideoComments(videoId, maxResults = 20) {\n    if (!this.validateVideoId(videoId)) {\n      throw new Error(`Invalid video ID: ${videoId}`);\n    }\n\n    try {\n      const response = await this.youtube.commentThreads.list({\n        part: 'snippet',\n        videoId,\n        maxResults: Math.min(maxResults, 100),\n        order: 'time',\n      });\n\n      return response.data.items;\n    } catch (error) {\n      throw new Error(`Failed to fetch comments for ${videoId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get channel's upload playlist ID\n   */\n  async getChannelUploadPlaylist(channelId) {\n    if (!this.validateChannelId(channelId)) {\n      throw new Error(`Invalid channel ID: ${channelId}`);\n    }\n\n    try {\n      const response = await this.youtube.channels.list({\n        part: 'contentDetails',\n        id: channelId,\n      });\n\n      const channel = response.data.items[0];\n      if (!channel) {\n        throw new Error(`Channel ${channelId} not found`);\n      }\n\n      return channel.contentDetails.relatedPlaylists.uploads;\n    } catch (error) {\n      throw new Error(`Failed to get upload playlist for ${channelId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get API quota usage information\n   */\n  async getQuotaUsage() {\n    // YouTube API doesn't provide direct quota usage info\n    // This would need to be tracked externally\n    return {\n      used: 'unknown',\n      remaining: 'unknown',\n      resetTime: 'daily',\n    };\n  }\n\n  /**\n   * Check if API key is valid\n   */\n  async validateApiKey() {\n    try {\n      // Try a simple API call to validate the key\n      await this.youtube.channels.list({\n        part: 'id',\n        mine: false,\n        id: 'UC_x5XG1OV2P6uZZ5FSM9Ttw', // Google Developers channel\n      });\n      return true;\n    } catch (error) {\n      if (error.message.includes('API key')) {\n        return false;\n      }\n      // Other errors might be network issues, so assume key is valid\n      return true;\n    }\n  }\n}\n"],"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","ignoreList":[]}