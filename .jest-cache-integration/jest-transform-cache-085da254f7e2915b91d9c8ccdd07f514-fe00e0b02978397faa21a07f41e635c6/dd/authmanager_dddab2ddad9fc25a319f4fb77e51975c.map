{"version":3,"names":["cov_2cen1hf2bl","actualCoverage","AuthManager","constructor","dependencies","f","s","browser","browserService","config","state","stateManager","logger","twitterUsername","getRequired","twitterPassword","ensureAuthenticated","info","savedCookies","get","b","validateCookieFormat","setCookies","goto","waitUntil","isAuthenticated","warn","delete","deleteError","error","loginToX","Error","waitForSelector","timeout","type","clickNextButton","Promise","resolve","setTimeout","clickLoginButton","waitForNavigation","saveAuthenticationState","nextButtonSelector","click","loginButtonSelector","cookies","getCookies","set","page","currentUrl","url","includes","Array","isArray","length","every","c","name","value"],"sources":["auth-manager.js"],"sourcesContent":["/**\n * Manages authentication for the scraper, handling cookies and login flows.\n */\nexport class AuthManager {\n  constructor(dependencies) {\n    this.browser = dependencies.browserService;\n    this.config = dependencies.config;\n    this.state = dependencies.stateManager;\n    this.logger = dependencies.logger;\n    this.twitterUsername = this.config.getRequired('TWITTER_USERNAME');\n    this.twitterPassword = this.config.getRequired('TWITTER_PASSWORD');\n  }\n\n  /**\n   * Ensures the user is authenticated, using cookies if available, otherwise performing a full login.\n   * @returns {Promise<void>}\n   */\n  async ensureAuthenticated() {\n    try {\n      this.logger.info('Ensuring authentication...');\n      const savedCookies = this.state.get('x_session_cookies');\n\n      if (savedCookies && this.validateCookieFormat(savedCookies)) {\n        this.logger.info('Attempting to use saved session cookies');\n        try {\n          await this.browser.setCookies(savedCookies);\n          await this.browser.goto('https://x.com/home', { waitUntil: 'domcontentloaded' });\n\n          if (await this.isAuthenticated()) {\n            this.logger.info('✅ Successfully authenticated using saved cookies.');\n            return;\n          } else {\n            this.logger.warn('Saved cookies failed, attempting login');\n            try {\n              this.state.delete('x_session_cookies');\n              this.logger.warn('Clearing expired session cookies');\n            } catch (deleteError) {\n              this.logger.error('Failed to delete session cookies from state:', deleteError);\n            }\n            await this.loginToX();\n          }\n        } catch (error) {\n          this.logger.error('Error validating saved cookies, falling back to login:', error);\n          await this.loginToX();\n        }\n      } else if (savedCookies) {\n        this.logger.warn('Invalid saved cookies format, performing login');\n        try {\n          this.state.delete('x_session_cookies');\n        } catch (deleteError) {\n          this.logger.error('Failed to delete session cookies from state:', deleteError);\n        }\n        await this.loginToX();\n      } else {\n        this.logger.info('No saved cookies found, performing login');\n        await this.loginToX();\n      }\n    } catch (error) {\n      this.logger.error('Authentication process failed:', error);\n      throw new Error('Authentication failed');\n    }\n  }\n\n  /**\n   * Performs the full login flow using credentials.\n   * @returns {Promise<boolean>} True if login is successful.\n   */\n  async loginToX() {\n    this.logger.info('Using credential-based authentication...');\n    await this.browser.goto('https://x.com/i/flow/login');\n\n    // Step 1: Enter username\n    this.logger.info('Entering username...');\n    await this.browser.waitForSelector('input[name=\"text\"]', { timeout: 10000 });\n    await this.browser.type('input[name=\"text\"]', this.twitterUsername);\n    await this.clickNextButton();\n    await new Promise(resolve => setTimeout(resolve, 4000));\n\n    // Step 2: Enter password\n    this.logger.info('Entering password...');\n    await this.browser.waitForSelector('input[name=\"password\"]', { timeout: 10000 });\n    await this.browser.type('input[name=\"password\"]', this.twitterPassword);\n    await this.clickLoginButton();\n    await this.browser.waitForNavigation({ timeout: 15000 });\n\n    if (await this.isAuthenticated()) {\n      this.logger.info('✅ Login successful, a new session has been established.');\n      await this.saveAuthenticationState();\n      return true;\n    } else {\n      this.logger.error('Credential-based login failed.');\n      throw new Error('Authentication failed');\n    }\n  }\n\n  /**\n   * Clicks the \"Next\" button during the login flow.\n   * @returns {Promise<void>}\n   */\n  async clickNextButton() {\n    const nextButtonSelector = 'button:has-text(\"Next\")';\n    await this.browser.click(nextButtonSelector);\n  }\n\n  /**\n   * Clicks the \"Log in\" button during the login flow.\n   * @returns {Promise<void>}\n   */\n  async clickLoginButton() {\n    const loginButtonSelector = 'button[data-testid=\"LoginForm_Login_Button\"]';\n    await this.browser.click(loginButtonSelector);\n  }\n\n  /**\n   * Saves the current session cookies to the state manager.\n   * @returns {Promise<void>}\n   */\n  async saveAuthenticationState() {\n    try {\n      this.logger.info('Saving session cookies to state...');\n      const cookies = await this.browser.getCookies();\n      if (this.validateCookieFormat(cookies)) {\n        this.state.set('x_session_cookies', cookies);\n        this.logger.info('Saved session cookies to state');\n      } else {\n        this.logger.warn('Could not find any valid cookies to save.');\n      }\n    } catch (error) {\n      this.logger.error('Error saving session cookies:', error);\n    }\n  }\n\n  /**\n   * Checks if the current session is authenticated by verifying the URL.\n   * @returns {Promise<boolean>}\n   */\n  async isAuthenticated() {\n    if (!this.browser || !this.browser.page) {\n      throw new Error('Browser service is not available.');\n    }\n    try {\n      const currentUrl = await this.browser.page.url();\n      return currentUrl.includes('/home');\n    } catch (error) {\n      this.logger.warn('Could not determine authentication status from URL:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Validates the format of the cookies.\n   * @param {any} cookies - The cookies to validate.\n   * @returns {boolean} - True if the format is valid, false otherwise.\n   */\n  validateCookieFormat(cookies) {\n    if (!Array.isArray(cookies) || cookies.length === 0) {\n      return false;\n    }\n    return cookies.every(c => c && typeof c.name === 'string' && typeof c.value === 'string');\n  }\n}\n"],"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","ignoreList":[]}