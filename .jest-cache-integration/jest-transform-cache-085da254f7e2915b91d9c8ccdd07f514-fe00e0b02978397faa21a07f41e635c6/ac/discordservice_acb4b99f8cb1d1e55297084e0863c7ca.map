{"version":3,"names":["DiscordService","login","token","Error","sendMessage","channelId","content","fetchChannel","fetchGuild","guildId","onMessage","handler","onReady","onError","getCurrentUser","isReady","getLatency","destroy","editMessage","messageId","newContent","deleteMessage","addReaction","emoji","getGuildMember","userId","hasPermission","permission","setPresence","presence","dispose"],"sources":["discord-service.js"],"sourcesContent":["/**\n * Abstract Discord service interface\n * Defines the contract for Discord operations that can be mocked in tests\n */\nexport class DiscordService {\n  /**\n   * Login to Discord with bot token\n   * @param {string} token - Discord bot token\n   * @returns {Promise<void>}\n   */\n  async login(token) {\n    throw new Error('Abstract method: login must be implemented');\n  }\n\n  /**\n   * Send a message to a Discord channel\n   * @param {string} channelId - Discord channel ID\n   * @param {string|Object} content - Message content (string or embed object)\n   * @returns {Promise<Object>} Message object\n   */\n  async sendMessage(channelId, content) {\n    throw new Error('Abstract method: sendMessage must be implemented');\n  }\n\n  /**\n   * Fetch a Discord channel\n   * @param {string} channelId - Discord channel ID\n   * @returns {Promise<Object>} Channel object\n   */\n  async fetchChannel(channelId) {\n    throw new Error('Abstract method: fetchChannel must be implemented');\n  }\n\n  /**\n   * Fetch a Discord guild\n   * @param {string} guildId - Discord guild ID\n   * @returns {Promise<Object>} Guild object\n   */\n  async fetchGuild(guildId) {\n    throw new Error('Abstract method: fetchGuild must be implemented');\n  }\n\n  /**\n   * Register a message event handler\n   * @param {Function} handler - Message handler function\n   * @returns {Function} Unregister function\n   */\n  onMessage(handler) {\n    throw new Error('Abstract method: onMessage must be implemented');\n  }\n\n  /**\n   * Register a ready event handler\n   * @param {Function} handler - Ready handler function\n   * @returns {Function} Unregister function\n   */\n  onReady(handler) {\n    throw new Error('Abstract method: onReady must be implemented');\n  }\n\n  /**\n   * Register an error event handler\n   * @param {Function} handler - Error handler function\n   * @returns {Function} Unregister function\n   */\n  onError(handler) {\n    throw new Error('Abstract method: onError must be implemented');\n  }\n\n  /**\n   * Get current user information\n   * @returns {Promise<Object>} User object\n   */\n  async getCurrentUser() {\n    throw new Error('Abstract method: getCurrentUser must be implemented');\n  }\n\n  /**\n   * Check if the bot is logged in and ready\n   * @returns {boolean} True if ready\n   */\n  isReady() {\n    throw new Error('Abstract method: isReady must be implemented');\n  }\n\n  /**\n   * Get bot latency/ping\n   * @returns {number} Latency in milliseconds\n   */\n  getLatency() {\n    throw new Error('Abstract method: getLatency must be implemented');\n  }\n\n  /**\n   * Destroy the Discord client connection\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    throw new Error('Abstract method: destroy must be implemented');\n  }\n\n  /**\n   * Edit a message\n   * @param {string} channelId - Discord channel ID\n   * @param {string} messageId - Message ID to edit\n   * @param {string|Object} newContent - New message content\n   * @returns {Promise<Object>} Updated message object\n   */\n  async editMessage(channelId, messageId, newContent) {\n    throw new Error('Abstract method: editMessage must be implemented');\n  }\n\n  /**\n   * Delete a message\n   * @param {string} channelId - Discord channel ID\n   * @param {string} messageId - Message ID to delete\n   * @returns {Promise<void>}\n   */\n  async deleteMessage(channelId, messageId) {\n    throw new Error('Abstract method: deleteMessage must be implemented');\n  }\n\n  /**\n   * Add a reaction to a message\n   * @param {string} channelId - Discord channel ID\n   * @param {string} messageId - Message ID\n   * @param {string} emoji - Emoji to add\n   * @returns {Promise<void>}\n   */\n  async addReaction(channelId, messageId, emoji) {\n    throw new Error('Abstract method: addReaction must be implemented');\n  }\n\n  /**\n   * Get user from guild\n   * @param {string} guildId - Guild ID\n   * @param {string} userId - User ID\n   * @returns {Promise<Object>} Guild member object\n   */\n  async getGuildMember(guildId, userId) {\n    throw new Error('Abstract method: getGuildMember must be implemented');\n  }\n\n  /**\n   * Check if user has permission in channel\n   * @param {string} channelId - Channel ID\n   * @param {string} userId - User ID\n   * @param {string} permission - Permission to check\n   * @returns {Promise<boolean>} True if user has permission\n   */\n  async hasPermission(channelId, userId, permission) {\n    throw new Error('Abstract method: hasPermission must be implemented');\n  }\n\n  /**\n   * Set bot presence/status\n   * @param {Object} presence - Presence object\n   * @returns {Promise<void>}\n   */\n  async setPresence(presence) {\n    throw new Error('Abstract method: setPresence must be implemented');\n  }\n\n  /**\n   * Dispose of resources\n   * @returns {Promise<void>}\n   */\n  async dispose() {\n    await this.destroy();\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,CAAC;EAC1B;AACF;AACA;AACA;AACA;EACE,MAAMC,KAAKA,CAACC,KAAK,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,WAAWA,CAACC,SAAS,EAAEC,OAAO,EAAE;IACpC,MAAM,IAAIH,KAAK,CAAC,kDAAkD,CAAC;EACrE;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMI,YAAYA,CAACF,SAAS,EAAE;IAC5B,MAAM,IAAIF,KAAK,CAAC,mDAAmD,CAAC;EACtE;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMK,UAAUA,CAACC,OAAO,EAAE;IACxB,MAAM,IAAIN,KAAK,CAAC,iDAAiD,CAAC;EACpE;;EAEA;AACF;AACA;AACA;AACA;EACEO,SAASA,CAACC,OAAO,EAAE;IACjB,MAAM,IAAIR,KAAK,CAAC,gDAAgD,CAAC;EACnE;;EAEA;AACF;AACA;AACA;AACA;EACES,OAAOA,CAACD,OAAO,EAAE;IACf,MAAM,IAAIR,KAAK,CAAC,8CAA8C,CAAC;EACjE;;EAEA;AACF;AACA;AACA;AACA;EACEU,OAAOA,CAACF,OAAO,EAAE;IACf,MAAM,IAAIR,KAAK,CAAC,8CAA8C,CAAC;EACjE;;EAEA;AACF;AACA;AACA;EACE,MAAMW,cAAcA,CAAA,EAAG;IACrB,MAAM,IAAIX,KAAK,CAAC,qDAAqD,CAAC;EACxE;;EAEA;AACF;AACA;AACA;EACEY,OAAOA,CAAA,EAAG;IACR,MAAM,IAAIZ,KAAK,CAAC,8CAA8C,CAAC;EACjE;;EAEA;AACF;AACA;AACA;EACEa,UAAUA,CAAA,EAAG;IACX,MAAM,IAAIb,KAAK,CAAC,iDAAiD,CAAC;EACpE;;EAEA;AACF;AACA;AACA;EACE,MAAMc,OAAOA,CAAA,EAAG;IACd,MAAM,IAAId,KAAK,CAAC,8CAA8C,CAAC;EACjE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMe,WAAWA,CAACb,SAAS,EAAEc,SAAS,EAAEC,UAAU,EAAE;IAClD,MAAM,IAAIjB,KAAK,CAAC,kDAAkD,CAAC;EACrE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMkB,aAAaA,CAAChB,SAAS,EAAEc,SAAS,EAAE;IACxC,MAAM,IAAIhB,KAAK,CAAC,oDAAoD,CAAC;EACvE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmB,WAAWA,CAACjB,SAAS,EAAEc,SAAS,EAAEI,KAAK,EAAE;IAC7C,MAAM,IAAIpB,KAAK,CAAC,kDAAkD,CAAC;EACrE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMqB,cAAcA,CAACf,OAAO,EAAEgB,MAAM,EAAE;IACpC,MAAM,IAAItB,KAAK,CAAC,qDAAqD,CAAC;EACxE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMuB,aAAaA,CAACrB,SAAS,EAAEoB,MAAM,EAAEE,UAAU,EAAE;IACjD,MAAM,IAAIxB,KAAK,CAAC,oDAAoD,CAAC;EACvE;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMyB,WAAWA,CAACC,QAAQ,EAAE;IAC1B,MAAM,IAAI1B,KAAK,CAAC,kDAAkD,CAAC;EACrE;;EAEA;AACF;AACA;AACA;EACE,MAAM2B,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACb,OAAO,CAAC,CAAC;EACtB;AACF","ignoreList":[]}