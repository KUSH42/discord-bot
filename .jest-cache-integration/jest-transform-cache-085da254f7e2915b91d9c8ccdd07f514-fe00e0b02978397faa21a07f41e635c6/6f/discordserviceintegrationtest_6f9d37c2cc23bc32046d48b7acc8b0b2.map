{"version":3,"names":["jest","DiscordClientService","describe","discordService","mockClient","mockChannel","mockGuild","beforeEach","send","fn","mockResolvedValue","id","name","guild","isTextBased","mockReturnValue","login","channels","fetch","guilds","on","removeListener","afterEach","clearAllMocks","it","token","expect","toHaveBeenCalledWith","connectionError","Error","mockRejectedValue","rejects","toThrow","result","sendMessage","toHaveBeenCalled","toEqual","sendError","fetchChannel","toBe","fetchError","fetchGuild","mockHandler","onMessage","any","Function","onReady","onError","wrappedHandler","mock","calls","find","call","content","not","messages","results","Promise","all","map","msg","toHaveLength","toHaveBeenCalledTimes","toHaveBeenNthCalledWith","mockResolvedValueOnce","mockRejectedValueOnce","promises","allSettled","status","resolves","longChannelId","repeat","Array","from","length","_","i","handler1","handler2","eventHandlers","toBeDefined"],"sources":["discord-service-integration.test.js"],"sourcesContent":["import { jest } from '@jest/globals';\nimport { DiscordClientService } from '../../src/services/implementations/discord-client-service.js';\n\ndescribe('Discord Service Integration', () => {\n  let discordService;\n  let mockClient;\n  let mockChannel;\n  let mockGuild;\n\n  beforeEach(() => {\n    mockChannel = {\n      send: jest.fn().mockResolvedValue({ id: 'message-123' }),\n      id: 'channel-123',\n      name: 'test-channel',\n      guild: { id: 'guild-123' },\n      isTextBased: jest.fn().mockReturnValue(true),\n    };\n\n    mockGuild = {\n      id: 'guild-123',\n      name: 'Test Guild',\n    };\n\n    mockClient = {\n      login: jest.fn().mockResolvedValue(),\n      channels: {\n        fetch: jest.fn().mockResolvedValue(mockChannel),\n      },\n      guilds: {\n        fetch: jest.fn().mockResolvedValue(mockGuild),\n      },\n      on: jest.fn(),\n      removeListener: jest.fn(),\n    };\n\n    discordService = new DiscordClientService(mockClient);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('login functionality', () => {\n    it('should login successfully', async () => {\n      const token = 'test-token';\n\n      await discordService.login(token);\n\n      expect(mockClient.login).toHaveBeenCalledWith(token);\n    });\n\n    it('should handle login errors gracefully', async () => {\n      const connectionError = new Error('Invalid token');\n      mockClient.login.mockRejectedValue(connectionError);\n\n      await expect(discordService.login('invalid-token')).rejects.toThrow('Invalid token');\n    });\n  });\n\n  describe('message sending', () => {\n    it('should send text message successfully', async () => {\n      const result = await discordService.sendMessage('channel-123', 'Hello, World!');\n\n      expect(mockClient.channels.fetch).toHaveBeenCalledWith('channel-123');\n      expect(mockChannel.isTextBased).toHaveBeenCalled();\n      expect(mockChannel.send).toHaveBeenCalledWith('Hello, World!');\n      expect(result).toEqual({ id: 'message-123' });\n    });\n\n    it('should handle channel fetch errors', async () => {\n      mockClient.channels.fetch.mockRejectedValue(new Error('Channel not found'));\n\n      await expect(discordService.sendMessage('invalid-channel', 'Test')).rejects.toThrow('Channel not found');\n    });\n\n    it('should handle non-text channels', async () => {\n      mockChannel.isTextBased.mockReturnValue(false);\n\n      await expect(discordService.sendMessage('channel-123', 'Test')).rejects.toThrow(\n        'Channel channel-123 is not a valid text channel'\n      );\n    });\n\n    it('should handle null channel response', async () => {\n      mockClient.channels.fetch.mockResolvedValue(null);\n\n      await expect(discordService.sendMessage('channel-123', 'Test')).rejects.toThrow(\n        'Channel channel-123 is not a valid text channel'\n      );\n    });\n\n    it('should handle message send errors', async () => {\n      const sendError = new Error('Missing permissions');\n      mockChannel.send.mockRejectedValue(sendError);\n\n      await expect(discordService.sendMessage('channel-123', 'Test')).rejects.toThrow('Missing permissions');\n    });\n  });\n\n  describe('channel operations', () => {\n    it('should fetch channel successfully', async () => {\n      const result = await discordService.fetchChannel('channel-123');\n\n      expect(mockClient.channels.fetch).toHaveBeenCalledWith('channel-123');\n      expect(result).toBe(mockChannel);\n    });\n\n    it('should handle channel fetch errors', async () => {\n      const fetchError = new Error('Unknown channel');\n      mockClient.channels.fetch.mockRejectedValue(fetchError);\n\n      await expect(discordService.fetchChannel('invalid-channel')).rejects.toThrow('Unknown channel');\n    });\n  });\n\n  describe('guild operations', () => {\n    it('should fetch guild successfully', async () => {\n      const result = await discordService.fetchGuild('guild-123');\n\n      expect(mockClient.guilds.fetch).toHaveBeenCalledWith('guild-123');\n      expect(result).toBe(mockGuild);\n    });\n\n    it('should handle guild fetch errors', async () => {\n      const fetchError = new Error('Unknown guild');\n      mockClient.guilds.fetch.mockRejectedValue(fetchError);\n\n      await expect(discordService.fetchGuild('invalid-guild')).rejects.toThrow('Unknown guild');\n    });\n  });\n\n  describe('event handling', () => {\n    it('should register message handler', () => {\n      const mockHandler = jest.fn();\n\n      discordService.onMessage(mockHandler);\n\n      expect(mockClient.on).toHaveBeenCalledWith('messageCreate', expect.any(Function));\n    });\n\n    it('should register ready handler', () => {\n      const mockHandler = jest.fn();\n\n      discordService.onReady(mockHandler);\n\n      expect(mockClient.on).toHaveBeenCalledWith('ready', expect.any(Function));\n    });\n\n    it('should register error handler', () => {\n      const mockHandler = jest.fn();\n\n      discordService.onError(mockHandler);\n\n      expect(mockClient.on).toHaveBeenCalledWith('error', expect.any(Function));\n    });\n\n    it('should handle message events with error handling', () => {\n      const mockHandler = jest.fn(() => {\n        throw new Error('Handler error');\n      });\n\n      discordService.onMessage(mockHandler);\n\n      // Get the wrapped handler that was registered\n      const wrappedHandler = mockClient.on.mock.calls.find(call => call[0] === 'messageCreate')[1];\n\n      // Should not throw when handler throws\n      expect(() => wrappedHandler({ content: 'test' })).not.toThrow();\n      expect(mockHandler).toHaveBeenCalledWith({ content: 'test' });\n    });\n  });\n\n  describe('bulk operations', () => {\n    it('should handle multiple messages sequentially', async () => {\n      const messages = ['Message 1', 'Message 2', 'Message 3'];\n\n      const results = await Promise.all(messages.map(msg => discordService.sendMessage('channel-123', msg)));\n\n      expect(results).toHaveLength(3);\n      expect(mockChannel.send).toHaveBeenCalledTimes(3);\n      expect(mockChannel.send).toHaveBeenNthCalledWith(1, 'Message 1');\n      expect(mockChannel.send).toHaveBeenNthCalledWith(2, 'Message 2');\n      expect(mockChannel.send).toHaveBeenNthCalledWith(3, 'Message 3');\n    });\n\n    it('should handle partial failures in bulk operations', async () => {\n      mockChannel.send\n        .mockResolvedValueOnce({ id: 'msg-1' })\n        .mockRejectedValueOnce(new Error('Rate limited'))\n        .mockResolvedValueOnce({ id: 'msg-3' });\n\n      const promises = [\n        discordService.sendMessage('channel-123', 'Success 1'),\n        discordService.sendMessage('channel-123', 'Fail'),\n        discordService.sendMessage('channel-123', 'Success 2'),\n      ];\n\n      const results = await Promise.allSettled(promises);\n\n      expect(results[0].status).toBe('fulfilled');\n      expect(results[1].status).toBe('rejected');\n      expect(results[2].status).toBe('fulfilled');\n    });\n  });\n\n  describe('edge cases and error handling', () => {\n    it('should handle malformed message content', async () => {\n      await expect(discordService.sendMessage('channel-123', null)).resolves.toEqual({ id: 'message-123' });\n\n      expect(mockChannel.send).toHaveBeenCalledWith(null);\n    });\n\n    it('should handle very long channel IDs', async () => {\n      const longChannelId = '1'.repeat(100);\n\n      await discordService.sendMessage(longChannelId, 'Test');\n\n      expect(mockClient.channels.fetch).toHaveBeenCalledWith(longChannelId);\n    });\n\n    it('should handle concurrent requests to same channel', async () => {\n      const promises = Array.from({ length: 10 }, (_, i) => discordService.sendMessage('channel-123', `Message ${i}`));\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(10);\n      expect(mockClient.channels.fetch).toHaveBeenCalledTimes(10);\n      expect(mockChannel.send).toHaveBeenCalledTimes(10);\n    });\n  });\n\n  describe('service state management', () => {\n    it('should maintain event handler references', () => {\n      const handler1 = jest.fn();\n      const handler2 = jest.fn();\n\n      discordService.onMessage(handler1);\n      discordService.onMessage(handler2);\n\n      expect(discordService.eventHandlers).toBeDefined();\n      expect(mockClient.on).toHaveBeenCalledTimes(2);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}