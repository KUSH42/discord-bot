{"version":3,"names":["jest","unstable_mockModule","Client","fn","channels","fetch","mockResolvedValue","isTextBased","send","isReady","login","destroy","on","once","GatewayIntentBits","Guilds","GuildMessages","MessageContent","Partials","Message","Channel","Reaction","google","youtube","chromium","launch","newPage","goto","close","Configuration","DependencyContainer","setupProductionServices","describe","container","config","beforeEach","configObject","NODE_ENV","DISCORD_BOT_TOKEN","YOUTUBE_API_KEY","YOUTUBE_CHANNEL_ID","DISCORD_YOUTUBE_CHANNEL_ID","DISCORD_X_POSTS_CHANNEL_ID","DISCORD_X_REPLIES_CHANNEL_ID","DISCORD_X_QUOTES_CHANNEL_ID","DISCORD_X_RETWEETS_CHANNEL_ID","DISCORD_BOT_SUPPORT_LOG_CHANNEL","PSH_CALLBACK_URL","PSH_SECRET","X_USER_HANDLE","TWITTER_USERNAME","TWITTER_PASSWORD","ALLOWED_USER_IDS","LOG_LEVEL","afterEach","clearAllMocks","it","expect","resolves","not","toThrow","expectedServices","serviceName","resolve","newConfigMap","Map","set","newConfig","newContainer","logger","info","toBe","error","warn"],"sources":["production-setup.test.js"],"sourcesContent":["import { jest } from '@jest/globals';\n\n// Mock the dependencies that require external services\njest.unstable_mockModule('discord.js', () => ({\n  Client: jest.fn(() => ({\n    channels: {\n      fetch: jest.fn().mockResolvedValue({ isTextBased: () => true, send: jest.fn() }),\n    },\n    isReady: jest.fn(() => true),\n    login: jest.fn().mockResolvedValue(),\n    destroy: jest.fn().mockResolvedValue(),\n    on: jest.fn(),\n    once: jest.fn(),\n  })),\n  GatewayIntentBits: {\n    Guilds: 1,\n    GuildMessages: 512,\n    MessageContent: 32768,\n  },\n  Partials: {\n    Message: 'Message',\n    Channel: 'Channel',\n    Reaction: 'Reaction',\n  },\n}));\n\njest.unstable_mockModule('googleapis', () => ({\n  google: {\n    youtube: jest.fn(() => ({})),\n  },\n}));\n\njest.unstable_mockModule('playwright', () => ({\n  chromium: {\n    launch: jest.fn().mockResolvedValue({\n      newPage: jest.fn().mockResolvedValue({\n        goto: jest.fn(),\n        close: jest.fn(),\n      }),\n      close: jest.fn(),\n    }),\n  },\n}));\n\nconst { Configuration } = await import('../../../src/infrastructure/configuration.js');\nconst { DependencyContainer } = await import('../../../src/infrastructure/dependency-container.js');\nconst { setupProductionServices } = await import('../../../src/setup/production-setup.js');\n\ndescribe('Production Setup', () => {\n  let container;\n  let config;\n\n  beforeEach(() => {\n    // Create a mock configuration with all required variables\n    const configObject = {\n      NODE_ENV: 'test',\n      DISCORD_BOT_TOKEN: 'test-token',\n      YOUTUBE_API_KEY: 'test-api-key',\n      YOUTUBE_CHANNEL_ID: 'UCtest-channel1234567890',\n      DISCORD_YOUTUBE_CHANNEL_ID: '123456789012345678',\n      DISCORD_X_POSTS_CHANNEL_ID: '123456789012345678',\n      DISCORD_X_REPLIES_CHANNEL_ID: '123456789012345678',\n      DISCORD_X_QUOTES_CHANNEL_ID: '123456789012345678',\n      DISCORD_X_RETWEETS_CHANNEL_ID: '123456789012345678',\n      DISCORD_BOT_SUPPORT_LOG_CHANNEL: '123456789012345678',\n      PSH_CALLBACK_URL: 'http://localhost:3000/youtube-webhook',\n      PSH_SECRET: 'test-secret',\n      X_USER_HANDLE: 'testuser',\n      TWITTER_USERNAME: 'testuser',\n      TWITTER_PASSWORD: 'testpass',\n      ALLOWED_USER_IDS: '123456789012345678',\n      LOG_LEVEL: 'info',\n    };\n\n    config = new Configuration(configObject);\n    container = new DependencyContainer();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should set up all production services without errors', async () => {\n    await expect(setupProductionServices(container, config)).resolves.not.toThrow();\n  });\n\n  it('should register all required services in the container', async () => {\n    await setupProductionServices(container, config);\n\n    // List of services that should be registered\n    const expectedServices = [\n      'config',\n      'eventBus',\n      'stateManager',\n      'discordService',\n      'youtubeService',\n      'httpService',\n      'expressApp',\n      'browserService',\n      'commandProcessor',\n      'contentClassifier',\n      'contentAnnouncer',\n      'botApplication',\n      'scraperApplication',\n      'monitorApplication',\n      'logger',\n    ];\n\n    for (const serviceName of expectedServices) {\n      expect(() => container.resolve(serviceName)).not.toThrow();\n    }\n  });\n\n  it('should handle optional discord logging channel', async () => {\n    // Test without the optional channel\n    await expect(setupProductionServices(container, config)).resolves.not.toThrow();\n\n    // Test with the optional channel\n    const newConfigMap = new Map(config.config);\n    newConfigMap.set('DISCORD_BOT_SUPPORT_LOG_CHANNEL', '0987654321');\n    const newConfig = new Configuration(newConfigMap);\n    const newContainer = new DependencyContainer();\n\n    await expect(setupProductionServices(newContainer, newConfig)).resolves.not.toThrow();\n  });\n\n  it('should successfully import and execute logger setup without mocking', async () => {\n    // This test specifically validates the logger import path works in production\n    await setupProductionServices(container, config);\n    const logger = container.resolve('logger');\n\n    // Test that logger has the expected methods\n    expect(typeof logger.info).toBe('function');\n    expect(typeof logger.error).toBe('function');\n    expect(typeof logger.warn).toBe('function');\n\n    // Test that the logger can actually log without throwing\n    expect(() => logger.info('Test log message')).not.toThrow();\n  });\n});\n"],"mappings":"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","ignoreList":[]}