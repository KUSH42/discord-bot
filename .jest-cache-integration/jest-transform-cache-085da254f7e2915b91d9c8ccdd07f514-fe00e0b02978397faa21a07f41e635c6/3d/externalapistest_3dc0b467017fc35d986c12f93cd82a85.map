{"version":3,"names":["describe","it","expect","beforeEach","afterEach","jest","mockYouTubeAPI","mockVideoDetails","mockLiveStreamDetails","mockPubSubNotification","createMockVideoDetails","createMockPubSubNotification","createMockSignature","mockTweetData","mockPage","mockBrowser","mockXCookies","mockScraperResults","createMockTweet","createMockPage","createMockBrowser","mockRequest","mockResponse","createMockRequest","createMockResponse","clearAllMocks","useFakeTimers","useRealTimers","videoId","videos","list","mockResolvedValue","data","items","fetchVideoDetails","id","response","part","videoDetails","toHaveBeenCalledWith","toEqual","toBe","rateLimitError","Error","code","errors","reason","mockRejectedValueOnce","fetchWithRetry","retries","error","result","toHaveBeenCalledTimes","checkIfLiveStream","video","isLive","snippet","liveBroadcastContent","liveDetails","liveStreamingDetails","liveStatus","toBeDefined","actualStartTime","length","rejects","toThrow","invalidVideoData","title","channelTitle","undefined","validateVideoData","required","requiredSnippet","field","secret","payload","validSignature","verifySignature","receivedSignature","body","expectedSignature","isValid","invalidSignature","isInvalid","parseNotification","xmlData","videoIdMatch","match","channelIdMatch","entrySection","titleMatch","publishedMatch","channelId","publishedAt","notification","subscriptionManager","subscribe","fn","status","unsubscribe","verify","callbackUrl","topicUrl","subResult","unsubResult","handleChallenge","req","res","challenge","query","mode","topic","verifyToken","send","method","browser","page","loginToTwitter","username","password","newPage","goto","fill","click","waitForSelector","timeout","success","mockPostElements","textContent","Promise","resolve","getAttribute","$$","scrapePosts","searchUrl","postElements","posts","element","text","url","push","trim","timestamp","Date","toISOString","toHaveLength","cookies","manageCookies","authCookie","find","c","name","csrfCookie","now","expires","valid","toHaveBeenCalled","categorizeContent","categorized","replies","quotes","retweets","forEach","post","startsWith","includes","quotedTweet","mixedPosts","mockRejectedValue","scrapeWithErrorHandling","console","message","webhookHandler","signature","headers","json","log","received","healthCheck","health","uptime","process","components","discord","youtube","xScraper","objectContaining","any","Object","corsHandler","next","set","end","timeoutError","fetchWithTimeout","reject","timer","setTimeout","then","clearTimeout","catch","authError","handleAuthError","safeApiCall","Array","isArray"],"sources":["external-apis.test.js"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport {\n  mockYouTubeAPI,\n  mockVideoDetails,\n  mockLiveStreamDetails,\n  mockPubSubNotification,\n  createMockVideoDetails,\n  createMockPubSubNotification,\n  createMockSignature,\n} from '../mocks/youtube.mock.js';\nimport {\n  mockTweetData,\n  mockPage,\n  mockBrowser,\n  mockXCookies,\n  mockScraperResults,\n  createMockTweet,\n  createMockPage,\n  createMockBrowser,\n} from '../mocks/x-twitter.mock.js';\nimport { mockRequest, mockResponse, createMockRequest, createMockResponse } from '../mocks/express.mock.js';\n\ndescribe('External API Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  describe('YouTube Data API Integration', () => {\n    it('should fetch video details successfully', async () => {\n      const videoId = 'dQw4w9WgXcQ';\n      mockYouTubeAPI.videos.list.mockResolvedValue({\n        data: {\n          items: [mockVideoDetails],\n        },\n      });\n\n      const fetchVideoDetails = async (id) => {\n        const response = await mockYouTubeAPI.videos.list({\n          part: 'snippet,statistics,liveStreamingDetails',\n          id,\n        });\n\n        return response.data.items[0];\n      };\n\n      const videoDetails = await fetchVideoDetails(videoId);\n\n      expect(mockYouTubeAPI.videos.list).toHaveBeenCalledWith({\n        part: 'snippet,statistics,liveStreamingDetails',\n        id: videoId,\n      });\n      expect(videoDetails).toEqual(mockVideoDetails);\n      expect(videoDetails.id).toBe(videoId);\n    });\n\n    it('should handle API rate limiting', async () => {\n      const rateLimitError = new Error('Quota exceeded');\n      rateLimitError.code = 403;\n      rateLimitError.errors = [{ reason: 'quotaExceeded' }];\n\n      mockYouTubeAPI.videos.list.mockRejectedValueOnce(rateLimitError).mockResolvedValue({\n        data: { items: [mockVideoDetails] },\n      });\n\n      const fetchWithRetry = async (videoId, retries = 1) => {\n        try {\n          const response = await mockYouTubeAPI.videos.list({\n            part: 'snippet,statistics',\n            id: videoId,\n          });\n          return response.data.items[0];\n        } catch (error) {\n          if (error.code === 403 && retries > 0) {\n            // Immediate retry in test environment\n            return fetchWithRetry(videoId, retries - 1);\n          }\n          throw error;\n        }\n      };\n\n      const result = await fetchWithRetry('dQw4w9WgXcQ');\n\n      expect(mockYouTubeAPI.videos.list).toHaveBeenCalledTimes(2);\n      expect(result).toEqual(mockVideoDetails);\n    });\n\n    it('should detect live streams correctly', async () => {\n      mockYouTubeAPI.videos.list.mockResolvedValue({\n        data: {\n          items: [mockLiveStreamDetails],\n        },\n      });\n\n      const checkIfLiveStream = async (videoId) => {\n        const response = await mockYouTubeAPI.videos.list({\n          part: 'snippet,liveStreamingDetails',\n          id: videoId,\n        });\n\n        const video = response.data.items[0];\n        return {\n          isLive: video.snippet.liveBroadcastContent === 'live',\n          liveDetails: video.liveStreamingDetails,\n        };\n      };\n\n      const liveStatus = await checkIfLiveStream('live123456789');\n\n      expect(liveStatus.isLive).toBe(true);\n      expect(liveStatus.liveDetails).toBeDefined();\n      expect(liveStatus.liveDetails.actualStartTime).toBeDefined();\n    });\n\n    it('should handle video not found errors', async () => {\n      mockYouTubeAPI.videos.list.mockResolvedValue({\n        data: { items: [] },\n      });\n\n      const fetchVideoDetails = async (videoId) => {\n        const response = await mockYouTubeAPI.videos.list({\n          part: 'snippet',\n          id: videoId,\n        });\n\n        if (response.data.items.length === 0) {\n          throw new Error('Video not found');\n        }\n\n        return response.data.items[0];\n      };\n\n      await expect(fetchVideoDetails('nonexistent')).rejects.toThrow('Video not found');\n    });\n\n    it('should validate API responses', async () => {\n      const invalidVideoData = createMockVideoDetails({\n        snippet: { title: null, channelTitle: undefined },\n      });\n\n      mockYouTubeAPI.videos.list.mockResolvedValue({\n        data: { items: [invalidVideoData] },\n      });\n\n      const validateVideoData = (video) => {\n        const required = ['id', 'snippet'];\n        const requiredSnippet = ['title', 'channelTitle', 'publishedAt'];\n\n        for (const field of required) {\n          if (!video[field]) {\n            throw new Error(`Missing required field: ${field}`);\n          }\n        }\n\n        for (const field of requiredSnippet) {\n          if (!video.snippet[field]) {\n            throw new Error(`Missing required snippet field: ${field}`);\n          }\n        }\n\n        return true;\n      };\n\n      const response = await mockYouTubeAPI.videos.list({ part: 'snippet', id: 'test' });\n      const video = response.data.items[0];\n\n      expect(() => validateVideoData(video)).toThrow('Missing required snippet field');\n    });\n  });\n\n  describe('PubSubHubbub Integration', () => {\n    it('should verify webhook signatures correctly', () => {\n      const secret = 'webhook-secret';\n      const payload = mockPubSubNotification;\n      const validSignature = createMockSignature(payload, secret);\n\n      const verifySignature = (receivedSignature, body, secret) => {\n        const expectedSignature = createMockSignature(body, secret);\n        return receivedSignature === expectedSignature;\n      };\n\n      const isValid = verifySignature(validSignature, payload, secret);\n      expect(isValid).toBe(true);\n\n      const invalidSignature = 'sha1=invalid';\n      const isInvalid = verifySignature(invalidSignature, payload, secret);\n      expect(isInvalid).toBe(false);\n    });\n\n    it('should parse PubSubHubbub notifications', () => {\n      const parseNotification = (xmlData) => {\n        // Simplified XML parsing for testing - get entry-specific data\n        const videoIdMatch = xmlData.match(/<yt:videoId>([^<]+)<\\/yt:videoId>/);\n        const channelIdMatch = xmlData.match(/<yt:channelId>([^<]+)<\\/yt:channelId>/);\n        // Extract title from within the entry tag, not the feed title\n        const entrySection = xmlData.match(/<entry[^>]*>([\\s\\S]*?)<\\/entry>/);\n        const titleMatch = entrySection ? entrySection[1].match(/<title>([^<]+)<\\/title>/) : null;\n        const publishedMatch = xmlData.match(/<published>([^<]+)<\\/published>/);\n\n        if (!videoIdMatch || !channelIdMatch || !titleMatch) {\n          throw new Error('Invalid notification format');\n        }\n\n        return {\n          videoId: videoIdMatch[1],\n          channelId: channelIdMatch[1],\n          title: titleMatch[1],\n          publishedAt: publishedMatch ? publishedMatch[1] : null,\n        };\n      };\n\n      const notification = parseNotification(mockPubSubNotification);\n\n      expect(notification.videoId).toBe('dQw4w9WgXcQ');\n      expect(notification.channelId).toBe('UCuAXFkgsw1L7xaCfnd5JJOw');\n      expect(notification.title).toBe('Rick Astley - Never Gonna Give You Up (Official Video)');\n    });\n\n    it('should handle subscription management', async () => {\n      const subscriptionManager = {\n        subscribe: jest.fn().mockResolvedValue({ status: 202 }),\n        unsubscribe: jest.fn().mockResolvedValue({ status: 202 }),\n        verify: jest.fn().mockResolvedValue({ status: 200 }),\n      };\n\n      const callbackUrl = 'https://example.com/webhook/youtube';\n      const topicUrl = 'https://www.youtube.com/xml/feeds/videos.xml?channel_id=UCtest';\n\n      // Test subscription\n      const subResult = await subscriptionManager.subscribe(callbackUrl, topicUrl);\n      expect(subscriptionManager.subscribe).toHaveBeenCalledWith(callbackUrl, topicUrl);\n      expect(subResult.status).toBe(202);\n\n      // Test unsubscription\n      const unsubResult = await subscriptionManager.unsubscribe(callbackUrl, topicUrl);\n      expect(subscriptionManager.unsubscribe).toHaveBeenCalledWith(callbackUrl, topicUrl);\n      expect(unsubResult.status).toBe(202);\n    });\n\n    it('should handle webhook verification challenges', () => {\n      const handleChallenge = (req, res) => {\n        const challenge = req.query['hub.challenge'];\n        const mode = req.query['hub.mode'];\n        const topic = req.query['hub.topic'];\n        const verifyToken = req.query['hub.verify_token'];\n\n        if (mode === 'subscribe' && verifyToken === 'expected-token') {\n          res.status(200).send(challenge);\n          return true;\n        }\n\n        res.status(404).send('Not Found');\n        return false;\n      };\n\n      const req = createMockRequest({\n        method: 'GET',\n        query: {\n          'hub.mode': 'subscribe',\n          'hub.challenge': 'test-challenge-123',\n          'hub.topic': 'https://www.youtube.com/xml/feeds/videos.xml?channel_id=UCtest',\n          'hub.verify_token': 'expected-token',\n        },\n      });\n\n      const res = createMockResponse();\n      req.query = req.query || {};\n\n      const result = handleChallenge(req, res);\n\n      expect(result).toBe(true);\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.send).toHaveBeenCalledWith('test-challenge-123');\n    });\n  });\n\n  describe('X/Twitter Scraping Integration', () => {\n    it('should login to X/Twitter successfully', async () => {\n      const browser = createMockBrowser();\n      const page = createMockPage();\n\n      const loginToTwitter = async (browser, username, password) => {\n        const page = await browser.newPage();\n\n        await page.goto('https://x.com/login');\n        await page.fill('input[name=\"text\"]', username);\n        await page.click('[role=\"button\"]');\n        await page.fill('input[name=\"password\"]', password);\n        await page.click('[data-testid=\"LoginForm_Login_Button\"]');\n\n        // Wait for login to complete\n        await page.waitForSelector('[data-testid=\"SideNav_AccountSwitcher_Button\"]', { timeout: 10000 });\n\n        return { success: true, page };\n      };\n\n      const result = await loginToTwitter(browser, 'testuser', 'testpass');\n\n      expect(page.goto).toHaveBeenCalledWith('https://x.com/login');\n      expect(page.fill).toHaveBeenCalledWith('input[name=\"text\"]', 'testuser');\n      expect(page.fill).toHaveBeenCalledWith('input[name=\"password\"]', 'testpass');\n      expect(result.success).toBe(true);\n    });\n\n    it('should scrape posts from user timeline', async () => {\n      const page = createMockPage();\n\n      // Mock scraped post elements\n      const mockPostElements = [\n        {\n          textContent: () => Promise.resolve('This is a test post'),\n          getAttribute: jest.fn().mockResolvedValue('https://x.com/user/status/123'),\n        },\n        {\n          textContent: () => Promise.resolve('Another test post'),\n          getAttribute: jest.fn().mockResolvedValue('https://x.com/user/status/456'),\n        },\n      ];\n\n      page.$$.mockResolvedValue(mockPostElements);\n\n      const scrapePosts = async (page, username) => {\n        const searchUrl = `https://x.com/search?q=(from%3A${username})+exclude%3Areplies+exclude%3Aretweets&src=typed_query&f=live`;\n\n        await page.goto(searchUrl);\n        await page.waitForSelector('[data-testid=\"tweet\"]');\n\n        const postElements = await page.$$('[data-testid=\"tweet\"]');\n        const posts = [];\n\n        for (const element of postElements) {\n          const text = await element.textContent();\n          const url = await element.getAttribute('href');\n\n          posts.push({\n            text: text.trim(),\n            url,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return posts;\n      };\n\n      const posts = await scrapePosts(page, 'testuser');\n\n      expect(page.goto).toHaveBeenCalledWith(\n        'https://x.com/search?q=(from%3Atestuser)+exclude%3Areplies+exclude%3Aretweets&src=typed_query&f=live',\n      );\n      expect(posts).toHaveLength(2);\n      expect(posts[0].text).toBe('This is a test post');\n    });\n\n    it('should handle cookie management', async () => {\n      const page = createMockPage();\n      page.cookies.mockResolvedValue(mockXCookies);\n\n      const manageCookies = async (page) => {\n        // Get current cookies\n        const cookies = await page.cookies();\n\n        // Check if auth cookies are present\n        const authCookie = cookies.find((c) => c.name === 'auth_token');\n        const csrfCookie = cookies.find((c) => c.name === 'ct0');\n\n        if (!authCookie || !csrfCookie) {\n          throw new Error('Missing authentication cookies');\n        }\n\n        // Check if cookies are expired\n        const now = Date.now();\n        if (authCookie.expires && authCookie.expires < now) {\n          throw new Error('Authentication cookies expired');\n        }\n\n        return { valid: true, cookies };\n      };\n\n      const result = await manageCookies(page);\n\n      expect(page.cookies).toHaveBeenCalled();\n      expect(result.valid).toBe(true);\n      expect(result.cookies).toEqual(mockXCookies);\n    });\n\n    it('should categorize different types of content', async () => {\n      const categorizeContent = (posts) => {\n        const categorized = {\n          posts: [],\n          replies: [],\n          quotes: [],\n          retweets: [],\n        };\n\n        posts.forEach((post) => {\n          if (post.text.startsWith('RT @')) {\n            categorized.retweets.push(post);\n          } else if (post.text.includes('Replying to @')) {\n            categorized.replies.push(post);\n          } else if (post.quotedTweet) {\n            categorized.quotes.push(post);\n          } else {\n            categorized.posts.push(post);\n          }\n        });\n\n        return categorized;\n      };\n\n      const mixedPosts = [\n        createMockTweet({ text: 'Regular post' }),\n        createMockTweet({ text: 'RT @user: Retweeted content' }),\n        createMockTweet({ text: 'Replying to @user: This is a reply' }),\n        createMockTweet({ text: 'Quote tweet', quotedTweet: { id: '123' } }),\n      ];\n\n      const categorized = categorizeContent(mixedPosts);\n\n      expect(categorized.posts).toHaveLength(1);\n      expect(categorized.retweets).toHaveLength(1);\n      expect(categorized.replies).toHaveLength(1);\n      expect(categorized.quotes).toHaveLength(1);\n    });\n\n    it('should handle scraping errors gracefully', async () => {\n      const page = createMockPage();\n      page.goto.mockRejectedValue(new Error('Page not found'));\n\n      const scrapeWithErrorHandling = async (page, url) => {\n        try {\n          await page.goto(url);\n          return { success: true, data: [] };\n        } catch (error) {\n          console.error('Scraping failed:', error.message);\n          return { success: false, error: error.message };\n        }\n      };\n\n      const result = await scrapeWithErrorHandling(page, 'https://x.com/nonexistent');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Page not found');\n    });\n  });\n\n  describe('Express Server Integration', () => {\n    it('should handle YouTube webhook notifications', async () => {\n      const webhookHandler = jest.fn((req, res) => {\n        try {\n          // Verify signature\n          const signature = req.headers['x-hub-signature'];\n          if (!signature || !signature.startsWith('sha1=')) {\n            return res.status(401).json({ error: 'Invalid signature' });\n          }\n\n          // Parse notification\n          const notification = req.body;\n          if (!notification) {\n            return res.status(400).json({ error: 'No notification data' });\n          }\n\n          // Process notification\n          console.log('Processing YouTube notification');\n          res.status(200).json({ received: true });\n        } catch (error) {\n          res.status(500).json({ error: 'Processing failed' });\n        }\n      });\n\n      const req = createMockRequest({\n        method: 'POST',\n        url: '/webhook/youtube',\n        headers: {\n          'x-hub-signature': 'sha1=valid-signature',\n          'content-type': 'application/atom+xml',\n        },\n        body: mockPubSubNotification,\n      });\n\n      const res = createMockResponse();\n\n      webhookHandler(req, res);\n\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({ received: true });\n    });\n\n    it('should implement health check endpoints', () => {\n      const healthCheck = jest.fn((req, res) => {\n        const health = {\n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          uptime: process.uptime(),\n          components: {\n            discord: 'connected',\n            youtube: 'subscribed',\n            xScraper: 'running',\n          },\n        };\n\n        res.status(200).json(health);\n      });\n\n      const req = createMockRequest({ method: 'GET', url: '/health' });\n      const res = createMockResponse();\n\n      healthCheck(req, res);\n\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith(\n        expect.objectContaining({\n          status: 'healthy',\n          components: expect.any(Object),\n        }),\n      );\n    });\n\n    it('should handle CORS for webhook endpoints', () => {\n      const corsHandler = jest.fn((req, res, next) => {\n        res.set({\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, X-Hub-Signature',\n        });\n\n        if (req.method === 'OPTIONS') {\n          return res.status(200).end();\n        }\n\n        next();\n      });\n\n      const req = createMockRequest({ method: 'OPTIONS' });\n      const res = createMockResponse();\n      const next = jest.fn();\n\n      corsHandler(req, res, next);\n\n      expect(res.set).toHaveBeenCalledWith(\n        expect.objectContaining({\n          'Access-Control-Allow-Origin': '*',\n        }),\n      );\n      expect(res.status).toHaveBeenCalledWith(200);\n    });\n  });\n\n  describe('API Integration Error Scenarios', () => {\n    it('should handle network timeouts', async () => {\n      const timeoutError = new Error('Request timeout');\n      timeoutError.code = 'ECONNABORTED';\n\n      mockYouTubeAPI.videos.list.mockRejectedValue(timeoutError);\n\n      const fetchWithTimeout = async (videoId, timeout = 10) => {\n        return new Promise((resolve, reject) => {\n          const timer = setTimeout(() => {\n            reject(new Error('Request timeout'));\n          }, timeout);\n\n          mockYouTubeAPI.videos\n            .list({ id: videoId })\n            .then((result) => {\n              clearTimeout(timer);\n              resolve(result);\n            })\n            .catch((error) => {\n              clearTimeout(timer);\n              reject(error);\n            });\n        });\n      };\n\n      await expect(fetchWithTimeout('test', 1)).rejects.toThrow('Request timeout');\n    });\n\n    it('should handle API authentication failures', async () => {\n      const authError = new Error('Invalid API key');\n      authError.code = 401;\n\n      mockYouTubeAPI.videos.list.mockRejectedValue(authError);\n\n      const handleAuthError = async (videoId) => {\n        try {\n          return await mockYouTubeAPI.videos.list({ id: videoId });\n        } catch (error) {\n          if (error.code === 401) {\n            console.error('API authentication failed - check API key');\n            throw new Error('Authentication failed');\n          }\n          throw error;\n        }\n      };\n\n      await expect(handleAuthError('test')).rejects.toThrow('Authentication failed');\n    });\n\n    it('should handle malformed API responses', async () => {\n      mockYouTubeAPI.videos.list.mockResolvedValue({\n        data: null, // Malformed response\n      });\n\n      const safeApiCall = async (videoId) => {\n        try {\n          const response = await mockYouTubeAPI.videos.list({ id: videoId });\n\n          if (!response || !response.data || !Array.isArray(response.data.items)) {\n            throw new Error('Malformed API response');\n          }\n\n          return response.data.items;\n        } catch (error) {\n          console.error('API call failed:', error.message);\n          return [];\n        }\n      };\n\n      const result = await safeApiCall('test');\n      expect(result).toEqual([]);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}