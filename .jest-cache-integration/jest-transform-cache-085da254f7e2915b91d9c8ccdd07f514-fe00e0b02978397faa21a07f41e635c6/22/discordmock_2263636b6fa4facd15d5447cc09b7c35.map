{"version":3,"names":["jest","mockChannel","id","name","send","fn","mockResolvedValue","type","guild","mockGuild","channels","cache","Map","mockUser","username","tag","bot","mockMessage","content","author","channel","createdTimestamp","Date","now","reply","react","eventHandlers","mockClient","user","guilds","fetch","login","destroy","on","event","handler","has","set","get","push","once","emit","args","forEach","isReady","discordMock","Client","GatewayIntentBits","Guilds","GuildMessages","MessageContent","ChannelType","GuildText","Events","Ready","MessageCreate","createMockClient","freshEventHandlers","createMockChannel","overrides","createMockMessage","createMockUser","createMockGuild"],"sources":["discord.mock.js"],"sourcesContent":["import { jest } from '@jest/globals';\n\n// Mock Discord.js client and components\nexport const mockChannel = {\n  id: 'test-channel-id',\n  name: 'test-channel',\n  send: jest.fn().mockResolvedValue({ id: 'message-id' }),\n  type: 0, // GUILD_TEXT\n  guild: { id: 'test-guild-id' },\n};\n\nexport const mockGuild = {\n  id: 'test-guild-id',\n  name: 'Test Guild',\n  channels: {\n    cache: new Map([['test-channel-id', mockChannel]]),\n  },\n};\n\nexport const mockUser = {\n  id: 'test-user-id',\n  username: 'testuser',\n  tag: 'testuser#1234',\n  bot: false,\n};\n\nexport const mockMessage = {\n  id: 'test-message-id',\n  content: 'test message content',\n  author: mockUser,\n  channel: mockChannel,\n  guild: mockGuild,\n  createdTimestamp: Date.now(),\n  reply: jest.fn().mockResolvedValue({ id: 'reply-id' }),\n  react: jest.fn().mockResolvedValue(true),\n};\n\n// Event emitter for Discord client\nconst eventHandlers = new Map();\n\nexport const mockClient = {\n  user: { id: 'bot-user-id', username: 'TestBot' },\n  guilds: {\n    cache: new Map([['test-guild-id', mockGuild]]),\n  },\n  channels: {\n    cache: new Map([['test-channel-id', mockChannel]]),\n    fetch: jest.fn().mockResolvedValue(mockChannel),\n  },\n  login: jest.fn().mockResolvedValue('token'),\n  destroy: jest.fn().mockResolvedValue(),\n  on: jest.fn((event, handler) => {\n    if (!eventHandlers.has(event)) {\n      eventHandlers.set(event, []);\n    }\n    eventHandlers.get(event).push(handler);\n  }),\n  once: jest.fn((event, handler) => {\n    if (!eventHandlers.has(event)) {\n      eventHandlers.set(event, []);\n    }\n    eventHandlers.get(event).push(handler);\n  }),\n  emit: jest.fn((event, ...args) => {\n    if (eventHandlers.has(event)) {\n      eventHandlers.get(event).forEach((handler) => handler(...args));\n    }\n  }),\n  isReady: () => true,\n};\n\n// Mock Discord.js module\nexport const discordMock = {\n  Client: jest.fn(() => mockClient),\n  GatewayIntentBits: {\n    Guilds: 1,\n    GuildMessages: 512,\n    MessageContent: 32768,\n  },\n  ChannelType: {\n    GuildText: 0,\n  },\n  Events: {\n    Ready: 'ready',\n    MessageCreate: 'messageCreate',\n  },\n};\n\n// Helper to create fresh mock instances\nexport const createMockClient = () => {\n  const freshEventHandlers = new Map();\n\n  return {\n    ...mockClient,\n    channels: {\n      cache: new Map([['test-channel-id', { ...mockChannel }]]),\n      fetch: jest.fn().mockResolvedValue({ ...mockChannel }),\n    },\n    login: jest.fn().mockResolvedValue('token'),\n    destroy: jest.fn().mockResolvedValue(),\n    on: jest.fn((event, handler) => {\n      if (!freshEventHandlers.has(event)) {\n        freshEventHandlers.set(event, []);\n      }\n      freshEventHandlers.get(event).push(handler);\n    }),\n    once: jest.fn((event, handler) => {\n      if (!freshEventHandlers.has(event)) {\n        freshEventHandlers.set(event, []);\n      }\n      freshEventHandlers.get(event).push(handler);\n    }),\n    emit: jest.fn((event, ...args) => {\n      if (freshEventHandlers.has(event)) {\n        freshEventHandlers.get(event).forEach((handler) => handler(...args));\n      }\n    }),\n  };\n};\n\nexport const createMockChannel = (overrides = {}) => ({\n  ...mockChannel,\n  send: jest.fn().mockResolvedValue({ id: 'message-id' }),\n  ...overrides,\n});\n\nexport const createMockMessage = (overrides = {}) => ({\n  ...mockMessage,\n  reply: jest.fn().mockResolvedValue({ id: 'reply-id' }),\n  react: jest.fn().mockResolvedValue(true),\n  ...overrides,\n});\n\nexport const createMockUser = (overrides = {}) => ({\n  ...mockUser,\n  ...overrides,\n});\n\nexport const createMockGuild = (overrides = {}) => ({\n  ...mockGuild,\n  ...overrides,\n});\n"],"mappings":"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","ignoreList":[]}