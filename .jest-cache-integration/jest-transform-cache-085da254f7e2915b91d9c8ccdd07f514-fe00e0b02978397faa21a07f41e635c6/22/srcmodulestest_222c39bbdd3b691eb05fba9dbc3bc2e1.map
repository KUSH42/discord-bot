{"version":3,"names":["describe","it","expect","jest","beforeEach","afterEach","validateEnvironmentVariables","DuplicateDetector","videoUrlRegex","tweetUrlRegex","CommandRateLimit","splitMessage","DiscordManager","DiscordTransport","LoggerUtils","originalEnv","process","env","DISCORD_BOT_TOKEN","YOUTUBE_API_KEY","YOUTUBE_CHANNEL_ID","DISCORD_YOUTUBE_CHANNEL_ID","PSH_CALLBACK_URL","X_USER_HANDLE","DISCORD_X_POSTS_CHANNEL_ID","DISCORD_X_REPLIES_CHANNEL_ID","DISCORD_X_QUOTES_CHANNEL_ID","DISCORD_X_RETWEETS_CHANNEL_ID","TWITTER_USERNAME","TWITTER_PASSWORD","DISCORD_BOT_SUPPORT_LOG_CHANNEL","not","toThrow","rateLimiter","isAllowed","toBe","duplicateDetector","isVideoIdKnown","addVideoId","destroy","testText","matches","matchAll","toHaveLength","videoId","tweetId","isTweetIdKnown","addTweetId","videoMatches","tweetMatches","discordManager","mockClient","mockLogger","channels","fetch","fn","mockResolvedValue","id","name","send","isTextBased","mockReturnValue","info","error","warn","isPostingEnabled","mirrorMessage","supportChannelId","userId","mockChannel","sendMirroredMessage","toHaveBeenCalledWith","longMessage","repeat","chunks","length","toBeGreaterThan","transport","isReady","client","channelId","flushInterval","maxBufferSize","close","longLogMessage","callback","log","level","message","flush","toHaveBeenCalledTimes","fileFormat","createFileLogFormat","logInfo","timestamp","stack","toBeDefined","transform","transformed","Symbol","for","toMatch","content","createDiscordTransport","toBeInstanceOf"],"sources":["src-modules.test.js"],"sourcesContent":["import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { validateEnvironmentVariables } from '../../src/config-validator.js';\nimport { DuplicateDetector, videoUrlRegex, tweetUrlRegex } from '../../src/duplicate-detector.js';\nimport { CommandRateLimit } from '../../src/rate-limiter.js';\nimport { splitMessage, DiscordManager } from '../../src/discord-utils.js';\nimport { DiscordTransport, LoggerUtils } from '../../src/logger-utils.js';\n\ndescribe('Source Module Integration Tests', () => {\n  describe('Config Validator Integration', () => {\n    it('should validate environment and work with other modules', () => {\n      // Set up valid environment\n      const originalEnv = process.env;\n      process.env = {\n        ...originalEnv,\n        DISCORD_BOT_TOKEN: 'test-token',\n        YOUTUBE_API_KEY: 'test-key',\n        YOUTUBE_CHANNEL_ID: 'test-channel-id',\n        DISCORD_YOUTUBE_CHANNEL_ID: '123456789012345678',\n        PSH_CALLBACK_URL: 'https://example.com/webhook',\n        X_USER_HANDLE: 'testuser',\n        DISCORD_X_POSTS_CHANNEL_ID: '123456789012345678',\n        DISCORD_X_REPLIES_CHANNEL_ID: '123456789012345678',\n        DISCORD_X_QUOTES_CHANNEL_ID: '123456789012345678',\n        DISCORD_X_RETWEETS_CHANNEL_ID: '123456789012345678',\n        TWITTER_USERNAME: 'testuser',\n        TWITTER_PASSWORD: 'testpass',\n        DISCORD_BOT_SUPPORT_LOG_CHANNEL: '123456789012345678',\n      };\n\n      // Validate environment (function doesn't return result, just validates)\n      expect(() => validateEnvironmentVariables()).not.toThrow();\n\n      // Test that validated config works with rate limiter\n      const rateLimiter = new CommandRateLimit(5, 60000);\n      expect(rateLimiter.isAllowed('user1')).toBe(true);\n\n      // Test that validated config works with duplicate detector\n      const duplicateDetector = new DuplicateDetector();\n      expect(duplicateDetector.isVideoIdKnown('test-id')).toBe(false);\n      duplicateDetector.addVideoId('test-id');\n      expect(duplicateDetector.isVideoIdKnown('test-id')).toBe(true);\n\n      // Clean up\n      duplicateDetector.destroy();\n      process.env = originalEnv;\n    });\n\n    it('should handle invalid environment and prevent module misuse', () => {\n      // Test that config validation function exists and can be called\n      expect(typeof validateEnvironmentVariables).toBe('function');\n\n      // Test that other modules can still be instantiated\n      const rateLimiter = new CommandRateLimit(5, 60000);\n      expect(rateLimiter.isAllowed('user1')).toBe(true);\n\n      const duplicateDetector = new DuplicateDetector();\n      expect(duplicateDetector.isVideoIdKnown('test-id')).toBe(false);\n\n      // Clean up\n      duplicateDetector.destroy();\n    });\n  });\n\n  describe('Duplicate Detection and URL Regex Integration', () => {\n    let duplicateDetector;\n\n    beforeEach(() => {\n      duplicateDetector = new DuplicateDetector();\n    });\n\n    afterEach(() => {\n      duplicateDetector.destroy();\n    });\n\n    it('should extract and track YouTube video IDs', () => {\n      const testText = 'Check out this video: https://www.youtube.com/watch?v=dQw4w9WgXcQ';\n      const matches = [...testText.matchAll(videoUrlRegex)];\n\n      expect(matches).toHaveLength(1);\n      const videoId = matches[0][1];\n      expect(videoId).toBe('dQw4w9WgXcQ');\n\n      // Test with duplicate detector\n      expect(duplicateDetector.isVideoIdKnown(videoId)).toBe(false);\n      duplicateDetector.addVideoId(videoId);\n      expect(duplicateDetector.isVideoIdKnown(videoId)).toBe(true);\n    });\n\n    it('should extract and track Twitter/X post IDs', () => {\n      const testText = 'Check out this tweet: https://x.com/user/status/1234567890123456789';\n      const matches = [...testText.matchAll(tweetUrlRegex)];\n\n      expect(matches).toHaveLength(1);\n      const tweetId = matches[0][1];\n      expect(tweetId).toBe('1234567890123456789');\n\n      // Test with duplicate detector\n      expect(duplicateDetector.isTweetIdKnown(tweetId)).toBe(false);\n      duplicateDetector.addTweetId(tweetId);\n      expect(duplicateDetector.isTweetIdKnown(tweetId)).toBe(true);\n    });\n\n    it('should handle mixed content with both YouTube and Twitter URLs', () => {\n      const testText = 'Video: https://youtu.be/dQw4w9WgXcQ and tweet: https://x.com/user/status/1234567890123456789';\n\n      const videoMatches = [...testText.matchAll(videoUrlRegex)];\n      const tweetMatches = [...testText.matchAll(tweetUrlRegex)];\n\n      expect(videoMatches).toHaveLength(1);\n      expect(tweetMatches).toHaveLength(1);\n\n      const videoId = videoMatches[0][1];\n      const tweetId = tweetMatches[0][1];\n\n      // Both should be trackable\n      duplicateDetector.addVideoId(videoId);\n      duplicateDetector.addTweetId(tweetId);\n\n      expect(duplicateDetector.isVideoIdKnown(videoId)).toBe(true);\n      expect(duplicateDetector.isTweetIdKnown(tweetId)).toBe(true);\n    });\n  });\n\n  describe('Rate Limiting and Discord Integration', () => {\n    let rateLimiter;\n    let discordManager;\n    let mockClient;\n    let mockLogger;\n\n    beforeEach(() => {\n      rateLimiter = new CommandRateLimit(3, 60000);\n\n      mockClient = {\n        channels: {\n          fetch: jest.fn().mockResolvedValue({\n            id: 'channel123',\n            name: 'test-channel',\n            send: jest.fn().mockResolvedValue(true),\n            isTextBased: jest.fn().mockReturnValue(true),\n          }),\n        },\n      };\n\n      mockLogger = {\n        info: jest.fn(),\n        error: jest.fn(),\n        warn: jest.fn(),\n      };\n\n      discordManager = new DiscordManager(mockClient, mockLogger, {\n        isPostingEnabled: true,\n        mirrorMessage: true,\n        supportChannelId: 'support123',\n      });\n    });\n\n    it('should coordinate rate limiting with Discord posting', async () => {\n      const userId = 'user123';\n      const mockChannel = {\n        id: 'channel123',\n        name: 'test-channel',\n        send: jest.fn().mockResolvedValue(true),\n      };\n\n      // Test rate limiting allows initial commands\n      expect(rateLimiter.isAllowed(userId)).toBe(true);\n      expect(rateLimiter.isAllowed(userId)).toBe(true);\n      expect(rateLimiter.isAllowed(userId)).toBe(true);\n\n      // Fourth command should be blocked\n      expect(rateLimiter.isAllowed(userId)).toBe(false);\n\n      // Discord posting should still work regardless of rate limiting\n      await discordManager.sendMirroredMessage(mockChannel, 'Test message');\n      expect(mockChannel.send).toHaveBeenCalledWith('Test message');\n    });\n\n    it('should handle long messages with rate limiting considerations', async () => {\n      const userId = 'user123';\n      const longMessage = 'x'.repeat(3000);\n      const mockChannel = {\n        id: 'channel123',\n        name: 'test-channel',\n        send: jest.fn().mockResolvedValue(true),\n      };\n\n      // Test that split message works\n      const chunks = splitMessage(longMessage);\n      expect(chunks.length).toBeGreaterThan(1);\n\n      // Test rate limiting still works\n      expect(rateLimiter.isAllowed(userId)).toBe(true);\n\n      // Test Discord manager can handle the long message\n      await discordManager.sendMirroredMessage(mockChannel, longMessage);\n      expect(mockChannel.send).toHaveBeenCalledWith(longMessage);\n    });\n  });\n\n  describe('Logging and Discord Transport Integration', () => {\n    let transport;\n    let mockClient;\n    let mockChannel;\n\n    beforeEach(() => {\n      mockChannel = {\n        id: 'channel123',\n        send: jest.fn().mockResolvedValue(true),\n        isTextBased: jest.fn().mockReturnValue(true),\n      };\n\n      mockClient = {\n        isReady: jest.fn().mockReturnValue(true),\n        channels: {\n          fetch: jest.fn().mockResolvedValue(mockChannel),\n        },\n      };\n\n      transport = new DiscordTransport({\n        client: mockClient,\n        channelId: 'channel123',\n        flushInterval: 100,\n        maxBufferSize: 2,\n      });\n    });\n\n    afterEach(() => {\n      transport.close();\n    });\n\n    it('should integrate logger with Discord message splitting', async () => {\n      const longLogMessage = 'x'.repeat(3000);\n      const callback = jest.fn();\n\n      await transport.log(\n        {\n          level: 'info',\n          message: longLogMessage,\n        },\n        callback,\n      );\n\n      // Manually trigger flush since periodic flushing is disabled in test mode\n      await transport.flush();\n\n      // Should have called send multiple times due to message splitting\n      expect(mockChannel.send).toHaveBeenCalledTimes(3); // Init message + 2 chunks\n    });\n\n    it('should work with LoggerUtils formatters', () => {\n      const fileFormat = LoggerUtils.createFileLogFormat();\n      const logInfo = {\n        level: 'error',\n        message: 'Test error message',\n        timestamp: '2023-01-01T00:00:00.000Z',\n        stack: 'Error stack trace',\n      };\n\n      // The fileFormat is now a Winston format object, not a plain object\n      expect(fileFormat).toBeDefined();\n      expect(typeof fileFormat.transform).toBe('function');\n\n      // Test that it transforms log info correctly\n      const transformed = fileFormat.transform(logInfo);\n      expect(transformed).toBeDefined();\n\n      // Winston format transform returns the info object, potentially with Symbol.for('message')\n      const message = transformed[Symbol.for('message')] || transformed.message;\n      expect(message || transformed).toMatch(/Test error message/);\n      expect(message || transformed).toMatch(/Error stack trace/);\n      expect(message || transformed).toMatch(/\\[ERROR\\]/);\n    });\n  });\n\n  describe('Full Integration Workflow', () => {\n    it('should demonstrate complete workflow integration', async () => {\n      // 1. Environment validation\n      const originalEnv = process.env;\n      process.env = {\n        ...originalEnv,\n        DISCORD_BOT_TOKEN: 'test-token',\n        YOUTUBE_API_KEY: 'test-key',\n        YOUTUBE_CHANNEL_ID: 'test-channel-id',\n        DISCORD_YOUTUBE_CHANNEL_ID: '123456789012345678',\n        PSH_CALLBACK_URL: 'https://example.com/webhook',\n        X_USER_HANDLE: 'testuser',\n        DISCORD_X_POSTS_CHANNEL_ID: '123456789012345678',\n        DISCORD_X_REPLIES_CHANNEL_ID: '123456789012345678',\n        DISCORD_X_QUOTES_CHANNEL_ID: '123456789012345678',\n        DISCORD_X_RETWEETS_CHANNEL_ID: '123456789012345678',\n        TWITTER_USERNAME: 'testuser',\n        TWITTER_PASSWORD: 'testpass',\n        DISCORD_BOT_SUPPORT_LOG_CHANNEL: '123456789012345678',\n      };\n\n      expect(() => validateEnvironmentVariables()).not.toThrow();\n\n      // 2. Content processing\n      const content =\n        'New video: https://youtu.be/dQw4w9WgXcQ and tweet: https://x.com/user/status/1234567890123456789';\n      const videoMatches = [...content.matchAll(videoUrlRegex)];\n      const tweetMatches = [...content.matchAll(tweetUrlRegex)];\n\n      expect(videoMatches).toHaveLength(1);\n      expect(tweetMatches).toHaveLength(1);\n\n      const videoId = videoMatches[0][1];\n      const tweetId = tweetMatches[0][1];\n\n      // 3. Duplicate detection\n      const duplicateDetector = new DuplicateDetector();\n      expect(duplicateDetector.isVideoIdKnown(videoId)).toBe(false);\n      expect(duplicateDetector.isTweetIdKnown(tweetId)).toBe(false);\n\n      duplicateDetector.addVideoId(videoId);\n      duplicateDetector.addTweetId(tweetId);\n\n      expect(duplicateDetector.isVideoIdKnown(videoId)).toBe(true);\n      expect(duplicateDetector.isTweetIdKnown(tweetId)).toBe(true);\n\n      // 4. Rate limiting\n      const rateLimiter = new CommandRateLimit(5, 60000);\n      expect(rateLimiter.isAllowed('user1')).toBe(true);\n\n      // 5. Discord posting\n      const mockClient = {\n        channels: {\n          fetch: jest.fn().mockResolvedValue({\n            id: 'channel123',\n            name: 'test-channel',\n            send: jest.fn().mockResolvedValue(true),\n            isTextBased: jest.fn().mockReturnValue(true),\n          }),\n        },\n      };\n\n      const mockLogger = {\n        info: jest.fn(),\n        error: jest.fn(),\n        warn: jest.fn(),\n      };\n\n      const discordManager = new DiscordManager(mockClient, mockLogger, {\n        isPostingEnabled: true,\n        mirrorMessage: false,\n        supportChannelId: 'support123',\n      });\n\n      const mockChannel = {\n        id: 'channel123',\n        name: 'test-channel',\n        send: jest.fn().mockResolvedValue(true),\n      };\n\n      await discordManager.sendMirroredMessage(mockChannel, content);\n      expect(mockChannel.send).toHaveBeenCalledWith(content);\n\n      // 6. Logging\n      const transport = LoggerUtils.createDiscordTransport(mockClient, 'log-channel');\n      expect(transport).toBeInstanceOf(DiscordTransport);\n\n      // Clean up\n      duplicateDetector.destroy();\n      transport.close();\n      process.env = originalEnv;\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}