{"version":3,"names":["jest","describe","it","expect","beforeEach","afterEach","DependencyContainer","Configuration","setupProductionServices","container","BotApplication","MonitorApplication","ScraperApplication","originalEnv","process","env","X_USER_HANDLE","TWITTER_USERNAME","TWITTER_PASSWORD","DISCORD_BOT_TOKEN","DISCORD_SUPPORT_CHANNEL_ID","DISCORD_ANNOUNCE_CHANNEL_ID","DISCORD_YOUTUBE_CHANNEL_ID","DISCORD_X_POSTS_CHANNEL_ID","DISCORD_X_REPLIES_CHANNEL_ID","DISCORD_X_QUOTES_CHANNEL_ID","DISCORD_X_RETWEETS_CHANNEL_ID","YOUTUBE_API_KEY","YOUTUBE_CHANNEL_ID","PSH_CALLBACK_URL","PSH_SECRET","botAppModule","spyOn","prototype","mockResolvedValue","monitorAppModule","scraperAppModule","dispose","restoreAllMocks","error","configuration","e","toBeUndefined","isRegistered","toBe","main","start","toHaveBeenCalledTimes"],"sources":["startup.test.js"],"sourcesContent":["// /home/xush/Documents/prog/discord-youtube-bot/tests/integration/startup.test.js\nimport { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { DependencyContainer } from '../../src/infrastructure/dependency-container.js';\nimport { Configuration } from '../../src/infrastructure/configuration.js';\nimport { setupProductionServices } from '../../src/setup/production-setup.js';\n\ndescribe('Application Startup Integration Test', () => {\n  let container;\n  let BotApplication, MonitorApplication, ScraperApplication;\n  let originalEnv;\n\n  beforeEach(async () => {\n    // Save original environment\n    originalEnv = process.env;\n\n    // Set required environment variables for tests\n    process.env = {\n      ...originalEnv,\n      X_USER_HANDLE: 'testuser',\n      TWITTER_USERNAME: 'testuser',\n      TWITTER_PASSWORD: 'testpass',\n      DISCORD_BOT_TOKEN: 'test-token',\n      DISCORD_SUPPORT_CHANNEL_ID: '123456789012345678',\n      DISCORD_ANNOUNCE_CHANNEL_ID: '123456789012345679',\n      DISCORD_YOUTUBE_CHANNEL_ID: '123456789012345680',\n      DISCORD_X_POSTS_CHANNEL_ID: '123456789012345681',\n      DISCORD_X_REPLIES_CHANNEL_ID: '123456789012345682',\n      DISCORD_X_QUOTES_CHANNEL_ID: '123456789012345683',\n      DISCORD_X_RETWEETS_CHANNEL_ID: '123456789012345684',\n      YOUTUBE_API_KEY: 'test-key',\n      YOUTUBE_CHANNEL_ID: 'UCrAOyUwjSM5zzPz_FqsUhuQ',\n      PSH_CALLBACK_URL: 'https://example.com/webhook',\n      PSH_SECRET: 'test-secret',\n    };\n\n    // Dynamically import and mock the classes\n    const botAppModule = await import('../../src/application/bot-application.js');\n    BotApplication = botAppModule.BotApplication;\n    jest.spyOn(BotApplication.prototype, 'start').mockResolvedValue();\n    jest.spyOn(BotApplication.prototype, 'stop').mockResolvedValue();\n\n    const monitorAppModule = await import('../../src/application/monitor-application.js');\n    MonitorApplication = monitorAppModule.MonitorApplication;\n    jest.spyOn(MonitorApplication.prototype, 'start').mockResolvedValue();\n    jest.spyOn(MonitorApplication.prototype, 'stop').mockResolvedValue();\n\n    const scraperAppModule = await import('../../src/application/scraper-application.js');\n    ScraperApplication = scraperAppModule.ScraperApplication;\n    jest.spyOn(ScraperApplication.prototype, 'start').mockResolvedValue();\n    jest.spyOn(ScraperApplication.prototype, 'stop').mockResolvedValue();\n  });\n\n  afterEach(async () => {\n    if (container) {\n      await container.dispose();\n    }\n    // Restore original environment\n    process.env = originalEnv;\n    jest.restoreAllMocks();\n  });\n\n  it('should initialize the dependency container and setup services without errors', async () => {\n    let error;\n    try {\n      const configuration = new Configuration();\n      container = new DependencyContainer();\n      // This will throw an error if any services can't be created,\n      // including ReferenceErrors for missing functions.\n      await setupProductionServices(container, configuration);\n    } catch (e) {\n      error = e;\n    }\n\n    expect(error).toBeUndefined();\n\n    // Verify that key services are registered\n    expect(container.isRegistered('logger')).toBe(true);\n    expect(container.isRegistered('discordService')).toBe(true);\n    expect(container.isRegistered('botApplication')).toBe(true);\n  });\n\n  it('should start all application modules', async () => {\n    // Dynamically import main after mocks are set up\n    const { main } = await import('../../index.js');\n    await main();\n\n    // Verify that start methods are called\n    expect(BotApplication.prototype.start).toHaveBeenCalledTimes(1);\n    expect(MonitorApplication.prototype.start).toHaveBeenCalledTimes(1);\n    expect(ScraperApplication.prototype.start).toHaveBeenCalledTimes(1);\n  });\n});\n"],"mappings":"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","ignoreList":[]}