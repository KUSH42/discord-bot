7631ed3bd334108060efbdb504a87af5
/* istanbul ignore next */
function cov_1f8ai4cv3j() {
  var path = "/home/xush/Documents/prog/discord-youtube-bot/src/rate-limiter.js";
  var hash = "f71357b74d6309e6603c54a34811ca7c86dc164a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/xush/Documents/prog/discord-youtube-bot/src/rate-limiter.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 35
        }
      },
      "1": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "2": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 27
        }
      },
      "3": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 33
        }
      },
      "4": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 26
        }
      },
      "5": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 91
        }
      },
      "6": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "7": {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 25
        }
      },
      "8": {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 47
        }
      },
      "9": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "10": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 19
        }
      },
      "11": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 21
        }
      },
      "12": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 37
        }
      },
      "13": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "14": {
        start: {
          line: 44,
          column: 6
        },
        end: {
          line: 44,
          column: 21
        }
      },
      "15": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 16
        }
      },
      "16": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 26
        }
      },
      "17": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "18": {
        start: {
          line: 56,
          column: 6
        },
        end: {
          line: 58,
          column: 7
        }
      },
      "19": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 34
        }
      },
      "20": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 68,
          column: 43
        }
      },
      "21": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "22": {
        start: {
          line: 70,
          column: 6
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "23": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 56
        }
      },
      "24": {
        start: {
          line: 81,
          column: 21
        },
        end: {
          line: 81,
          column: 43
        }
      },
      "25": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "26": {
        start: {
          line: 83,
          column: 6
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "27": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 26
        }
      },
      "28": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "29": {
        start: {
          line: 88,
          column: 6
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "30": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 26
        }
      },
      "31": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 104,
          column: 6
        }
      },
      "32": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 112,
          column: 30
        }
      },
      "33": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 119,
          column: 23
        }
      },
      "34": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 53
        }
      },
      "35": {
        start: {
          line: 137,
          column: 25
        },
        end: {
          line: 143,
          column: 3
        }
      },
      "36": {
        start: {
          line: 145,
          column: 2
        },
        end: {
          line: 145,
          column: 54
        }
      },
      "37": {
        start: {
          line: 154,
          column: 25
        },
        end: {
          line: 160,
          column: 3
        }
      },
      "38": {
        start: {
          line: 162,
          column: 2
        },
        end: {
          line: 162,
          column: 54
        }
      },
      "39": {
        start: {
          line: 171,
          column: 25
        },
        end: {
          line: 177,
          column: 3
        }
      },
      "40": {
        start: {
          line: 179,
          column: 2
        },
        end: {
          line: 179,
          column: 54
        }
      },
      "41": {
        start: {
          line: 188,
          column: 18
        },
        end: {
          line: 188,
          column: 47
        }
      },
      "42": {
        start: {
          line: 190,
          column: 2
        },
        end: {
          line: 208,
          column: 4
        }
      },
      "43": {
        start: {
          line: 193,
          column: 6
        },
        end: {
          line: 196,
          column: 65
        }
      },
      "44": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 204,
          column: 5
        }
      },
      "45": {
        start: {
          line: 201,
          column: 6
        },
        end: {
          line: 203,
          column: 7
        }
      },
      "46": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 22
        }
      },
      "47": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 207,
          column: 35
        }
      },
      "48": {
        start: {
          line: 217,
          column: 48
        },
        end: {
          line: 217,
          column: 55
        }
      },
      "49": {
        start: {
          line: 218,
          column: 2
        },
        end: {
          line: 218,
          column: 53
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 2
          },
          end: {
            line: 11,
            column: 3
          }
        },
        loc: {
          start: {
            line: 11,
            column: 49
          },
          end: {
            line: 16,
            column: 3
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        },
        loc: {
          start: {
            line: 23,
            column: 20
          },
          end: {
            line: 48,
            column: 3
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 2
          },
          end: {
            line: 53,
            column: 3
          }
        },
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 60,
            column: 3
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 67,
            column: 2
          },
          end: {
            line: 67,
            column: 3
          }
        },
        loc: {
          start: {
            line: 67,
            column: 27
          },
          end: {
            line: 73,
            column: 3
          }
        },
        line: 67
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 80,
            column: 2
          },
          end: {
            line: 80,
            column: 3
          }
        },
        loc: {
          start: {
            line: 80,
            column: 23
          },
          end: {
            line: 92,
            column: 3
          }
        },
        line: 80
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 98,
            column: 2
          },
          end: {
            line: 98,
            column: 3
          }
        },
        loc: {
          start: {
            line: 98,
            column: 13
          },
          end: {
            line: 105,
            column: 3
          }
        },
        line: 98
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        },
        loc: {
          start: {
            line: 111,
            column: 20
          },
          end: {
            line: 113,
            column: 3
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 118,
            column: 2
          },
          end: {
            line: 118,
            column: 3
          }
        },
        loc: {
          start: {
            line: 118,
            column: 13
          },
          end: {
            line: 120,
            column: 3
          }
        },
        line: 118
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 126,
            column: 3
          }
        },
        loc: {
          start: {
            line: 126,
            column: 33
          },
          end: {
            line: 128,
            column: 3
          }
        },
        line: 126
      },
      "9": {
        name: "createWebhookLimiter",
        decl: {
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 136,
            column: 36
          }
        },
        loc: {
          start: {
            line: 136,
            column: 51
          },
          end: {
            line: 146,
            column: 1
          }
        },
        line: 136
      },
      "10": {
        name: "createGeneralLimiter",
        decl: {
          start: {
            line: 153,
            column: 16
          },
          end: {
            line: 153,
            column: 36
          }
        },
        loc: {
          start: {
            line: 153,
            column: 51
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 153
      },
      "11": {
        name: "createStrictLimiter",
        decl: {
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 170,
            column: 35
          }
        },
        loc: {
          start: {
            line: 170,
            column: 50
          },
          end: {
            line: 180,
            column: 1
          }
        },
        line: 170
      },
      "12": {
        name: "createSecureRateLimiter",
        decl: {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 187,
            column: 39
          }
        },
        loc: {
          start: {
            line: 187,
            column: 54
          },
          end: {
            line: 209,
            column: 1
          }
        },
        line: 187
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 190,
            column: 9
          },
          end: {
            line: 190,
            column: 10
          }
        },
        loc: {
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 208,
            column: 3
          }
        },
        line: 190
      },
      "14": {
        name: "createCommandRateLimiter",
        decl: {
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 216,
            column: 40
          }
        },
        loc: {
          start: {
            line: 216,
            column: 55
          },
          end: {
            line: 219,
            column: 1
          }
        },
        line: 216
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 14
          },
          end: {
            line: 11,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 28
          },
          end: {
            line: 11,
            column: 29
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 31
          },
          end: {
            line: 11,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 42
          },
          end: {
            line: 11,
            column: 47
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 25,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 25,
            column: 43
          }
        }, {
          start: {
            line: 25,
            column: 47
          },
          end: {
            line: 25,
            column: 91
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "5": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "8": {
        loc: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "9": {
        loc: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "10": {
        loc: {
          start: {
            line: 136,
            column: 37
          },
          end: {
            line: 136,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 136,
            column: 47
          },
          end: {
            line: 136,
            column: 49
          }
        }],
        line: 136
      },
      "11": {
        loc: {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 153,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 153,
            column: 47
          },
          end: {
            line: 153,
            column: 49
          }
        }],
        line: 153
      },
      "12": {
        loc: {
          start: {
            line: 170,
            column: 36
          },
          end: {
            line: 170,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 170,
            column: 46
          },
          end: {
            line: 170,
            column: 48
          }
        }],
        line: 170
      },
      "13": {
        loc: {
          start: {
            line: 187,
            column: 40
          },
          end: {
            line: 187,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 187,
            column: 50
          },
          end: {
            line: 187,
            column: 52
          }
        }],
        line: 187
      },
      "14": {
        loc: {
          start: {
            line: 193,
            column: 6
          },
          end: {
            line: 196,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 6
          },
          end: {
            line: 193,
            column: 12
          }
        }, {
          start: {
            line: 194,
            column: 6
          },
          end: {
            line: 194,
            column: 34
          }
        }, {
          start: {
            line: 195,
            column: 6
          },
          end: {
            line: 195,
            column: 30
          }
        }, {
          start: {
            line: 196,
            column: 6
          },
          end: {
            line: 196,
            column: 65
          }
        }],
        line: 193
      },
      "15": {
        loc: {
          start: {
            line: 196,
            column: 7
          },
          end: {
            line: 196,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 7
          },
          end: {
            line: 196,
            column: 37
          }
        }, {
          start: {
            line: 196,
            column: 41
          },
          end: {
            line: 196,
            column: 43
          }
        }],
        line: 196
      },
      "16": {
        loc: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "17": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 199,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 199,
            column: 11
          }
        }, {
          start: {
            line: 199,
            column: 15
          },
          end: {
            line: 199,
            column: 27
          }
        }, {
          start: {
            line: 199,
            column: 31
          },
          end: {
            line: 199,
            column: 49
          }
        }],
        line: 199
      },
      "18": {
        loc: {
          start: {
            line: 201,
            column: 6
          },
          end: {
            line: 203,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 6
          },
          end: {
            line: 203,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "19": {
        loc: {
          start: {
            line: 216,
            column: 41
          },
          end: {
            line: 216,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 216,
            column: 51
          },
          end: {
            line: 216,
            column: 53
          }
        }],
        line: 216
      },
      "20": {
        loc: {
          start: {
            line: 217,
            column: 10
          },
          end: {
            line: 217,
            column: 25
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 217,
            column: 24
          },
          end: {
            line: 217,
            column: 25
          }
        }],
        line: 217
      },
      "21": {
        loc: {
          start: {
            line: 217,
            column: 27
          },
          end: {
            line: 217,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 217,
            column: 38
          },
          end: {
            line: 217,
            column: 43
          }
        }],
        line: 217
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0],
      "12": [0],
      "13": [0],
      "14": [0, 0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0],
      "20": [0],
      "21": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f71357b74d6309e6603c54a34811ca7c86dc164a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1f8ai4cv3j = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1f8ai4cv3j();
// rate-limiter.js
// Rate limiting utilities for Discord commands and webhook requests

import rateLimit from 'express-rate-limit';

/**
 * Command rate limiter class for Discord bot commands
 * Implements in-memory rate limiting with automatic cleanup
 */
export class CommandRateLimit {
  constructor(maxCommands =
  /* istanbul ignore next */
  (cov_1f8ai4cv3j().b[0][0]++, 5), windowMs =
  /* istanbul ignore next */
  (cov_1f8ai4cv3j().b[1][0]++, 60000)) {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[0]++;
    cov_1f8ai4cv3j().s[0]++;
    this.maxCommands = maxCommands;
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[1]++;
    this.windowMs = windowMs;
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[2]++;
    this.users = new Map();
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[3]++;
    this.cleanupThreshold = 1000; // Cleanup when this many users are stored
  }

  /**
   * Check if a user is allowed to execute a command
   * @param {string} userId - Discord user ID
   * @returns {boolean} - True if user is allowed, false if rate limited
   */
  isAllowed(userId) {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[1]++;
    const now =
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().s[4]++, Date.now());
    const userData =
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().s[5]++,
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[2][0]++, this.users.get(userId)) ||
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[2][1]++, {
      count: 0,
      resetTime: now + this.windowMs
    }));

    // Reset if window has passed
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[6]++;
    if (now >= userData.resetTime) {
      /* istanbul ignore next */
      cov_1f8ai4cv3j().b[3][0]++;
      cov_1f8ai4cv3j().s[7]++;
      userData.count = 0;
      /* istanbul ignore next */
      cov_1f8ai4cv3j().s[8]++;
      userData.resetTime = now + this.windowMs;
    } else
    /* istanbul ignore next */
    {
      cov_1f8ai4cv3j().b[3][1]++;
    }

    // Check if user has exceeded limit
    cov_1f8ai4cv3j().s[9]++;
    if (userData.count >= this.maxCommands) {
      /* istanbul ignore next */
      cov_1f8ai4cv3j().b[4][0]++;
      cov_1f8ai4cv3j().s[10]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1f8ai4cv3j().b[4][1]++;
    }

    // Increment counter
    cov_1f8ai4cv3j().s[11]++;
    userData.count++;
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[12]++;
    this.users.set(userId, userData);

    // Clean up old entries periodically
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[13]++;
    if (this.users.size > this.cleanupThreshold) {
      /* istanbul ignore next */
      cov_1f8ai4cv3j().b[5][0]++;
      cov_1f8ai4cv3j().s[14]++;
      this.cleanup();
    } else
    /* istanbul ignore next */
    {
      cov_1f8ai4cv3j().b[5][1]++;
    }
    cov_1f8ai4cv3j().s[15]++;
    return true;
  }

  /**
   * Clean up expired user entries
   */
  cleanup() {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[2]++;
    const now =
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().s[16]++, Date.now());
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[17]++;
    for (const [userId, userData] of this.users.entries()) {
      /* istanbul ignore next */
      cov_1f8ai4cv3j().s[18]++;
      if (now >= userData.resetTime) {
        /* istanbul ignore next */
        cov_1f8ai4cv3j().b[6][0]++;
        cov_1f8ai4cv3j().s[19]++;
        this.users.delete(userId);
      } else
      /* istanbul ignore next */
      {
        cov_1f8ai4cv3j().b[6][1]++;
      }
    }
  }

  /**
   * Get remaining time until user's rate limit resets
   * @param {string} userId - Discord user ID
   * @returns {number} - Remaining time in milliseconds
   */
  getRemainingTime(userId) {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[3]++;
    const userData =
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().s[20]++, this.users.get(userId));
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[21]++;
    if (!userData) {
      /* istanbul ignore next */
      cov_1f8ai4cv3j().b[7][0]++;
      cov_1f8ai4cv3j().s[22]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1f8ai4cv3j().b[7][1]++;
    }
    cov_1f8ai4cv3j().s[23]++;
    return Math.max(0, userData.resetTime - Date.now());
  }

  /**
   * Get current usage count for a user
   * @param {string} userId - Discord user ID
   * @returns {number} - Current command count
   */
  getUserCount(userId) {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[4]++;
    const userData =
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().s[24]++, this.users.get(userId));
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[25]++;
    if (!userData) {
      /* istanbul ignore next */
      cov_1f8ai4cv3j().b[8][0]++;
      cov_1f8ai4cv3j().s[26]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1f8ai4cv3j().b[8][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().s[27]++, Date.now());
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[28]++;
    if (now >= userData.resetTime) {
      /* istanbul ignore next */
      cov_1f8ai4cv3j().b[9][0]++;
      cov_1f8ai4cv3j().s[29]++;
      return 0; // Window has expired
    } else
    /* istanbul ignore next */
    {
      cov_1f8ai4cv3j().b[9][1]++;
    }
    cov_1f8ai4cv3j().s[30]++;
    return userData.count;
  }

  /**
   * Get rate limit statistics
   * @returns {Object} - Statistics object
   */
  getStats() {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[5]++;
    cov_1f8ai4cv3j().s[31]++;
    return {
      maxCommands: this.maxCommands,
      windowMs: this.windowMs,
      activeUsers: this.users.size,
      cleanupThreshold: this.cleanupThreshold
    };
  }

  /**
   * Reset rate limits for a specific user
   * @param {string} userId - Discord user ID
   */
  resetUser(userId) {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[6]++;
    cov_1f8ai4cv3j().s[32]++;
    this.users.delete(userId);
  }

  /**
   * Reset all rate limits
   */
  resetAll() {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[7]++;
    cov_1f8ai4cv3j().s[33]++;
    this.users.clear();
  }

  /**
   * Set cleanup threshold
   * @param {number} threshold - New cleanup threshold
   */
  setCleanupThreshold(threshold) {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[8]++;
    cov_1f8ai4cv3j().s[34]++;
    this.cleanupThreshold = Math.max(100, threshold);
  }
}

/**
 * Create a webhook rate limiter for Express
 * @param {Object} options - Rate limiter configuration
 * @returns {Function} - Express middleware function
 */
export function createWebhookLimiter(options =
/* istanbul ignore next */
(cov_1f8ai4cv3j().b[10][0]++, {})) {
  /* istanbul ignore next */
  cov_1f8ai4cv3j().f[9]++;
  const defaultOptions =
  /* istanbul ignore next */
  (cov_1f8ai4cv3j().s[35]++, {
    windowMs: 15 * 60 * 1000,
    // 15 minutes
    max: 100,
    // limit each IP to 100 requests per windowMs
    message: 'Too many webhook requests from this IP, please try again later.',
    standardHeaders: true,
    legacyHeaders: false
  });
  /* istanbul ignore next */
  cov_1f8ai4cv3j().s[36]++;
  return rateLimit({
    ...defaultOptions,
    ...options
  });
}

/**
 * Create a general purpose rate limiter
 * @param {Object} options - Rate limiter configuration
 * @returns {Function} - Express middleware function
 */
export function createGeneralLimiter(options =
/* istanbul ignore next */
(cov_1f8ai4cv3j().b[11][0]++, {})) {
  /* istanbul ignore next */
  cov_1f8ai4cv3j().f[10]++;
  const defaultOptions =
  /* istanbul ignore next */
  (cov_1f8ai4cv3j().s[37]++, {
    windowMs: 60 * 1000,
    // 1 minute
    max: 60,
    // limit each IP to 60 requests per minute
    message: 'Too many requests from this IP, please try again later.',
    standardHeaders: true,
    legacyHeaders: false
  });
  /* istanbul ignore next */
  cov_1f8ai4cv3j().s[38]++;
  return rateLimit({
    ...defaultOptions,
    ...options
  });
}

/**
 * Create a strict rate limiter for sensitive endpoints
 * @param {Object} options - Rate limiter configuration
 * @returns {Function} - Express middleware function
 */
export function createStrictLimiter(options =
/* istanbul ignore next */
(cov_1f8ai4cv3j().b[12][0]++, {})) {
  /* istanbul ignore next */
  cov_1f8ai4cv3j().f[11]++;
  const defaultOptions =
  /* istanbul ignore next */
  (cov_1f8ai4cv3j().s[39]++, {
    windowMs: 60 * 1000,
    // 1 minute
    max: 10,
    // limit each IP to 10 requests per minute
    message: 'Too many requests from this IP, please try again later.',
    standardHeaders: true,
    legacyHeaders: false
  });
  /* istanbul ignore next */
  cov_1f8ai4cv3j().s[40]++;
  return rateLimit({
    ...defaultOptions,
    ...options
  });
}

/**
 * Rate limiting middleware factory with IP validation
 * @param {Object} options - Configuration options
 * @returns {Function} - Express middleware function
 */
export function createSecureRateLimiter(options =
/* istanbul ignore next */
(cov_1f8ai4cv3j().b[13][0]++, {})) {
  /* istanbul ignore next */
  cov_1f8ai4cv3j().f[12]++;
  const limiter =
  /* istanbul ignore next */
  (cov_1f8ai4cv3j().s[41]++, createGeneralLimiter(options));
  /* istanbul ignore next */
  cov_1f8ai4cv3j().s[42]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_1f8ai4cv3j().f[13]++;
    // Get IP address from various sources
    const ip =
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().s[43]++,
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[14][0]++, req.ip) ||
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[14][1]++, req.connection.remoteAddress) ||
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[14][2]++, req.socket.remoteAddress) ||
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[14][3]++, (
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[15][0]++, req.headers['x-forwarded-for']) ||
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[15][1]++, '')).split(',')[0].trim()));

    // Basic IP validation
    /* istanbul ignore next */
    cov_1f8ai4cv3j().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[17][0]++, !ip) ||
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[17][1]++, ip === '::1') ||
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[17][2]++, ip === '127.0.0.1')) {
      /* istanbul ignore next */
      cov_1f8ai4cv3j().b[16][0]++;
      cov_1f8ai4cv3j().s[45]++;
      // Allow localhost in development
      if (process.env.NODE_ENV === 'development') {
        /* istanbul ignore next */
        cov_1f8ai4cv3j().b[18][0]++;
        cov_1f8ai4cv3j().s[46]++;
        return next();
      } else
      /* istanbul ignore next */
      {
        cov_1f8ai4cv3j().b[18][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1f8ai4cv3j().b[16][1]++;
    }

    // Apply rate limiting
    cov_1f8ai4cv3j().s[47]++;
    return limiter(req, res, next);
  };
}

/**
 * Utility function to create a command rate limiter instance
 * @param {Object} options - Configuration options
 * @returns {CommandRateLimit} - New command rate limiter instance
 */
export function createCommandRateLimiter(options =
/* istanbul ignore next */
(cov_1f8ai4cv3j().b[19][0]++, {})) {
  /* istanbul ignore next */
  cov_1f8ai4cv3j().f[14]++;
  const {
    maxCommands =
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[20][0]++, 5),
    windowMs =
    /* istanbul ignore next */
    (cov_1f8ai4cv3j().b[21][0]++, 60000)
  } =
  /* istanbul ignore next */
  (cov_1f8ai4cv3j().s[48]++, options);
  /* istanbul ignore next */
  cov_1f8ai4cv3j().s[49]++;
  return new CommandRateLimit(maxCommands, windowMs);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,