{"version":3,"names":["cov_1f8ai4cv3j","actualCoverage","rateLimit","CommandRateLimit","constructor","maxCommands","b","windowMs","f","s","users","Map","cleanupThreshold","isAllowed","userId","now","Date","userData","get","count","resetTime","set","size","cleanup","entries","delete","getRemainingTime","Math","max","getUserCount","getStats","activeUsers","resetUser","resetAll","clear","setCleanupThreshold","threshold","createWebhookLimiter","options","defaultOptions","message","standardHeaders","legacyHeaders","createGeneralLimiter","createStrictLimiter","createSecureRateLimiter","limiter","req","res","next","ip","connection","remoteAddress","socket","headers","split","trim","process","env","NODE_ENV","createCommandRateLimiter"],"sources":["rate-limiter.js"],"sourcesContent":["// rate-limiter.js\n// Rate limiting utilities for Discord commands and webhook requests\n\nimport rateLimit from 'express-rate-limit';\n\n/**\n * Command rate limiter class for Discord bot commands\n * Implements in-memory rate limiting with automatic cleanup\n */\nexport class CommandRateLimit {\n  constructor(maxCommands = 5, windowMs = 60000) {\n    this.maxCommands = maxCommands;\n    this.windowMs = windowMs;\n    this.users = new Map();\n    this.cleanupThreshold = 1000; // Cleanup when this many users are stored\n  }\n\n  /**\n   * Check if a user is allowed to execute a command\n   * @param {string} userId - Discord user ID\n   * @returns {boolean} - True if user is allowed, false if rate limited\n   */\n  isAllowed(userId) {\n    const now = Date.now();\n    const userData = this.users.get(userId) || { count: 0, resetTime: now + this.windowMs };\n\n    // Reset if window has passed\n    if (now >= userData.resetTime) {\n      userData.count = 0;\n      userData.resetTime = now + this.windowMs;\n    }\n\n    // Check if user has exceeded limit\n    if (userData.count >= this.maxCommands) {\n      return false;\n    }\n\n    // Increment counter\n    userData.count++;\n    this.users.set(userId, userData);\n\n    // Clean up old entries periodically\n    if (this.users.size > this.cleanupThreshold) {\n      this.cleanup();\n    }\n\n    return true;\n  }\n\n  /**\n   * Clean up expired user entries\n   */\n  cleanup() {\n    const now = Date.now();\n    for (const [userId, userData] of this.users.entries()) {\n      if (now >= userData.resetTime) {\n        this.users.delete(userId);\n      }\n    }\n  }\n\n  /**\n   * Get remaining time until user's rate limit resets\n   * @param {string} userId - Discord user ID\n   * @returns {number} - Remaining time in milliseconds\n   */\n  getRemainingTime(userId) {\n    const userData = this.users.get(userId);\n    if (!userData) {\n      return 0;\n    }\n    return Math.max(0, userData.resetTime - Date.now());\n  }\n\n  /**\n   * Get current usage count for a user\n   * @param {string} userId - Discord user ID\n   * @returns {number} - Current command count\n   */\n  getUserCount(userId) {\n    const userData = this.users.get(userId);\n    if (!userData) {\n      return 0;\n    }\n\n    const now = Date.now();\n    if (now >= userData.resetTime) {\n      return 0; // Window has expired\n    }\n\n    return userData.count;\n  }\n\n  /**\n   * Get rate limit statistics\n   * @returns {Object} - Statistics object\n   */\n  getStats() {\n    return {\n      maxCommands: this.maxCommands,\n      windowMs: this.windowMs,\n      activeUsers: this.users.size,\n      cleanupThreshold: this.cleanupThreshold,\n    };\n  }\n\n  /**\n   * Reset rate limits for a specific user\n   * @param {string} userId - Discord user ID\n   */\n  resetUser(userId) {\n    this.users.delete(userId);\n  }\n\n  /**\n   * Reset all rate limits\n   */\n  resetAll() {\n    this.users.clear();\n  }\n\n  /**\n   * Set cleanup threshold\n   * @param {number} threshold - New cleanup threshold\n   */\n  setCleanupThreshold(threshold) {\n    this.cleanupThreshold = Math.max(100, threshold);\n  }\n}\n\n/**\n * Create a webhook rate limiter for Express\n * @param {Object} options - Rate limiter configuration\n * @returns {Function} - Express middleware function\n */\nexport function createWebhookLimiter(options = {}) {\n  const defaultOptions = {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n    message: 'Too many webhook requests from this IP, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false,\n  };\n\n  return rateLimit({ ...defaultOptions, ...options });\n}\n\n/**\n * Create a general purpose rate limiter\n * @param {Object} options - Rate limiter configuration\n * @returns {Function} - Express middleware function\n */\nexport function createGeneralLimiter(options = {}) {\n  const defaultOptions = {\n    windowMs: 60 * 1000, // 1 minute\n    max: 60, // limit each IP to 60 requests per minute\n    message: 'Too many requests from this IP, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false,\n  };\n\n  return rateLimit({ ...defaultOptions, ...options });\n}\n\n/**\n * Create a strict rate limiter for sensitive endpoints\n * @param {Object} options - Rate limiter configuration\n * @returns {Function} - Express middleware function\n */\nexport function createStrictLimiter(options = {}) {\n  const defaultOptions = {\n    windowMs: 60 * 1000, // 1 minute\n    max: 10, // limit each IP to 10 requests per minute\n    message: 'Too many requests from this IP, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false,\n  };\n\n  return rateLimit({ ...defaultOptions, ...options });\n}\n\n/**\n * Rate limiting middleware factory with IP validation\n * @param {Object} options - Configuration options\n * @returns {Function} - Express middleware function\n */\nexport function createSecureRateLimiter(options = {}) {\n  const limiter = createGeneralLimiter(options);\n\n  return (req, res, next) => {\n    // Get IP address from various sources\n    const ip =\n      req.ip ||\n      req.connection.remoteAddress ||\n      req.socket.remoteAddress ||\n      (req.headers['x-forwarded-for'] || '').split(',')[0].trim();\n\n    // Basic IP validation\n    if (!ip || ip === '::1' || ip === '127.0.0.1') {\n      // Allow localhost in development\n      if (process.env.NODE_ENV === 'development') {\n        return next();\n      }\n    }\n\n    // Apply rate limiting\n    return limiter(req, res, next);\n  };\n}\n\n/**\n * Utility function to create a command rate limiter instance\n * @param {Object} options - Configuration options\n * @returns {CommandRateLimit} - New command rate limiter instance\n */\nexport function createCommandRateLimiter(options = {}) {\n  const { maxCommands = 5, windowMs = 60000 } = options;\n  return new CommandRateLimit(maxCommands, windowMs);\n}\n"],"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","ignoreList":[]}