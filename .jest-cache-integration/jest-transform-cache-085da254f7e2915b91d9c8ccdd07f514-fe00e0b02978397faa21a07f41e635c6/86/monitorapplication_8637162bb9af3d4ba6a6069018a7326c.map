{"version":3,"names":["cov_1mtuwn15dx","actualCoverage","DuplicateDetector","crypto","MonitorApplication","constructor","dependencies","f","s","youtube","youtubeService","http","httpService","classifier","contentClassifier","announcer","contentAnnouncer","config","state","stateManager","eventBus","logger","youtubeChannelId","getRequired","youtubeApiKey","callbackUrl","webhookSecret","get","verifyToken","webhookDebugEnabled","getBoolean","fallbackEnabled","duplicateDetector","isRunning","subscriptionActive","fallbackTimerId","stats","subscriptions","webhooksReceived","videosProcessed","videosAnnounced","fallbackPolls","lastSubscriptionTime","lastWebhookTime","lastError","xmlParseFailures","start","b","Error","info","validateYouTubeAccess","subscribeToPubSubHubbub","emit","startTime","Date","error","stop","stopFallbackPolling","unsubscribeFromPubSubHubbub","stopTime","getStats","_channelDetails$snipp","channelDetails","getChannelDetails","snippet","title","message","hubUrl","topicUrl","subscriptionData","URLSearchParams","logWebhookDebug","leaseSeconds","response","post","toString","headers","status","statusText","success","isSuccessResponse","scheduleSubscriptionRenewal","stack","unsubscriptionData","warn","setTimeout","scheduleApiFallback","debug","performApiFallback","videos","getChannelVideos","length","video","processVideo","id","clearTimeout","handleWebhook","request","now","method","timestamp","toISOString","sanitizeHeaders","bodyLength","body","bodyType","query","remoteAddress","contentType","signatureResult","verifyWebhookSignatureDebug","isValid","details","signatureMethod","secretLength","verificationResult","handleVerificationRequest","result","notificationResult","handleNotification","bodyPreview","getBodyPreview","processingTime","requestMethod","signature","debugDetails","hasSignatureHeader","signatureReceived","secretConfigured","reason","expectedSignature","createHmac","update","digest","signatureMatch","timingSafeEqual","Buffer","from","verifyWebhookSignature","data","webhookDebug","sanitized","bodyStr","substring","challenge","mode","notificationId","_videoDetails$snippet","_videoDetails$snippet2","_videoDetails$snippet3","isEmpty","videoInfo","parseNotificationXML","videoId","videoTitle","videoDetails","getVideoDetails","found","liveBroadcastContent","publishedAt","source","fallbackWillTrigger","xmlBody","videoIdMatch","match","titleMatch","linkMatch","link","_video$snippet","_video$snippet2","_video$snippet3","url","isDuplicate","isNewContent","classification","classifyYouTubeContent","content","platform","type","channelTitle","announceContent","markAsSeen","skipped","_video$snippet4","botStartTime","publishTime","duplicateDetectorStats","dispose"],"sources":["monitor-application.js"],"sourcesContent":["import { DuplicateDetector } from '../duplicate-detector.js';\nimport crypto from 'crypto';\n\n/**\n * YouTube monitoring application orchestrator\n * Coordinates PubSubHubbub subscriptions, webhook handling, and content announcements\n */\nexport class MonitorApplication {\n  constructor(dependencies) {\n    this.youtube = dependencies.youtubeService;\n    this.http = dependencies.httpService;\n    this.classifier = dependencies.contentClassifier;\n    this.announcer = dependencies.contentAnnouncer;\n    this.config = dependencies.config;\n    this.state = dependencies.stateManager;\n    this.eventBus = dependencies.eventBus;\n    this.logger = dependencies.logger;\n\n    // YouTube configuration\n    this.youtubeChannelId = this.config.getRequired('YOUTUBE_CHANNEL_ID');\n    this.youtubeApiKey = this.config.getRequired('YOUTUBE_API_KEY');\n\n    // PubSubHubbub configuration\n    this.callbackUrl = this.config.getRequired('PSH_CALLBACK_URL');\n    this.webhookSecret = this.config.get('PSH_SECRET', 'your_super_secret_string_here');\n    this.verifyToken = this.config.get('PSH_VERIFY_TOKEN', 'your_optional_verify_token');\n\n    // Webhook debugging configuration\n    this.webhookDebugEnabled = this.config.getBoolean('WEBHOOK_DEBUG_LOGGING', false);\n\n    // API fallback configuration (triggered only on notification failures)\n    this.fallbackEnabled = true;\n\n    // State management\n    this.duplicateDetector = new DuplicateDetector();\n    this.isRunning = false;\n    this.subscriptionActive = false;\n    this.fallbackTimerId = null;\n\n    // Statistics\n    this.stats = {\n      subscriptions: 0,\n      webhooksReceived: 0,\n      videosProcessed: 0,\n      videosAnnounced: 0,\n      fallbackPolls: 0,\n      lastSubscriptionTime: null,\n      lastWebhookTime: null,\n      lastError: null,\n      xmlParseFailures: 0,\n    };\n  }\n\n  /**\n   * Start YouTube content monitoring\n   * @returns {Promise<void>}\n   */\n  async start() {\n    if (this.isRunning) {\n      throw new Error('Monitor application is already running');\n    }\n\n    try {\n      this.logger.info('Starting YouTube monitor application...');\n\n      // Validate YouTube API access\n      await this.validateYouTubeAccess();\n\n      // Subscribe to PubSubHubbub\n      await this.subscribeToPubSubHubbub();\n\n      // Fallback system is only triggered on notification processing failures\n\n      this.isRunning = true;\n      this.logger.info('âœ… YouTube monitor application started successfully');\n\n      // Emit start event\n      this.eventBus.emit('monitor.started', {\n        startTime: new Date(),\n        youtubeChannelId: this.youtubeChannelId,\n        callbackUrl: this.callbackUrl,\n        fallbackEnabled: this.fallbackEnabled,\n      });\n    } catch (error) {\n      this.logger.error('Failed to start monitor application:', error);\n      await this.stop();\n      throw error;\n    }\n  }\n\n  /**\n   * Stop YouTube content monitoring\n   * @returns {Promise<void>}\n   */\n  async stop() {\n    if (!this.isRunning) {\n      return;\n    }\n\n    try {\n      this.logger.info('Stopping YouTube monitor application...');\n\n      // Stop fallback polling\n      this.stopFallbackPolling();\n\n      // Unsubscribe from PubSubHubbub\n      await this.unsubscribeFromPubSubHubbub();\n\n      this.isRunning = false;\n      this.logger.info('YouTube monitor application stopped');\n\n      // Emit stop event\n      this.eventBus.emit('monitor.stopped', {\n        stopTime: new Date(),\n        stats: this.getStats(),\n      });\n    } catch (error) {\n      this.logger.error('Error stopping monitor application:', error);\n    }\n  }\n\n  /**\n   * Validate YouTube API access\n   * @returns {Promise<void>}\n   */\n  async validateYouTubeAccess() {\n    try {\n      this.logger.info('Validating YouTube API access...');\n\n      // Test API key by fetching channel details\n      const channelDetails = await this.youtube.getChannelDetails(this.youtubeChannelId);\n\n      if (!channelDetails) {\n        throw new Error('Failed to fetch YouTube channel details');\n      }\n\n      this.logger.info(`YouTube API validated. Monitoring channel: ${channelDetails.snippet?.title || 'Unknown'}`);\n    } catch (error) {\n      this.logger.error('YouTube API validation failed:', error);\n      throw new Error(`YouTube API validation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Subscribe to PubSubHubbub for real-time notifications\n   * @returns {Promise<void>}\n   */\n  async subscribeToPubSubHubbub() {\n    try {\n      this.logger.info('Subscribing to PubSubHubbub...');\n\n      const hubUrl = 'https://pubsubhubbub.appspot.com/subscribe';\n      const topicUrl = `https://www.youtube.com/xml/feeds/videos.xml?channel_id=${this.youtubeChannelId}`;\n\n      const subscriptionData = new URLSearchParams({\n        'hub.callback': this.callbackUrl,\n        'hub.topic': topicUrl,\n        'hub.verify': 'async',\n        'hub.mode': 'subscribe',\n        'hub.verify_token': this.verifyToken,\n        'hub.lease_seconds': '86400', // 24 hours\n      });\n\n      this.logWebhookDebug('PUBSUBHUBBUB SUBSCRIPTION REQUEST', {\n        hubUrl,\n        topicUrl,\n        callbackUrl: this.callbackUrl,\n        verifyToken: this.verifyToken ? '[SET]' : '[NOT_SET]',\n        leaseSeconds: '86400',\n      });\n\n      const response = await this.http.post(hubUrl, subscriptionData.toString(), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      this.logWebhookDebug('PUBSUBHUBBUB SUBSCRIPTION RESPONSE', {\n        status: response.status,\n        statusText: response.statusText || 'unknown',\n        headers: response.headers || {},\n        success: this.http.isSuccessResponse(response),\n      });\n\n      if (this.http.isSuccessResponse(response)) {\n        this.subscriptionActive = true;\n        this.stats.subscriptions++;\n        this.stats.lastSubscriptionTime = new Date();\n        this.logger.info('Successfully subscribed to PubSubHubbub');\n\n        // Schedule subscription renewal\n        this.scheduleSubscriptionRenewal();\n      } else {\n        throw new Error(`Subscription failed with status: ${response.status}`);\n      }\n    } catch (error) {\n      this.logWebhookDebug('PUBSUBHUBBUB SUBSCRIPTION ERROR', {\n        error: error.message,\n        stack: error.stack,\n      });\n      this.logger.error('PubSubHubbub subscription failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Unsubscribe from PubSubHubbub\n   * @returns {Promise<void>}\n   */\n  async unsubscribeFromPubSubHubbub() {\n    if (!this.subscriptionActive) {\n      return;\n    }\n\n    try {\n      this.logger.info('Unsubscribing from PubSubHubbub...');\n\n      const hubUrl = 'https://pubsubhubbub.appspot.com/subscribe';\n      const topicUrl = `https://www.youtube.com/xml/feeds/videos.xml?channel_id=${this.youtubeChannelId}`;\n\n      const unsubscriptionData = new URLSearchParams({\n        'hub.callback': this.callbackUrl,\n        'hub.topic': topicUrl,\n        'hub.verify': 'async',\n        'hub.mode': 'unsubscribe',\n        'hub.verify_token': this.verifyToken,\n      });\n\n      const response = await this.http.post(hubUrl, unsubscriptionData.toString(), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      if (this.http.isSuccessResponse(response)) {\n        this.subscriptionActive = false;\n        this.logger.info('Successfully unsubscribed from PubSubHubbub');\n      } else {\n        this.logger.warn(`Unsubscription failed with status: ${response.status}`);\n      }\n    } catch (error) {\n      this.logger.error('PubSubHubbub unsubscription failed:', error);\n    }\n  }\n\n  /**\n   * Schedule automatic subscription renewal\n   */\n  scheduleSubscriptionRenewal() {\n    // Renew subscription every 20 hours (4 hours before expiry)\n    setTimeout(\n      async () => {\n        if (this.isRunning && this.subscriptionActive) {\n          try {\n            await this.subscribeToPubSubHubbub();\n          } catch (error) {\n            this.logger.error('Subscription renewal failed:', error);\n          }\n        }\n      },\n      20 * 60 * 60 * 1000\n    ); // 20 hours\n  }\n\n  /**\n   * Schedule API fallback check when notification processing fails\n   * This replaces the old automatic polling system\n   */\n  scheduleApiFallback() {\n    if (!this.fallbackEnabled) {\n      this.logger.warn('API fallback is disabled');\n      return;\n    }\n\n    if (this.fallbackTimerId) {\n      this.logger.debug('API fallback already scheduled, skipping');\n      return;\n    }\n\n    this.logger.warn('Scheduling API fallback due to notification processing failure');\n\n    this.fallbackTimerId = setTimeout(async () => {\n      try {\n        await this.performApiFallback();\n      } catch (error) {\n        this.logger.error('API fallback execution failed:', error);\n      } finally {\n        this.fallbackTimerId = null;\n      }\n    }, 30000); // 30 second delay to allow for temporary issues\n  }\n\n  /**\n   * Perform API fallback check for new videos\n   * This is only called when notification processing fails\n   */\n  async performApiFallback() {\n    try {\n      this.stats.fallbackPolls++;\n      this.logger.warn('Performing API fallback check due to notification failure...');\n\n      // Get latest videos from the channel\n      const videos = await this.youtube.getChannelVideos(this.youtubeChannelId, 5);\n\n      if (!videos || videos.length === 0) {\n        this.logger.debug('No videos found in API fallback check');\n        return;\n      }\n\n      this.logger.warn(`API fallback found ${videos.length} videos from YouTube API.`);\n\n      // Process each video\n      for (const video of videos) {\n        try {\n          this.logger.warn(`Processing video from API fallback: ${video.snippet.title}`);\n          await this.processVideo(video, 'api-fallback');\n        } catch (error) {\n          this.logger.error(`Error processing video ${video.id} in API fallback:`, error);\n        }\n      }\n\n      this.logger.info('API fallback check completed successfully');\n    } catch (error) {\n      this.logger.error('API fallback check failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop and clear any scheduled fallback\n   */\n  stopFallbackPolling() {\n    if (this.fallbackTimerId) {\n      clearTimeout(this.fallbackTimerId);\n      this.fallbackTimerId = null;\n      this.logger.info('Scheduled API fallback cleared');\n    }\n  }\n\n  /**\n   * Handle PubSubHubbub webhook notification\n   * @param {Object} request - Webhook request object\n   * @returns {Promise<Object>} Response object\n   */\n  async handleWebhook(request) {\n    const startTime = Date.now();\n\n    try {\n      this.stats.webhooksReceived++;\n      this.stats.lastWebhookTime = new Date();\n\n      // Enhanced webhook debugging\n      this.logWebhookDebug('=== WEBHOOK REQUEST RECEIVED ===', {\n        method: request.method,\n        timestamp: new Date().toISOString(),\n        headers: this.sanitizeHeaders(request.headers),\n        bodyLength: request.body ? request.body.length : 0,\n        bodyType: typeof request.body,\n        query: request.query || {},\n        remoteAddress: request.headers['x-forwarded-for'] || request.headers['x-real-ip'] || 'unknown',\n      });\n\n      this.logger.info('Received PubSubHubbub webhook notification', {\n        method: request.method,\n        contentType: request.headers['content-type'],\n        bodyLength: request.body ? request.body.length : 0,\n      });\n\n      // Verify webhook signature\n      const signatureResult = this.verifyWebhookSignatureDebug(request.body, request.headers);\n      if (!signatureResult.isValid) {\n        this.logWebhookDebug('WEBHOOK SIGNATURE VERIFICATION FAILED', signatureResult.details);\n        this.logger.warn('Webhook signature verification failed', signatureResult.details);\n        return { status: 403, message: 'Invalid signature' };\n      }\n\n      this.logWebhookDebug('WEBHOOK SIGNATURE VERIFIED', {\n        signatureMethod: signatureResult.details.method,\n        secretLength: this.webhookSecret.length,\n      });\n\n      // Handle verification request\n      if (request.method === 'GET') {\n        const verificationResult = this.handleVerificationRequest(request.query);\n        this.logWebhookDebug('WEBHOOK VERIFICATION REQUEST', {\n          query: request.query,\n          result: verificationResult,\n        });\n        return verificationResult;\n      }\n\n      // Handle notification\n      if (request.method === 'POST') {\n        const notificationResult = await this.handleNotification(request.body);\n        this.logWebhookDebug('WEBHOOK NOTIFICATION PROCESSED', {\n          bodyPreview: this.getBodyPreview(request.body),\n          processingTime: Date.now() - startTime,\n          result: notificationResult,\n        });\n        return notificationResult;\n      }\n\n      this.logWebhookDebug('WEBHOOK METHOD NOT ALLOWED', { method: request.method });\n      return { status: 405, message: 'Method not allowed' };\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      this.logWebhookDebug('WEBHOOK ERROR', {\n        error: error.message,\n        stack: error.stack,\n        processingTime,\n        requestMethod: request.method,\n        bodyLength: request.body ? request.body.length : 0,\n      });\n\n      this.logger.error('Webhook handling error:', error);\n      this.stats.lastError = error.message;\n      return { status: 500, message: 'Internal server error' };\n    }\n  }\n\n  /**\n   * Verify webhook signature with detailed debugging information\n   * @param {string|Buffer} body - Request body\n   * @param {Object} headers - Request headers\n   * @returns {Object} Validation result with debugging details\n   */\n  verifyWebhookSignatureDebug(body, headers) {\n    const signature = headers['x-hub-signature'];\n    const debugDetails = {\n      hasSignatureHeader: !!signature,\n      signatureReceived: signature || 'none',\n      bodyLength: body ? body.length : 0,\n      secretConfigured: !!this.webhookSecret,\n      secretLength: this.webhookSecret ? this.webhookSecret.length : 0,\n      method: 'HMAC-SHA1',\n    };\n\n    if (!signature) {\n      return {\n        isValid: false,\n        details: { ...debugDetails, reason: 'No x-hub-signature header provided' },\n      };\n    }\n\n    if (!this.webhookSecret) {\n      return {\n        isValid: false,\n        details: { ...debugDetails, reason: 'No webhook secret configured' },\n      };\n    }\n\n    const expectedSignature = `sha1=${crypto.createHmac('sha1', this.webhookSecret).update(body).digest('hex')}`;\n    debugDetails.expectedSignature = expectedSignature;\n    debugDetails.signatureMatch = signature === expectedSignature;\n\n    try {\n      const isValid = crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expectedSignature));\n      return {\n        isValid,\n        details: { ...debugDetails, reason: isValid ? 'Signature valid' : 'Signature mismatch' },\n      };\n    } catch (error) {\n      return {\n        isValid: false,\n        details: {\n          ...debugDetails,\n          reason: `Signature comparison failed: ${error.message}`,\n          error: error.message,\n        },\n      };\n    }\n  }\n\n  /**\n   * Verify webhook signature (legacy method for backward compatibility)\n   * @param {string|Buffer} body - Request body\n   * @param {Object} headers - Request headers\n   * @returns {boolean} True if signature is valid\n   */\n  verifyWebhookSignature(body, headers) {\n    return this.verifyWebhookSignatureDebug(body, headers).isValid;\n  }\n\n  /**\n   * Log webhook debugging information\n   * @param {string} message - Debug message\n   * @param {Object} data - Additional data to log\n   */\n  logWebhookDebug(message, data = {}) {\n    if (!this.webhookDebugEnabled) {\n      return;\n    }\n\n    // Always log webhook debug info at INFO level when debugging is enabled\n    this.logger.info(`[WEBHOOK-DEBUG] ${message}`, {\n      webhookDebug: true,\n      timestamp: new Date().toISOString(),\n      ...data,\n    });\n  }\n\n  /**\n   * Sanitize headers for logging (remove sensitive information)\n   * @param {Object} headers - Request headers\n   * @returns {Object} Sanitized headers\n   */\n  sanitizeHeaders(headers) {\n    const sanitized = { ...headers };\n\n    // Remove or mask sensitive headers\n    if (sanitized['authorization']) {\n      sanitized['authorization'] = '[REDACTED]';\n    }\n    if (sanitized['x-hub-signature']) {\n      sanitized['x-hub-signature'] = `[SIGNATURE:${sanitized['x-hub-signature'].length}chars]`;\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Get a safe preview of the request body for logging\n   * @param {string|Buffer} body - Request body\n   * @returns {string} Body preview\n   */\n  getBodyPreview(body) {\n    if (!body) {\n      return '[EMPTY]';\n    }\n\n    const bodyStr = body.toString();\n\n    // Return first 200 characters for preview\n    if (bodyStr.length <= 200) {\n      return bodyStr;\n    }\n\n    return `${bodyStr.substring(0, 200)}... [TRUNCATED:${bodyStr.length}total]`;\n  }\n\n  /**\n   * Handle verification request from PubSubHubbub hub\n   * @param {Object} query - Query parameters\n   * @returns {Object} Response object\n   */\n  handleVerificationRequest(query) {\n    const challenge = query['hub.challenge'];\n    const verifyToken = query['hub.verify_token'];\n    const mode = query['hub.mode'];\n\n    if (verifyToken !== this.verifyToken) {\n      this.logger.warn('Verification token mismatch');\n      return { status: 403, message: 'Invalid verify token' };\n    }\n\n    this.logger.info(`PubSubHubbub verification successful (mode: ${mode})`);\n    return { status: 200, body: challenge };\n  }\n\n  /**\n   * Handle notification from PubSubHubbub\n   * @param {string} body - XML notification body\n   * @returns {Promise<Object>} Response object\n   */\n  async handleNotification(body) {\n    const notificationId = Date.now().toString(36);\n\n    try {\n      this.logWebhookDebug('NOTIFICATION PROCESSING START', {\n        notificationId,\n        bodyLength: body ? body.length : 0,\n        bodyType: typeof body,\n        isEmpty: !body || body.length === 0,\n      });\n\n      // Parse XML to extract video information\n      const videoInfo = this.parseNotificationXML(body);\n\n      this.logWebhookDebug('XML PARSING RESULT', {\n        notificationId,\n        success: !!videoInfo,\n        videoInfo: videoInfo || 'parsing_failed',\n        bodyPreview: this.getBodyPreview(body),\n      });\n\n      if (!videoInfo) {\n        this.logger.warn('Failed to parse notification XML');\n        this.stats.xmlParseFailures++;\n        this.logWebhookDebug('XML PARSING FAILED', {\n          notificationId,\n          xmlParseFailures: this.stats.xmlParseFailures,\n          bodyPreview: this.getBodyPreview(body),\n        });\n        return { status: 400, message: 'Invalid XML' };\n      }\n\n      this.logWebhookDebug('FETCHING VIDEO DETAILS', {\n        notificationId,\n        videoId: videoInfo.videoId,\n        videoTitle: videoInfo.title || 'unknown',\n      });\n\n      // Fetch detailed video information\n      const videoDetails = await this.youtube.getVideoDetails(videoInfo.videoId);\n\n      this.logWebhookDebug('VIDEO DETAILS RESULT', {\n        notificationId,\n        videoId: videoInfo.videoId,\n        found: !!videoDetails,\n        title: videoDetails?.snippet?.title || 'not_available',\n        liveBroadcastContent: videoDetails?.snippet?.liveBroadcastContent || 'unknown',\n        publishedAt: videoDetails?.snippet?.publishedAt || 'unknown',\n      });\n\n      if (!videoDetails) {\n        this.logger.warn(`Could not fetch details for video: ${videoInfo.videoId}`);\n        this.logWebhookDebug('VIDEO DETAILS NOT FOUND', {\n          notificationId,\n          videoId: videoInfo.videoId,\n          reason: 'youtube_api_returned_null',\n        });\n        return { status: 200, message: 'OK' };\n      }\n\n      this.logWebhookDebug('PROCESSING VIDEO', {\n        notificationId,\n        videoId: videoInfo.videoId,\n        title: videoDetails.snippet.title,\n        liveBroadcastContent: videoDetails.snippet.liveBroadcastContent,\n        source: 'webhook',\n      });\n\n      // Process the video\n      await this.processVideo(videoDetails, 'webhook');\n\n      this.logWebhookDebug('NOTIFICATION PROCESSING COMPLETE', {\n        notificationId,\n        videoId: videoInfo.videoId,\n        title: videoDetails.snippet.title,\n        success: true,\n      });\n\n      this.logger.info(`Successfully processed webhook notification for video: ${videoDetails.snippet.title}`);\n      return { status: 200, message: 'OK' };\n    } catch (error) {\n      this.logWebhookDebug('NOTIFICATION PROCESSING ERROR', {\n        notificationId,\n        error: error.message,\n        stack: error.stack,\n        fallbackWillTrigger: this.fallbackEnabled,\n      });\n\n      this.logger.error('Notification processing error:', error);\n\n      // Trigger API fallback on notification processing error\n      if (this.fallbackEnabled) {\n        this.scheduleApiFallback();\n        this.logWebhookDebug('API FALLBACK SCHEDULED', {\n          notificationId,\n          reason: 'notification_processing_error',\n        });\n      }\n\n      return { status: 200, message: 'OK' }; // Always return 200 to prevent retry spam\n    }\n  }\n\n  /**\n   * Parse PubSubHubbub notification XML\n   * @param {string} xmlBody - XML content\n   * @returns {Object|null} Parsed video information\n   */\n  parseNotificationXML(xmlBody) {\n    try {\n      // Simple regex-based XML parsing for YouTube feeds\n      const videoIdMatch = xmlBody.match(/<yt:videoId>([^<]+)<\\/yt:videoId>/);\n      const titleMatch = xmlBody.match(/<media:title>([^<]+)<\\/media:title>/);\n      const linkMatch = xmlBody.match(/<link rel=\"alternate\" href=\"([^\"]+)\"/);\n\n      if (!videoIdMatch) {\n        return null;\n      }\n\n      return {\n        videoId: videoIdMatch[1],\n        title: titleMatch ? titleMatch[1] : null,\n        link: linkMatch ? linkMatch[1] : null,\n      };\n    } catch (error) {\n      this.logger.error('XML parsing error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Process a video for potential announcement\n   * @param {Object} video - Video object from YouTube API\n   * @param {string} source - Source of the video ('webhook' or 'fallback')\n   * @returns {Promise<void>}\n   */\n  async processVideo(video, source = 'unknown') {\n    try {\n      this.stats.videosProcessed++;\n\n      const videoId = video.id;\n      const title = video.snippet?.title || 'Unknown title';\n      const url = `https://www.youtube.com/watch?v=${videoId}`;\n\n      // Check for duplicates\n      if (this.duplicateDetector.isDuplicate(url)) {\n        this.logger.debug(`Duplicate video detected: ${title} (${videoId})`);\n        return;\n      }\n\n      // Check if video is new enough\n      if (!this.isNewContent(video)) {\n        this.logger.debug(`Video is too old: ${title} (${videoId})`);\n        return;\n      }\n\n      // Classify the video\n      const classification = this.classifier.classifyYouTubeContent(video);\n\n      // Create content object\n      const content = {\n        platform: 'youtube',\n        type: classification.type,\n        id: videoId,\n        url,\n        title,\n        channelTitle: video.snippet?.channelTitle,\n        publishedAt: video.snippet?.publishedAt,\n        ...classification.details,\n      };\n\n      // Announce the content\n      const result = await this.announcer.announceContent(content);\n\n      if (result.success) {\n        this.stats.videosAnnounced++;\n        this.duplicateDetector.markAsSeen(url);\n        this.logger.info(`Announced ${classification.type}: ${title} (${videoId}) via ${source}`);\n      } else if (result.skipped) {\n        this.logger.debug(`Skipped ${classification.type}: ${title} - ${result.reason}`);\n      } else {\n        this.logger.warn(`Failed to announce ${classification.type}: ${title} - ${result.reason}`);\n      }\n\n      // Emit video processed event\n      this.eventBus.emit('monitor.video.processed', {\n        video: content,\n        classification,\n        result,\n        source,\n        timestamp: new Date(),\n      });\n    } catch (error) {\n      this.logger.error(`Error processing video ${video.id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if video content is new enough to announce\n   * @param {Object} video - Video object\n   * @returns {boolean} True if content is new\n   */\n  isNewContent(video) {\n    const botStartTime = this.state.get('botStartTime');\n    if (!botStartTime) {\n      return true; // If no start time set, consider all content new\n    }\n\n    const publishedAt = video.snippet?.publishedAt;\n    if (!publishedAt) {\n      return true; // If no publish time available, assume it's new\n    }\n\n    const publishTime = new Date(publishedAt);\n    return publishTime >= botStartTime;\n  }\n\n  /**\n   * Check if monitor is running\n   * @returns {boolean} True if running\n   */\n  isRunning() {\n    return this.isRunning;\n  }\n\n  /**\n   * Get monitor statistics\n   * @returns {Object} Statistics object\n   */\n  getStats() {\n    return {\n      isRunning: this.isRunning,\n      subscriptionActive: this.subscriptionActive,\n      youtubeChannelId: this.youtubeChannelId,\n      callbackUrl: this.callbackUrl,\n      fallbackEnabled: this.fallbackEnabled,\n      ...this.stats,\n      duplicateDetectorStats: this.duplicateDetector.getStats(),\n    };\n  }\n\n  /**\n   * Dispose of resources\n   * @returns {Promise<void>}\n   */\n  async dispose() {\n    await this.stop();\n  }\n}\n"],"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","ignoreList":[]}