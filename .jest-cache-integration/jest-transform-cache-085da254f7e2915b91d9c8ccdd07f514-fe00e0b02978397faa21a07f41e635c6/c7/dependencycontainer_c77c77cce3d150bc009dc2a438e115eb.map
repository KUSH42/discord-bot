{"version":3,"names":["cov_1nrwckxf6x","actualCoverage","DependencyContainer","constructor","f","s","services","Map","instances","scoped","register","token","factory","options","b","Error","set","singleton","dependencies","initialized","registerSingleton","registerTransient","registerInstance","instance","resolve","has","get","service","createInstance","resolvedDependencies","map","dep","undefined","error","message","isRegistered","getRegisteredTokens","Set","keys","createScope","scopedContainer","entries","clearInstances","clear","values","dispose","disposePromises","result","then","push","console","Promise","all","validate","visited","visiting","visitService","add","delete"],"sources":["dependency-container.js"],"sourcesContent":["/**\n * Dependency Injection Container for managing service dependencies\n */\nexport class DependencyContainer {\n  constructor() {\n    this.services = new Map();\n    this.instances = new Map();\n    this.scoped = false;\n  }\n\n  /**\n   * Register a service with a factory function\n   * @param {string} token - Service identifier\n   * @param {Function} factory - Factory function that creates the service\n   * @param {Object} options - Registration options\n   */\n  register(token, factory, options = {}) {\n    if (typeof token !== 'string') {\n      throw new Error('Service token must be a string');\n    }\n\n    if (typeof factory !== 'function') {\n      throw new Error('Service factory must be a function');\n    }\n\n    this.services.set(token, {\n      factory,\n      singleton: options.singleton !== false, // Default to singleton\n      dependencies: options.dependencies || [],\n      initialized: false,\n    });\n\n    return this;\n  }\n\n  /**\n   * Register a singleton service (same as register with singleton: true)\n   */\n  registerSingleton(token, factory, options = {}) {\n    return this.register(token, factory, { ...options, singleton: true });\n  }\n\n  /**\n   * Register a transient service (new instance each time)\n   */\n  registerTransient(token, factory, options = {}) {\n    return this.register(token, factory, { ...options, singleton: false });\n  }\n\n  /**\n   * Register an instance directly\n   */\n  registerInstance(token, instance) {\n    if (typeof token !== 'string') {\n      throw new Error('Service token must be a string');\n    }\n\n    this.instances.set(token, instance);\n    return this;\n  }\n\n  /**\n   * Resolve a service by token\n   * @param {string} token - Service identifier\n   * @returns {*} The service instance\n   */\n  resolve(token) {\n    if (typeof token !== 'string') {\n      throw new Error('Service token must be a string');\n    }\n\n    // Check for direct instance first\n    if (this.instances.has(token)) {\n      return this.instances.get(token);\n    }\n\n    // Check for registered service\n    if (!this.services.has(token)) {\n      throw new Error(`Service '${token}' is not registered`);\n    }\n\n    const service = this.services.get(token);\n\n    // Return existing singleton instance if available\n    if (service.singleton && service.initialized && this.instances.has(token)) {\n      return this.instances.get(token);\n    }\n\n    // Create new instance\n    const instance = this.createInstance(token, service);\n\n    // Store singleton instance\n    if (service.singleton) {\n      this.instances.set(token, instance);\n      service.initialized = true;\n    }\n\n    return instance;\n  }\n\n  /**\n   * Create a new instance using the factory\n   */\n  createInstance(token, service) {\n    try {\n      // Resolve dependencies\n      const resolvedDependencies = service.dependencies.map((dep) => this.resolve(dep));\n\n      // Call factory with dependencies\n      const instance = service.factory(this, ...resolvedDependencies);\n\n      if (instance === undefined) {\n        throw new Error(`Factory for '${token}' returned undefined`);\n      }\n\n      return instance;\n    } catch (error) {\n      throw new Error(`Failed to create instance of '${token}': ${error.message}`);\n    }\n  }\n\n  /**\n   * Check if a service is registered\n   */\n  isRegistered(token) {\n    return this.services.has(token) || this.instances.has(token);\n  }\n\n  /**\n   * Get all registered service tokens\n   */\n  getRegisteredTokens() {\n    return [...new Set([...this.services.keys(), ...this.instances.keys()])];\n  }\n\n  /**\n   * Create a scoped container for testing\n   */\n  createScope() {\n    const scopedContainer = new DependencyContainer();\n    scopedContainer.scoped = true;\n\n    // Copy service registrations (but not instances)\n    for (const [token, service] of this.services.entries()) {\n      scopedContainer.services.set(token, { ...service, initialized: false });\n    }\n\n    return scopedContainer;\n  }\n\n  /**\n   * Clear all instances (useful for testing)\n   */\n  clearInstances() {\n    this.instances.clear();\n\n    // Reset initialization flags\n    for (const service of this.services.values()) {\n      service.initialized = false;\n    }\n  }\n\n  /**\n   * Dispose of all instances that have a dispose method\n   */\n  async dispose() {\n    const disposePromises = [];\n\n    for (const instance of this.instances.values()) {\n      if (instance && typeof instance.dispose === 'function') {\n        try {\n          const result = instance.dispose();\n          if (result && typeof result.then === 'function') {\n            disposePromises.push(result);\n          }\n        } catch (error) {\n          console.error('Error disposing instance:', error);\n        }\n      }\n    }\n\n    await Promise.all(disposePromises);\n    this.clearInstances();\n  }\n\n  /**\n   * Validate container setup (check for circular dependencies)\n   */\n  validate() {\n    const visited = new Set();\n    const visiting = new Set();\n\n    const visitService = (token) => {\n      if (visiting.has(token)) {\n        throw new Error(`Circular dependency detected involving '${token}'`);\n      }\n\n      if (visited.has(token)) {\n        return;\n      }\n\n      visiting.add(token);\n\n      const service = this.services.get(token);\n      if (service && service.dependencies) {\n        for (const dep of service.dependencies) {\n          if (!this.isRegistered(dep)) {\n            throw new Error(`Dependency '${dep}' required by '${token}' is not registered`);\n          }\n          visitService(dep);\n        }\n      }\n\n      visiting.delete(token);\n      visited.add(token);\n    };\n\n    for (const token of this.services.keys()) {\n      visitService(token);\n    }\n\n    return true;\n  }\n}\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ;AACA;AACA;AACA,OAAO,MAAME,mBAAmB,CAAC;EAC/BC,WAAWA,CAAA,EAAG;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IACZ,IAAI,CAACC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC;IAAAP,cAAA,GAAAK,CAAA;IAC1B,IAAI,CAACG,SAAS,GAAG,IAAID,GAAG,CAAC,CAAC;IAAC;IAAAP,cAAA,GAAAK,CAAA;IAC3B,IAAI,CAACI,MAAM,GAAG,KAAK;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQA,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO;EAAA;EAAA,CAAAb,cAAA,GAAAc,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAAd,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IACrC,IAAI,OAAOM,KAAK,KAAK,QAAQ,EAAE;MAAA;MAAAX,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAK,CAAA;MAC7B,MAAM,IAAIU,KAAK,CAAC,gCAAgC,CAAC;IACnD,CAAC;IAAA;IAAA;MAAAf,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAK,CAAA;IAED,IAAI,OAAOO,OAAO,KAAK,UAAU,EAAE;MAAA;MAAAZ,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAK,CAAA;MACjC,MAAM,IAAIU,KAAK,CAAC,oCAAoC,CAAC;IACvD,CAAC;IAAA;IAAA;MAAAf,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAK,CAAA;IAED,IAAI,CAACC,QAAQ,CAACU,GAAG,CAACL,KAAK,EAAE;MACvBC,OAAO;MACPK,SAAS,EAAEJ,OAAO,CAACI,SAAS,KAAK,KAAK;MAAE;MACxCC,YAAY;MAAE;MAAA,CAAAlB,cAAA,GAAAc,CAAA,UAAAD,OAAO,CAACK,YAAY;MAAA;MAAA,CAAAlB,cAAA,GAAAc,CAAA,UAAI,EAAE;MACxCK,WAAW,EAAE;IACf,CAAC,CAAC;IAAC;IAAAnB,cAAA,GAAAK,CAAA;IAEH,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACEe,iBAAiBA,CAACT,KAAK,EAAEC,OAAO,EAAEC,OAAO;EAAA;EAAA,CAAAb,cAAA,GAAAc,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAAd,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IAC9C,OAAO,IAAI,CAACK,QAAQ,CAACC,KAAK,EAAEC,OAAO,EAAE;MAAE,GAAGC,OAAO;MAAEI,SAAS,EAAE;IAAK,CAAC,CAAC;EACvE;;EAEA;AACF;AACA;EACEI,iBAAiBA,CAACV,KAAK,EAAEC,OAAO,EAAEC,OAAO;EAAA;EAAA,CAAAb,cAAA,GAAAc,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAAd,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IAC9C,OAAO,IAAI,CAACK,QAAQ,CAACC,KAAK,EAAEC,OAAO,EAAE;MAAE,GAAGC,OAAO;MAAEI,SAAS,EAAE;IAAM,CAAC,CAAC;EACxE;;EAEA;AACF;AACA;EACEK,gBAAgBA,CAACX,KAAK,EAAEY,QAAQ,EAAE;IAAA;IAAAvB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IAChC,IAAI,OAAOM,KAAK,KAAK,QAAQ,EAAE;MAAA;MAAAX,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAK,CAAA;MAC7B,MAAM,IAAIU,KAAK,CAAC,gCAAgC,CAAC;IACnD,CAAC;IAAA;IAAA;MAAAf,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAK,CAAA;IAED,IAAI,CAACG,SAAS,CAACQ,GAAG,CAACL,KAAK,EAAEY,QAAQ,CAAC;IAAC;IAAAvB,cAAA,GAAAK,CAAA;IACpC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEmB,OAAOA,CAACb,KAAK,EAAE;IAAA;IAAAX,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IACb,IAAI,OAAOM,KAAK,KAAK,QAAQ,EAAE;MAAA;MAAAX,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAK,CAAA;MAC7B,MAAM,IAAIU,KAAK,CAAC,gCAAgC,CAAC;IACnD,CAAC;IAAA;IAAA;MAAAf,cAAA,GAAAc,CAAA;IAAA;;IAED;IAAAd,cAAA,GAAAK,CAAA;IACA,IAAI,IAAI,CAACG,SAAS,CAACiB,GAAG,CAACd,KAAK,CAAC,EAAE;MAAA;MAAAX,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAK,CAAA;MAC7B,OAAO,IAAI,CAACG,SAAS,CAACkB,GAAG,CAACf,KAAK,CAAC;IAClC,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAc,CAAA;IAAA;;IAED;IAAAd,cAAA,GAAAK,CAAA;IACA,IAAI,CAAC,IAAI,CAACC,QAAQ,CAACmB,GAAG,CAACd,KAAK,CAAC,EAAE;MAAA;MAAAX,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAK,CAAA;MAC7B,MAAM,IAAIU,KAAK,CAAC,YAAYJ,KAAK,qBAAqB,CAAC;IACzD,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAc,CAAA;IAAA;IAED,MAAMa,OAAO;IAAA;IAAA,CAAA3B,cAAA,GAAAK,CAAA,QAAG,IAAI,CAACC,QAAQ,CAACoB,GAAG,CAACf,KAAK,CAAC;;IAExC;IAAA;IAAAX,cAAA,GAAAK,CAAA;IACA;IAAI;IAAA,CAAAL,cAAA,GAAAc,CAAA,WAAAa,OAAO,CAACV,SAAS;IAAA;IAAA,CAAAjB,cAAA,GAAAc,CAAA,WAAIa,OAAO,CAACR,WAAW;IAAA;IAAA,CAAAnB,cAAA,GAAAc,CAAA,WAAI,IAAI,CAACN,SAAS,CAACiB,GAAG,CAACd,KAAK,CAAC,GAAE;MAAA;MAAAX,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAK,CAAA;MACzE,OAAO,IAAI,CAACG,SAAS,CAACkB,GAAG,CAACf,KAAK,CAAC;IAClC,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAc,CAAA;IAAA;;IAED;IACA,MAAMS,QAAQ;IAAA;IAAA,CAAAvB,cAAA,GAAAK,CAAA,QAAG,IAAI,CAACuB,cAAc,CAACjB,KAAK,EAAEgB,OAAO,CAAC;;IAEpD;IAAA;IAAA3B,cAAA,GAAAK,CAAA;IACA,IAAIsB,OAAO,CAACV,SAAS,EAAE;MAAA;MAAAjB,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAK,CAAA;MACrB,IAAI,CAACG,SAAS,CAACQ,GAAG,CAACL,KAAK,EAAEY,QAAQ,CAAC;MAAC;MAAAvB,cAAA,GAAAK,CAAA;MACpCsB,OAAO,CAACR,WAAW,GAAG,IAAI;IAC5B,CAAC;IAAA;IAAA;MAAAnB,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAK,CAAA;IAED,OAAOkB,QAAQ;EACjB;;EAEA;AACF;AACA;EACEK,cAAcA,CAACjB,KAAK,EAAEgB,OAAO,EAAE;IAAA;IAAA3B,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IAC7B,IAAI;MACF;MACA,MAAMwB,oBAAoB;MAAA;MAAA,CAAA7B,cAAA,GAAAK,CAAA,QAAGsB,OAAO,CAACT,YAAY,CAACY,GAAG,CAAEC,GAAG,IAAK;QAAA;QAAA/B,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAK,CAAA;QAAA,WAAI,CAACmB,OAAO,CAACO,GAAG,CAAC;MAAD,CAAC,CAAC;;MAEjF;MACA,MAAMR,QAAQ;MAAA;MAAA,CAAAvB,cAAA,GAAAK,CAAA,QAAGsB,OAAO,CAACf,OAAO,CAAC,IAAI,EAAE,GAAGiB,oBAAoB,CAAC;MAAC;MAAA7B,cAAA,GAAAK,CAAA;MAEhE,IAAIkB,QAAQ,KAAKS,SAAS,EAAE;QAAA;QAAAhC,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAK,CAAA;QAC1B,MAAM,IAAIU,KAAK,CAAC,gBAAgBJ,KAAK,sBAAsB,CAAC;MAC9D,CAAC;MAAA;MAAA;QAAAX,cAAA,GAAAc,CAAA;MAAA;MAAAd,cAAA,GAAAK,CAAA;MAED,OAAOkB,QAAQ;IACjB,CAAC,CAAC,OAAOU,KAAK,EAAE;MAAA;MAAAjC,cAAA,GAAAK,CAAA;MACd,MAAM,IAAIU,KAAK,CAAC,iCAAiCJ,KAAK,MAAMsB,KAAK,CAACC,OAAO,EAAE,CAAC;IAC9E;EACF;;EAEA;AACF;AACA;EACEC,YAAYA,CAACxB,KAAK,EAAE;IAAA;IAAAX,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IAClB,OAAO,2BAAAL,cAAA,GAAAc,CAAA,eAAI,CAACR,QAAQ,CAACmB,GAAG,CAACd,KAAK,CAAC;IAAA;IAAA,CAAAX,cAAA,GAAAc,CAAA,WAAI,IAAI,CAACN,SAAS,CAACiB,GAAG,CAACd,KAAK,CAAC;EAC9D;;EAEA;AACF;AACA;EACEyB,mBAAmBA,CAAA,EAAG;IAAA;IAAApC,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IACpB,OAAO,CAAC,GAAG,IAAIgC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC/B,QAAQ,CAACgC,IAAI,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC9B,SAAS,CAAC8B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1E;;EAEA;AACF;AACA;EACEC,WAAWA,CAAA,EAAG;IAAA;IAAAvC,cAAA,GAAAI,CAAA;IACZ,MAAMoC,eAAe;IAAA;IAAA,CAAAxC,cAAA,GAAAK,CAAA,QAAG,IAAIH,mBAAmB,CAAC,CAAC;IAAC;IAAAF,cAAA,GAAAK,CAAA;IAClDmC,eAAe,CAAC/B,MAAM,GAAG,IAAI;;IAE7B;IAAA;IAAAT,cAAA,GAAAK,CAAA;IACA,KAAK,MAAM,CAACM,KAAK,EAAEgB,OAAO,CAAC,IAAI,IAAI,CAACrB,QAAQ,CAACmC,OAAO,CAAC,CAAC,EAAE;MAAA;MAAAzC,cAAA,GAAAK,CAAA;MACtDmC,eAAe,CAAClC,QAAQ,CAACU,GAAG,CAACL,KAAK,EAAE;QAAE,GAAGgB,OAAO;QAAER,WAAW,EAAE;MAAM,CAAC,CAAC;IACzE;IAAC;IAAAnB,cAAA,GAAAK,CAAA;IAED,OAAOmC,eAAe;EACxB;;EAEA;AACF;AACA;EACEE,cAAcA,CAAA,EAAG;IAAA;IAAA1C,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IACf,IAAI,CAACG,SAAS,CAACmC,KAAK,CAAC,CAAC;;IAEtB;IAAA;IAAA3C,cAAA,GAAAK,CAAA;IACA,KAAK,MAAMsB,OAAO,IAAI,IAAI,CAACrB,QAAQ,CAACsC,MAAM,CAAC,CAAC,EAAE;MAAA;MAAA5C,cAAA,GAAAK,CAAA;MAC5CsB,OAAO,CAACR,WAAW,GAAG,KAAK;IAC7B;EACF;;EAEA;AACF;AACA;EACE,MAAM0B,OAAOA,CAAA,EAAG;IAAA;IAAA7C,cAAA,GAAAI,CAAA;IACd,MAAM0C,eAAe;IAAA;IAAA,CAAA9C,cAAA,GAAAK,CAAA,QAAG,EAAE;IAAC;IAAAL,cAAA,GAAAK,CAAA;IAE3B,KAAK,MAAMkB,QAAQ,IAAI,IAAI,CAACf,SAAS,CAACoC,MAAM,CAAC,CAAC,EAAE;MAAA;MAAA5C,cAAA,GAAAK,CAAA;MAC9C;MAAI;MAAA,CAAAL,cAAA,GAAAc,CAAA,WAAAS,QAAQ;MAAA;MAAA,CAAAvB,cAAA,GAAAc,CAAA,WAAI,OAAOS,QAAQ,CAACsB,OAAO,KAAK,UAAU,GAAE;QAAA;QAAA7C,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAK,CAAA;QACtD,IAAI;UACF,MAAM0C,MAAM;UAAA;UAAA,CAAA/C,cAAA,GAAAK,CAAA,QAAGkB,QAAQ,CAACsB,OAAO,CAAC,CAAC;UAAC;UAAA7C,cAAA,GAAAK,CAAA;UAClC;UAAI;UAAA,CAAAL,cAAA,GAAAc,CAAA,WAAAiC,MAAM;UAAA;UAAA,CAAA/C,cAAA,GAAAc,CAAA,WAAI,OAAOiC,MAAM,CAACC,IAAI,KAAK,UAAU,GAAE;YAAA;YAAAhD,cAAA,GAAAc,CAAA;YAAAd,cAAA,GAAAK,CAAA;YAC/CyC,eAAe,CAACG,IAAI,CAACF,MAAM,CAAC;UAC9B,CAAC;UAAA;UAAA;YAAA/C,cAAA,GAAAc,CAAA;UAAA;QACH,CAAC,CAAC,OAAOmB,KAAK,EAAE;UAAA;UAAAjC,cAAA,GAAAK,CAAA;UACd6C,OAAO,CAACjB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD;MACF,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAAc,CAAA;MAAA;IACH;IAAC;IAAAd,cAAA,GAAAK,CAAA;IAED,MAAM8C,OAAO,CAACC,GAAG,CAACN,eAAe,CAAC;IAAC;IAAA9C,cAAA,GAAAK,CAAA;IACnC,IAAI,CAACqC,cAAc,CAAC,CAAC;EACvB;;EAEA;AACF;AACA;EACEW,QAAQA,CAAA,EAAG;IAAA;IAAArD,cAAA,GAAAI,CAAA;IACT,MAAMkD,OAAO;IAAA;IAAA,CAAAtD,cAAA,GAAAK,CAAA,QAAG,IAAIgC,GAAG,CAAC,CAAC;IACzB,MAAMkB,QAAQ;IAAA;IAAA,CAAAvD,cAAA,GAAAK,CAAA,QAAG,IAAIgC,GAAG,CAAC,CAAC;IAAC;IAAArC,cAAA,GAAAK,CAAA;IAE3B,MAAMmD,YAAY,GAAI7C,KAAK,IAAK;MAAA;MAAAX,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAK,CAAA;MAC9B,IAAIkD,QAAQ,CAAC9B,GAAG,CAACd,KAAK,CAAC,EAAE;QAAA;QAAAX,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAK,CAAA;QACvB,MAAM,IAAIU,KAAK,CAAC,2CAA2CJ,KAAK,GAAG,CAAC;MACtE,CAAC;MAAA;MAAA;QAAAX,cAAA,GAAAc,CAAA;MAAA;MAAAd,cAAA,GAAAK,CAAA;MAED,IAAIiD,OAAO,CAAC7B,GAAG,CAACd,KAAK,CAAC,EAAE;QAAA;QAAAX,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAK,CAAA;QACtB;MACF,CAAC;MAAA;MAAA;QAAAL,cAAA,GAAAc,CAAA;MAAA;MAAAd,cAAA,GAAAK,CAAA;MAEDkD,QAAQ,CAACE,GAAG,CAAC9C,KAAK,CAAC;MAEnB,MAAMgB,OAAO;MAAA;MAAA,CAAA3B,cAAA,GAAAK,CAAA,QAAG,IAAI,CAACC,QAAQ,CAACoB,GAAG,CAACf,KAAK,CAAC;MAAC;MAAAX,cAAA,GAAAK,CAAA;MACzC;MAAI;MAAA,CAAAL,cAAA,GAAAc,CAAA,WAAAa,OAAO;MAAA;MAAA,CAAA3B,cAAA,GAAAc,CAAA,WAAIa,OAAO,CAACT,YAAY,GAAE;QAAA;QAAAlB,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAK,CAAA;QACnC,KAAK,MAAM0B,GAAG,IAAIJ,OAAO,CAACT,YAAY,EAAE;UAAA;UAAAlB,cAAA,GAAAK,CAAA;UACtC,IAAI,CAAC,IAAI,CAAC8B,YAAY,CAACJ,GAAG,CAAC,EAAE;YAAA;YAAA/B,cAAA,GAAAc,CAAA;YAAAd,cAAA,GAAAK,CAAA;YAC3B,MAAM,IAAIU,KAAK,CAAC,eAAegB,GAAG,kBAAkBpB,KAAK,qBAAqB,CAAC;UACjF,CAAC;UAAA;UAAA;YAAAX,cAAA,GAAAc,CAAA;UAAA;UAAAd,cAAA,GAAAK,CAAA;UACDmD,YAAY,CAACzB,GAAG,CAAC;QACnB;MACF,CAAC;MAAA;MAAA;QAAA/B,cAAA,GAAAc,CAAA;MAAA;MAAAd,cAAA,GAAAK,CAAA;MAEDkD,QAAQ,CAACG,MAAM,CAAC/C,KAAK,CAAC;MAAC;MAAAX,cAAA,GAAAK,CAAA;MACvBiD,OAAO,CAACG,GAAG,CAAC9C,KAAK,CAAC;IACpB,CAAC;IAAC;IAAAX,cAAA,GAAAK,CAAA;IAEF,KAAK,MAAMM,KAAK,IAAI,IAAI,CAACL,QAAQ,CAACgC,IAAI,CAAC,CAAC,EAAE;MAAA;MAAAtC,cAAA,GAAAK,CAAA;MACxCmD,YAAY,CAAC7C,KAAK,CAAC;IACrB;IAAC;IAAAX,cAAA,GAAAK,CAAA;IAED,OAAO,IAAI;EACb;AACF","ignoreList":[]}