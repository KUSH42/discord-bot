{"version":3,"names":["cov_12o20hgxzb","actualCoverage","EventBus","constructor","f","s","handlers","Map","maxListeners","on","event","handler","b","Error","has","set","eventHandlers","get","length","console","warn","push","off","once","onceHandler","args","index","indexOf","splice","delete","emit","data","wildcardHandlers","allHandlers","results","errors","promises","map","result","error","Promise","all","some","setImmediate","filter","emitSync","i","removeAllListeners","clear","getEventNames","Array","from","keys","getHandlerCount","setMaxListeners","max","createFiltered","eventFilter","filteredBus","waitFor","timeout","resolve","reject","timeoutId","clearTimeout","unsubscribe","setTimeout","getStats","events","totalHandlers","reduce","sum","eventCount","name","handlerCount"],"sources":["event-bus.js"],"sourcesContent":["/**\n * Event Bus for decoupled communication between components\n */\nexport class EventBus {\n  constructor() {\n    this.handlers = new Map();\n    this.maxListeners = 100; // Prevent memory leaks\n  }\n\n  /**\n   * Register an event handler\n   * @param {string} event - Event name\n   * @param {Function} handler - Event handler function\n   * @returns {Function} Unsubscribe function\n   */\n  on(event, handler) {\n    if (typeof event !== 'string') {\n      throw new Error('Event name must be a string');\n    }\n\n    if (typeof handler !== 'function') {\n      throw new Error('Event handler must be a function');\n    }\n\n    if (!this.handlers.has(event)) {\n      this.handlers.set(event, []);\n    }\n\n    const eventHandlers = this.handlers.get(event);\n\n    // Check for too many listeners\n    if (eventHandlers.length >= this.maxListeners) {\n      console.warn(`EventBus: Maximum listeners (${this.maxListeners}) reached for event '${event}'`);\n    }\n\n    eventHandlers.push(handler);\n\n    // Return unsubscribe function\n    return () => this.off(event, handler);\n  }\n\n  /**\n   * Register a one-time event handler\n   * @param {string} event - Event name\n   * @param {Function} handler - Event handler function\n   * @returns {Function} Unsubscribe function\n   */\n  once(event, handler) {\n    const onceHandler = (...args) => {\n      this.off(event, onceHandler);\n      handler(...args);\n    };\n\n    return this.on(event, onceHandler);\n  }\n\n  /**\n   * Remove an event handler\n   * @param {string} event - Event name\n   * @param {Function} handler - Event handler function to remove\n   */\n  off(event, handler) {\n    if (!this.handlers.has(event)) {\n      return;\n    }\n\n    const eventHandlers = this.handlers.get(event);\n    const index = eventHandlers.indexOf(handler);\n\n    if (index !== -1) {\n      eventHandlers.splice(index, 1);\n\n      // Clean up empty handler arrays\n      if (eventHandlers.length === 0) {\n        this.handlers.delete(event);\n      }\n    }\n  }\n\n  /**\n   * Emit an event to all registered handlers\n   * @param {string} event - Event name\n   * @param {*} data - Event data\n   * @returns {Promise<Array>} Array of handler results\n   */\n  async emit(event, data = null) {\n    if (typeof event !== 'string') {\n      throw new Error('Event name must be a string');\n    }\n\n    const eventHandlers = this.handlers.get(event) || [];\n    const wildcardHandlers = this.handlers.get('*') || [];\n    const allHandlers = [...eventHandlers, ...wildcardHandlers];\n\n    if (allHandlers.length === 0) {\n      return [];\n    }\n\n    // Create a copy to avoid issues if handlers modify the array\n    const handlers = [...allHandlers];\n    const results = [];\n    const errors = [];\n\n    // Execute handlers concurrently\n    const promises = handlers.map(async (handler, index) => {\n      try {\n        const result = await handler(data, event);\n        results[index] = result;\n      } catch (error) {\n        errors[index] = error;\n        console.error(`EventBus: Handler error for event '${event}':`, error);\n      }\n    });\n\n    await Promise.all(promises);\n\n    // If there were errors, emit an error event\n    if (errors.some(error => error)) {\n      setImmediate(() => {\n        this.emit('error', {\n          event,\n          data,\n          errors: errors.filter(error => error),\n        });\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Emit an event synchronously\n   * @param {string} event - Event name\n   * @param {*} data - Event data\n   * @returns {Array} Array of handler results\n   */\n  emitSync(event, data = null) {\n    if (typeof event !== 'string') {\n      throw new Error('Event name must be a string');\n    }\n\n    const eventHandlers = this.handlers.get(event) || [];\n    const wildcardHandlers = this.handlers.get('*') || [];\n    const allHandlers = [...eventHandlers, ...wildcardHandlers];\n\n    if (allHandlers.length === 0) {\n      return [];\n    }\n\n    // Create a copy to avoid issues if handlers modify the array\n    const handlers = [...allHandlers];\n    const results = [];\n\n    for (let i = 0; i < handlers.length; i++) {\n      try {\n        results[i] = handlers[i](data, event);\n      } catch (error) {\n        console.error(`EventBus: Handler error for event '${event}':`, error);\n\n        // Emit error event after current execution\n        setImmediate(() => {\n          this.emit('error', {\n            event,\n            data,\n            error,\n          });\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Remove all handlers for an event\n   * @param {string} event - Event name (optional, removes all if not specified)\n   */\n  removeAllListeners(event = null) {\n    if (event) {\n      this.handlers.delete(event);\n    } else {\n      this.handlers.clear();\n    }\n  }\n\n  /**\n   * Get all event names that have handlers\n   */\n  getEventNames() {\n    return Array.from(this.handlers.keys());\n  }\n\n  /**\n   * Get handler count for an event\n   */\n  getHandlerCount(event) {\n    const eventHandlers = this.handlers.get(event);\n    return eventHandlers ? eventHandlers.length : 0;\n  }\n\n  /**\n   * Set maximum number of listeners per event\n   */\n  setMaxListeners(max) {\n    if (typeof max !== 'number' || max < 0) {\n      throw new Error('Max listeners must be a non-negative number');\n    }\n    this.maxListeners = max;\n  }\n\n  /**\n   * Create a new EventBus with filtered events\n   */\n  createFiltered(eventFilter) {\n    const filteredBus = new EventBus();\n\n    // Forward filtered events\n    this.on('*', (data, event) => {\n      if (eventFilter(event)) {\n        filteredBus.emit(event, data);\n      }\n    });\n\n    return filteredBus;\n  }\n\n  /**\n   * Wait for an event to be emitted\n   * @param {string} event - Event name\n   * @param {number} timeout - Timeout in milliseconds (optional)\n   * @returns {Promise} Promise that resolves with event data\n   */\n  waitFor(event, timeout = null) {\n    return new Promise((resolve, reject) => {\n      let timeoutId;\n\n      const handler = data => {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        resolve(data);\n      };\n\n      const unsubscribe = this.once(event, handler);\n\n      if (timeout) {\n        timeoutId = setTimeout(() => {\n          unsubscribe();\n          reject(new Error(`Timeout waiting for event '${event}' after ${timeout}ms`));\n        }, timeout);\n      }\n    });\n  }\n\n  /**\n   * Get statistics about the event bus\n   */\n  getStats() {\n    const events = this.getEventNames();\n    const totalHandlers = events.reduce((sum, event) => sum + this.getHandlerCount(event), 0);\n\n    return {\n      eventCount: events.length,\n      totalHandlers,\n      maxListeners: this.maxListeners,\n      events: events.map(event => ({\n        name: event,\n        handlerCount: this.getHandlerCount(event),\n      })),\n    };\n  }\n}\n"],"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","ignoreList":[]}