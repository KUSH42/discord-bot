{"version":3,"names":["describe","it","expect","beforeEach","afterEach","jest","crypto","mockYouTubeMonitor","mockRequest","mockResponse","mockLogger","info","fn","warn","error","debug","verbose","status","mockReturnThis","send","headers","body","rawBody","Buffer","from","url","method","logger","PSH_SECRET","YOUTUBE_FALLBACK_ENABLED","handleFailedNotification","clearAllMocks","mainBotSecret","testBotSecret","validNotification","generateValidAtomFeed","testBotSignature","createHmac","update","digest","algorithm","providedSignature","split","hmac","expectedSignature","isValidSignature","timingSafeEqual","toBe","toHaveBeenCalledWith","not","toHaveBeenCalled","sharedSecret","correctSignature","mainBotRequest","testBotRequest","mainBotHmac","mainBotExpected","testBotHmac","testBotExpected","validSignature","replayValid","malformedHeaders","malformedHeader","parts","length","Error","signature","message","almostCorrectSignature","substring","completelyWrongSignature","repeat","testSignatures","timings","testSig","start","process","hrtime","bigint","isValid","end","push","Number","toHaveLength","notification","botConfigs","secret","path","config","wrongSignature","validResult","invalidResult","contentType","bodyLength","providedAlgorithm","videoId","channelId"],"sources":["pubsubhubbub-security.test.js"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport crypto from 'crypto';\n\ndescribe('PubSubHubbub Security Integration Tests', () => {\n  let mockYouTubeMonitor;\n  let mockRequest;\n  let mockResponse;\n  let mockLogger;\n\n  beforeEach(() => {\n    mockLogger = {\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      debug: jest.fn(),\n      verbose: jest.fn(),\n    };\n\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      send: jest.fn().mockReturnThis(),\n    };\n\n    mockRequest = {\n      headers: {\n        'content-type': 'application/atom+xml',\n      },\n      body: '',\n      rawBody: Buffer.from(''),\n      url: '/webhook/youtube',\n      method: 'POST',\n    };\n\n    mockYouTubeMonitor = {\n      logger: mockLogger,\n      PSH_SECRET: 'main-bot-secret-12345',\n      YOUTUBE_FALLBACK_ENABLED: true,\n      handleFailedNotification: jest.fn(),\n    };\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Cross-Bot Signature Interference', () => {\n    it('should handle notifications intended for different bot instances', async () => {\n      // Simulate scenario from user report: two bots with different secrets\n      const mainBotSecret = 'main-bot-secret-12345';\n      const testBotSecret = 'test-bot-secret-67890';\n\n      const validNotification = generateValidAtomFeed();\n\n      // Test bot generates signature with its own secret\n      const testBotSignature = crypto\n        .createHmac('sha1', testBotSecret)\n        .update(Buffer.from(validNotification))\n        .digest('hex');\n\n      // Main bot receives notification with test bot's signature\n      mockRequest.body = validNotification;\n      mockRequest.rawBody = Buffer.from(validNotification);\n      mockRequest.headers['x-hub-signature'] = `sha1=${testBotSignature}`;\n      mockRequest.url = '/webhook/youtube'; // Main bot endpoint\n\n      // Main bot verifies with its own secret\n      const [algorithm, providedSignature] = mockRequest.headers['x-hub-signature'].split('=');\n      const hmac = crypto.createHmac('sha1', mainBotSecret);\n      hmac.update(mockRequest.rawBody);\n      const expectedSignature = hmac.digest('hex');\n\n      const isValidSignature = crypto.timingSafeEqual(\n        Buffer.from(expectedSignature, 'hex'),\n        Buffer.from(providedSignature, 'hex'),\n      );\n\n      expect(isValidSignature).toBe(false);\n\n      // Should reject and NOT trigger fallback (security measure)\n      if (!isValidSignature) {\n        mockLogger.warn('X-Hub-Signature mismatch detected');\n        mockResponse.status(403).send('Forbidden: Invalid signature.');\n        return; // Important: should not continue processing\n      }\n\n      expect(mockLogger.warn).toHaveBeenCalledWith('X-Hub-Signature mismatch detected');\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockYouTubeMonitor.handleFailedNotification).not.toHaveBeenCalled();\n    });\n\n    it('should handle webhook path confusion', async () => {\n      // Test different webhook paths as mentioned in user report\n      const sharedSecret = 'shared-secret-key'; // Same secret, different paths\n      const validNotification = generateValidAtomFeed();\n\n      const correctSignature = crypto\n        .createHmac('sha1', sharedSecret)\n        .update(Buffer.from(validNotification))\n        .digest('hex');\n\n      // Test main bot endpoint\n      const mainBotRequest = {\n        ...mockRequest,\n        body: validNotification,\n        rawBody: Buffer.from(validNotification),\n        headers: {\n          ...mockRequest.headers,\n          'x-hub-signature': `sha1=${correctSignature}`,\n        },\n        url: '/webhook/youtube',\n      };\n\n      // Test secondary bot endpoint\n      const testBotRequest = {\n        ...mockRequest,\n        body: validNotification,\n        rawBody: Buffer.from(validNotification),\n        headers: {\n          ...mockRequest.headers,\n          'x-hub-signature': `sha1=${correctSignature}`,\n        },\n        url: '/webhook/youtube-test',\n      };\n\n      // Both should validate correctly if using same secret\n      const mainBotHmac = crypto.createHmac('sha1', sharedSecret);\n      mainBotHmac.update(mainBotRequest.rawBody);\n      const mainBotExpected = mainBotHmac.digest('hex');\n\n      const testBotHmac = crypto.createHmac('sha1', sharedSecret);\n      testBotHmac.update(testBotRequest.rawBody);\n      const testBotExpected = testBotHmac.digest('hex');\n\n      expect(mainBotExpected).toBe(correctSignature);\n      expect(testBotExpected).toBe(correctSignature);\n\n      // Both bots should accept the same notification if using same secret\n      // (This might be the source of confusion in the user's report)\n    });\n\n    it('should handle replay attack scenarios', async () => {\n      const validNotification = generateValidAtomFeed();\n      const validSignature = crypto\n        .createHmac('sha1', mockYouTubeMonitor.PSH_SECRET)\n        .update(Buffer.from(validNotification))\n        .digest('hex');\n\n      mockRequest.body = validNotification;\n      mockRequest.rawBody = Buffer.from(validNotification);\n      mockRequest.headers['x-hub-signature'] = `sha1=${validSignature}`;\n\n      // Simulate signature verification (should pass)\n      const [algorithm, providedSignature] = mockRequest.headers['x-hub-signature'].split('=');\n      const hmac = crypto.createHmac('sha1', mockYouTubeMonitor.PSH_SECRET);\n      hmac.update(mockRequest.rawBody);\n      const expectedSignature = hmac.digest('hex');\n\n      const isValidSignature = crypto.timingSafeEqual(\n        Buffer.from(expectedSignature, 'hex'),\n        Buffer.from(providedSignature, 'hex'),\n      );\n\n      expect(isValidSignature).toBe(true);\n\n      // First request should succeed\n      mockLogger.info('X-Hub-Signature verified successfully.');\n\n      // Replay of same request should also succeed signature-wise\n      // (Additional replay protection would need timestamp/nonce checking)\n      const replayValid = crypto.timingSafeEqual(\n        Buffer.from(expectedSignature, 'hex'),\n        Buffer.from(providedSignature, 'hex'),\n      );\n\n      expect(replayValid).toBe(true);\n\n      // Note: Basic HMAC-SHA1 doesn't prevent replay attacks\n      // Would need additional mechanisms (timestamps, nonces) for full protection\n    });\n  });\n\n  describe('Security Edge Cases', () => {\n    it('should handle malformed signature headers', async () => {\n      const validNotification = generateValidAtomFeed();\n      const malformedHeaders = [\n        '', // Empty\n        'invalid-format', // No algorithm\n        'md5=hash', // Wrong algorithm\n        'sha1=', // Empty hash\n        'sha1=invalid-hex-chars!!!', // Invalid hex\n        'sha1=short', // Too short\n      ];\n\n      for (const malformedHeader of malformedHeaders) {\n        mockRequest.body = validNotification;\n        mockRequest.rawBody = Buffer.from(validNotification);\n        mockRequest.headers['x-hub-signature'] = malformedHeader;\n\n        // Should handle gracefully\n        try {\n          const parts = malformedHeader.split('=');\n          if (parts.length !== 2) {\n            throw new Error('Invalid signature format');\n          }\n\n          const [algorithm, signature] = parts;\n          if (algorithm !== 'sha1') {\n            mockLogger.warn('Unsupported signature algorithm: %s', algorithm);\n            mockResponse.status(400).send('Bad Request: Unsupported signature algorithm.');\n            continue;\n          }\n\n          if (!signature) {\n            throw new Error('Empty signature');\n          }\n\n          // Try to verify\n          const hmac = crypto.createHmac('sha1', mockYouTubeMonitor.PSH_SECRET);\n          hmac.update(mockRequest.rawBody);\n          const expectedSignature = hmac.digest('hex');\n\n          crypto.timingSafeEqual(Buffer.from(expectedSignature, 'hex'), Buffer.from(signature, 'hex'));\n        } catch (error) {\n          // Should log error and reject\n          mockLogger.error('Error processing signature:', error.message);\n          mockResponse.status(400).send('Bad Request: Invalid signature format.');\n        }\n      }\n\n      // Should have handled all malformed headers gracefully\n      expect(mockLogger.warn).toHaveBeenCalled();\n    });\n\n    it('should prevent timing attacks on signature verification', async () => {\n      const validNotification = generateValidAtomFeed();\n      const correctSignature = crypto\n        .createHmac('sha1', mockYouTubeMonitor.PSH_SECRET)\n        .update(Buffer.from(validNotification))\n        .digest('hex');\n\n      // Generate slightly different signatures to test timing-safe comparison\n      const almostCorrectSignature = `${correctSignature.substring(0, 39)}0`; // Change last char\n      const completelyWrongSignature = 'a'.repeat(40);\n\n      mockRequest.body = validNotification;\n      mockRequest.rawBody = Buffer.from(validNotification);\n\n      // Test timing-safe comparison behavior\n      const testSignatures = [correctSignature, almostCorrectSignature, completelyWrongSignature];\n      const timings = [];\n\n      for (const testSig of testSignatures) {\n        const start = process.hrtime.bigint();\n\n        const isValid = crypto.timingSafeEqual(Buffer.from(correctSignature, 'hex'), Buffer.from(testSig, 'hex'));\n\n        const end = process.hrtime.bigint();\n        timings.push(Number(end - start));\n\n        // Only correct signature should validate\n        if (testSig === correctSignature) {\n          expect(isValid).toBe(true);\n        } else {\n          expect(isValid).toBe(false);\n        }\n      }\n\n      // Timing-safe comparison should have similar execution times\n      // (This is more of a conceptual test - actual timing analysis would be more complex)\n      expect(timings).toHaveLength(3);\n    });\n  });\n\n  describe('YouTube Hub Behavior Analysis', () => {\n    it('should handle YouTube hub sending to wrong endpoints', async () => {\n      // Simulate YouTube hub potentially sending same notification to multiple endpoints\n      const notification = generateValidAtomFeed('newVideoId123');\n      const botConfigs = [\n        { secret: 'bot1-secret', path: '/webhook/youtube' },\n        { secret: 'bot2-secret', path: '/webhook/youtube-test' },\n        { secret: 'bot3-secret', path: '/webhook/youtube-staging' },\n      ];\n\n      // Each bot should only accept notifications signed with its own secret\n      for (const config of botConfigs) {\n        const correctSignature = crypto\n          .createHmac('sha1', config.secret)\n          .update(Buffer.from(notification))\n          .digest('hex');\n\n        const wrongSignature = crypto\n          .createHmac('sha1', 'wrong-secret')\n          .update(Buffer.from(notification))\n          .digest('hex');\n\n        // Test correct signature\n        const validResult = crypto.timingSafeEqual(\n          Buffer.from(correctSignature, 'hex'),\n          Buffer.from(correctSignature, 'hex'),\n        );\n        expect(validResult).toBe(true);\n\n        // Test wrong signature\n        const invalidResult = crypto.timingSafeEqual(\n          Buffer.from(correctSignature, 'hex'),\n          Buffer.from(wrongSignature, 'hex'),\n        );\n        expect(invalidResult).toBe(false);\n      }\n    });\n\n    it('should log sufficient information for debugging signature mismatches', async () => {\n      const notification = generateValidAtomFeed();\n      const wrongSignature = 'wrong-signature-hash';\n\n      mockRequest.body = notification;\n      mockRequest.rawBody = Buffer.from(notification);\n      mockRequest.headers['x-hub-signature'] = `sha1=${wrongSignature}`;\n      mockRequest.url = '/webhook/youtube';\n\n      // Generate what signature should be\n      const hmac = crypto.createHmac('sha1', mockYouTubeMonitor.PSH_SECRET);\n      hmac.update(mockRequest.rawBody);\n      const expectedSignature = hmac.digest('hex');\n\n      // Verify mismatch (handle different length signatures)\n      let isValid = false;\n      try {\n        isValid = crypto.timingSafeEqual(Buffer.from(expectedSignature, 'hex'), Buffer.from(wrongSignature, 'hex'));\n      } catch (error) {\n        // Different lengths will cause timingSafeEqual to throw\n        isValid = false;\n      }\n\n      expect(isValid).toBe(false);\n\n      // Should log sufficient debugging info (but not expose secret)\n      mockLogger.warn('X-Hub-Signature mismatch detected');\n      mockLogger.debug('Request details for signature mismatch:', {\n        url: mockRequest.url,\n        contentType: mockRequest.headers['content-type'],\n        bodyLength: mockRequest.rawBody.length,\n        providedAlgorithm: 'sha1',\n        // Note: Should NOT log actual signatures or secret for security\n      });\n\n      expect(mockLogger.warn).toHaveBeenCalledWith('X-Hub-Signature mismatch detected');\n    });\n  });\n});\n\n/**\n * Helper function to generate valid Atom feed XML\n */\nfunction generateValidAtomFeed(videoId = 'dQw4w9WgXcQ', channelId = 'UCTestChannelId') {\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <feed xmlns=\"http://www.w3.org/2005/Atom\">\n      <title>YouTube video feed</title>\n      <link rel=\"hub\" href=\"https://pubsubhubbub.appspot.com/\"/>\n      <id>yt:channel:${channelId}</id>\n      <entry>\n        <id>yt:video:${videoId}</id>\n        <title>Test Video Title</title>\n        <link rel=\"alternate\" href=\"https://www.youtube.com/watch?v=${videoId}\"/>\n        <author>\n          <name>Test Channel</name>\n          <uri>https://www.youtube.com/channel/${channelId}</uri>\n        </author>\n        <published>2025-01-01T12:00:00Z</published>\n        <updated>2025-01-01T12:00:00Z</updated>\n      </entry>\n    </feed>`;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,EAAE,EAAEC,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,IAAI,QAAQ,eAAe;AACjF,OAAOC,MAAM,MAAM,QAAQ;AAE3BN,QAAQ,CAAC,yCAAyC,EAAE,MAAM;EACxD,IAAIO,kBAAkB;EACtB,IAAIC,WAAW;EACf,IAAIC,YAAY;EAChB,IAAIC,UAAU;EAEdP,UAAU,CAAC,MAAM;IACfO,UAAU,GAAG;MACXC,IAAI,EAAEN,IAAI,CAACO,EAAE,CAAC,CAAC;MACfC,IAAI,EAAER,IAAI,CAACO,EAAE,CAAC,CAAC;MACfE,KAAK,EAAET,IAAI,CAACO,EAAE,CAAC,CAAC;MAChBG,KAAK,EAAEV,IAAI,CAACO,EAAE,CAAC,CAAC;MAChBI,OAAO,EAAEX,IAAI,CAACO,EAAE,CAAC;IACnB,CAAC;IAEDH,YAAY,GAAG;MACbQ,MAAM,EAAEZ,IAAI,CAACO,EAAE,CAAC,CAAC,CAACM,cAAc,CAAC,CAAC;MAClCC,IAAI,EAAEd,IAAI,CAACO,EAAE,CAAC,CAAC,CAACM,cAAc,CAAC;IACjC,CAAC;IAEDV,WAAW,GAAG;MACZY,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;MACxBC,GAAG,EAAE,kBAAkB;MACvBC,MAAM,EAAE;IACV,CAAC;IAEDnB,kBAAkB,GAAG;MACnBoB,MAAM,EAAEjB,UAAU;MAClBkB,UAAU,EAAE,uBAAuB;MACnCC,wBAAwB,EAAE,IAAI;MAC9BC,wBAAwB,EAAEzB,IAAI,CAACO,EAAE,CAAC;IACpC,CAAC;EACH,CAAC,CAAC;EAEFR,SAAS,CAAC,MAAM;IACdC,IAAI,CAAC0B,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEF/B,QAAQ,CAAC,kCAAkC,EAAE,MAAM;IACjDC,EAAE,CAAC,kEAAkE,EAAE,YAAY;MACjF;MACA,MAAM+B,aAAa,GAAG,uBAAuB;MAC7C,MAAMC,aAAa,GAAG,uBAAuB;MAE7C,MAAMC,iBAAiB,GAAGC,qBAAqB,CAAC,CAAC;;MAEjD;MACA,MAAMC,gBAAgB,GAAG9B,MAAM,CAC5B+B,UAAU,CAAC,MAAM,EAAEJ,aAAa,CAAC,CACjCK,MAAM,CAACf,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC,CAAC,CACtCK,MAAM,CAAC,KAAK,CAAC;;MAEhB;MACA/B,WAAW,CAACa,IAAI,GAAGa,iBAAiB;MACpC1B,WAAW,CAACc,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC;MACpD1B,WAAW,CAACY,OAAO,CAAC,iBAAiB,CAAC,GAAG,QAAQgB,gBAAgB,EAAE;MACnE5B,WAAW,CAACiB,GAAG,GAAG,kBAAkB,CAAC,CAAC;;MAEtC;MACA,MAAM,CAACe,SAAS,EAAEC,iBAAiB,CAAC,GAAGjC,WAAW,CAACY,OAAO,CAAC,iBAAiB,CAAC,CAACsB,KAAK,CAAC,GAAG,CAAC;MACxF,MAAMC,IAAI,GAAGrC,MAAM,CAAC+B,UAAU,CAAC,MAAM,EAAEL,aAAa,CAAC;MACrDW,IAAI,CAACL,MAAM,CAAC9B,WAAW,CAACc,OAAO,CAAC;MAChC,MAAMsB,iBAAiB,GAAGD,IAAI,CAACJ,MAAM,CAAC,KAAK,CAAC;MAE5C,MAAMM,gBAAgB,GAAGvC,MAAM,CAACwC,eAAe,CAC7CvB,MAAM,CAACC,IAAI,CAACoB,iBAAiB,EAAE,KAAK,CAAC,EACrCrB,MAAM,CAACC,IAAI,CAACiB,iBAAiB,EAAE,KAAK,CACtC,CAAC;MAEDvC,MAAM,CAAC2C,gBAAgB,CAAC,CAACE,IAAI,CAAC,KAAK,CAAC;;MAEpC;MACA,IAAI,CAACF,gBAAgB,EAAE;QACrBnC,UAAU,CAACG,IAAI,CAAC,mCAAmC,CAAC;QACpDJ,YAAY,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACE,IAAI,CAAC,+BAA+B,CAAC;QAC9D,OAAO,CAAC;MACV;MAEAjB,MAAM,CAACQ,UAAU,CAACG,IAAI,CAAC,CAACmC,oBAAoB,CAAC,mCAAmC,CAAC;MACjF9C,MAAM,CAACO,YAAY,CAACQ,MAAM,CAAC,CAAC+B,oBAAoB,CAAC,GAAG,CAAC;MACrD9C,MAAM,CAACK,kBAAkB,CAACuB,wBAAwB,CAAC,CAACmB,GAAG,CAACC,gBAAgB,CAAC,CAAC;IAC5E,CAAC,CAAC;IAEFjD,EAAE,CAAC,sCAAsC,EAAE,YAAY;MACrD;MACA,MAAMkD,YAAY,GAAG,mBAAmB,CAAC,CAAC;MAC1C,MAAMjB,iBAAiB,GAAGC,qBAAqB,CAAC,CAAC;MAEjD,MAAMiB,gBAAgB,GAAG9C,MAAM,CAC5B+B,UAAU,CAAC,MAAM,EAAEc,YAAY,CAAC,CAChCb,MAAM,CAACf,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC,CAAC,CACtCK,MAAM,CAAC,KAAK,CAAC;;MAEhB;MACA,MAAMc,cAAc,GAAG;QACrB,GAAG7C,WAAW;QACda,IAAI,EAAEa,iBAAiB;QACvBZ,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC;QACvCd,OAAO,EAAE;UACP,GAAGZ,WAAW,CAACY,OAAO;UACtB,iBAAiB,EAAE,QAAQgC,gBAAgB;QAC7C,CAAC;QACD3B,GAAG,EAAE;MACP,CAAC;;MAED;MACA,MAAM6B,cAAc,GAAG;QACrB,GAAG9C,WAAW;QACda,IAAI,EAAEa,iBAAiB;QACvBZ,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC;QACvCd,OAAO,EAAE;UACP,GAAGZ,WAAW,CAACY,OAAO;UACtB,iBAAiB,EAAE,QAAQgC,gBAAgB;QAC7C,CAAC;QACD3B,GAAG,EAAE;MACP,CAAC;;MAED;MACA,MAAM8B,WAAW,GAAGjD,MAAM,CAAC+B,UAAU,CAAC,MAAM,EAAEc,YAAY,CAAC;MAC3DI,WAAW,CAACjB,MAAM,CAACe,cAAc,CAAC/B,OAAO,CAAC;MAC1C,MAAMkC,eAAe,GAAGD,WAAW,CAAChB,MAAM,CAAC,KAAK,CAAC;MAEjD,MAAMkB,WAAW,GAAGnD,MAAM,CAAC+B,UAAU,CAAC,MAAM,EAAEc,YAAY,CAAC;MAC3DM,WAAW,CAACnB,MAAM,CAACgB,cAAc,CAAChC,OAAO,CAAC;MAC1C,MAAMoC,eAAe,GAAGD,WAAW,CAAClB,MAAM,CAAC,KAAK,CAAC;MAEjDrC,MAAM,CAACsD,eAAe,CAAC,CAACT,IAAI,CAACK,gBAAgB,CAAC;MAC9ClD,MAAM,CAACwD,eAAe,CAAC,CAACX,IAAI,CAACK,gBAAgB,CAAC;;MAE9C;MACA;IACF,CAAC,CAAC;IAEFnD,EAAE,CAAC,uCAAuC,EAAE,YAAY;MACtD,MAAMiC,iBAAiB,GAAGC,qBAAqB,CAAC,CAAC;MACjD,MAAMwB,cAAc,GAAGrD,MAAM,CAC1B+B,UAAU,CAAC,MAAM,EAAE9B,kBAAkB,CAACqB,UAAU,CAAC,CACjDU,MAAM,CAACf,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC,CAAC,CACtCK,MAAM,CAAC,KAAK,CAAC;MAEhB/B,WAAW,CAACa,IAAI,GAAGa,iBAAiB;MACpC1B,WAAW,CAACc,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC;MACpD1B,WAAW,CAACY,OAAO,CAAC,iBAAiB,CAAC,GAAG,QAAQuC,cAAc,EAAE;;MAEjE;MACA,MAAM,CAACnB,SAAS,EAAEC,iBAAiB,CAAC,GAAGjC,WAAW,CAACY,OAAO,CAAC,iBAAiB,CAAC,CAACsB,KAAK,CAAC,GAAG,CAAC;MACxF,MAAMC,IAAI,GAAGrC,MAAM,CAAC+B,UAAU,CAAC,MAAM,EAAE9B,kBAAkB,CAACqB,UAAU,CAAC;MACrEe,IAAI,CAACL,MAAM,CAAC9B,WAAW,CAACc,OAAO,CAAC;MAChC,MAAMsB,iBAAiB,GAAGD,IAAI,CAACJ,MAAM,CAAC,KAAK,CAAC;MAE5C,MAAMM,gBAAgB,GAAGvC,MAAM,CAACwC,eAAe,CAC7CvB,MAAM,CAACC,IAAI,CAACoB,iBAAiB,EAAE,KAAK,CAAC,EACrCrB,MAAM,CAACC,IAAI,CAACiB,iBAAiB,EAAE,KAAK,CACtC,CAAC;MAEDvC,MAAM,CAAC2C,gBAAgB,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;;MAEnC;MACArC,UAAU,CAACC,IAAI,CAAC,wCAAwC,CAAC;;MAEzD;MACA;MACA,MAAMiD,WAAW,GAAGtD,MAAM,CAACwC,eAAe,CACxCvB,MAAM,CAACC,IAAI,CAACoB,iBAAiB,EAAE,KAAK,CAAC,EACrCrB,MAAM,CAACC,IAAI,CAACiB,iBAAiB,EAAE,KAAK,CACtC,CAAC;MAEDvC,MAAM,CAAC0D,WAAW,CAAC,CAACb,IAAI,CAAC,IAAI,CAAC;;MAE9B;MACA;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF/C,QAAQ,CAAC,qBAAqB,EAAE,MAAM;IACpCC,EAAE,CAAC,2CAA2C,EAAE,YAAY;MAC1D,MAAMiC,iBAAiB,GAAGC,qBAAqB,CAAC,CAAC;MACjD,MAAM0B,gBAAgB,GAAG,CACvB,EAAE;MAAE;MACJ,gBAAgB;MAAE;MAClB,UAAU;MAAE;MACZ,OAAO;MAAE;MACT,2BAA2B;MAAE;MAC7B,YAAY,CAAE;MAAA,CACf;MAED,KAAK,MAAMC,eAAe,IAAID,gBAAgB,EAAE;QAC9CrD,WAAW,CAACa,IAAI,GAAGa,iBAAiB;QACpC1B,WAAW,CAACc,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC;QACpD1B,WAAW,CAACY,OAAO,CAAC,iBAAiB,CAAC,GAAG0C,eAAe;;QAExD;QACA,IAAI;UACF,MAAMC,KAAK,GAAGD,eAAe,CAACpB,KAAK,CAAC,GAAG,CAAC;UACxC,IAAIqB,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;UAC7C;UAEA,MAAM,CAACzB,SAAS,EAAE0B,SAAS,CAAC,GAAGH,KAAK;UACpC,IAAIvB,SAAS,KAAK,MAAM,EAAE;YACxB9B,UAAU,CAACG,IAAI,CAAC,qCAAqC,EAAE2B,SAAS,CAAC;YACjE/B,YAAY,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACE,IAAI,CAAC,+CAA+C,CAAC;YAC9E;UACF;UAEA,IAAI,CAAC+C,SAAS,EAAE;YACd,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;UACpC;;UAEA;UACA,MAAMtB,IAAI,GAAGrC,MAAM,CAAC+B,UAAU,CAAC,MAAM,EAAE9B,kBAAkB,CAACqB,UAAU,CAAC;UACrEe,IAAI,CAACL,MAAM,CAAC9B,WAAW,CAACc,OAAO,CAAC;UAChC,MAAMsB,iBAAiB,GAAGD,IAAI,CAACJ,MAAM,CAAC,KAAK,CAAC;UAE5CjC,MAAM,CAACwC,eAAe,CAACvB,MAAM,CAACC,IAAI,CAACoB,iBAAiB,EAAE,KAAK,CAAC,EAAErB,MAAM,CAACC,IAAI,CAAC0C,SAAS,EAAE,KAAK,CAAC,CAAC;QAC9F,CAAC,CAAC,OAAOpD,KAAK,EAAE;UACd;UACAJ,UAAU,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACqD,OAAO,CAAC;UAC9D1D,YAAY,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACE,IAAI,CAAC,wCAAwC,CAAC;QACzE;MACF;;MAEA;MACAjB,MAAM,CAACQ,UAAU,CAACG,IAAI,CAAC,CAACqC,gBAAgB,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEFjD,EAAE,CAAC,yDAAyD,EAAE,YAAY;MACxE,MAAMiC,iBAAiB,GAAGC,qBAAqB,CAAC,CAAC;MACjD,MAAMiB,gBAAgB,GAAG9C,MAAM,CAC5B+B,UAAU,CAAC,MAAM,EAAE9B,kBAAkB,CAACqB,UAAU,CAAC,CACjDU,MAAM,CAACf,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC,CAAC,CACtCK,MAAM,CAAC,KAAK,CAAC;;MAEhB;MACA,MAAM6B,sBAAsB,GAAG,GAAGhB,gBAAgB,CAACiB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;MACxE,MAAMC,wBAAwB,GAAG,GAAG,CAACC,MAAM,CAAC,EAAE,CAAC;MAE/C/D,WAAW,CAACa,IAAI,GAAGa,iBAAiB;MACpC1B,WAAW,CAACc,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACU,iBAAiB,CAAC;;MAEpD;MACA,MAAMsC,cAAc,GAAG,CAACpB,gBAAgB,EAAEgB,sBAAsB,EAAEE,wBAAwB,CAAC;MAC3F,MAAMG,OAAO,GAAG,EAAE;MAElB,KAAK,MAAMC,OAAO,IAAIF,cAAc,EAAE;QACpC,MAAMG,KAAK,GAAGC,OAAO,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC;QAErC,MAAMC,OAAO,GAAGzE,MAAM,CAACwC,eAAe,CAACvB,MAAM,CAACC,IAAI,CAAC4B,gBAAgB,EAAE,KAAK,CAAC,EAAE7B,MAAM,CAACC,IAAI,CAACkD,OAAO,EAAE,KAAK,CAAC,CAAC;QAEzG,MAAMM,GAAG,GAAGJ,OAAO,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC;QACnCL,OAAO,CAACQ,IAAI,CAACC,MAAM,CAACF,GAAG,GAAGL,KAAK,CAAC,CAAC;;QAEjC;QACA,IAAID,OAAO,KAAKtB,gBAAgB,EAAE;UAChClD,MAAM,CAAC6E,OAAO,CAAC,CAAChC,IAAI,CAAC,IAAI,CAAC;QAC5B,CAAC,MAAM;UACL7C,MAAM,CAAC6E,OAAO,CAAC,CAAChC,IAAI,CAAC,KAAK,CAAC;QAC7B;MACF;;MAEA;MACA;MACA7C,MAAM,CAACuE,OAAO,CAAC,CAACU,YAAY,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFnF,QAAQ,CAAC,+BAA+B,EAAE,MAAM;IAC9CC,EAAE,CAAC,sDAAsD,EAAE,YAAY;MACrE;MACA,MAAMmF,YAAY,GAAGjD,qBAAqB,CAAC,eAAe,CAAC;MAC3D,MAAMkD,UAAU,GAAG,CACjB;QAAEC,MAAM,EAAE,aAAa;QAAEC,IAAI,EAAE;MAAmB,CAAC,EACnD;QAAED,MAAM,EAAE,aAAa;QAAEC,IAAI,EAAE;MAAwB,CAAC,EACxD;QAAED,MAAM,EAAE,aAAa;QAAEC,IAAI,EAAE;MAA2B,CAAC,CAC5D;;MAED;MACA,KAAK,MAAMC,MAAM,IAAIH,UAAU,EAAE;QAC/B,MAAMjC,gBAAgB,GAAG9C,MAAM,CAC5B+B,UAAU,CAAC,MAAM,EAAEmD,MAAM,CAACF,MAAM,CAAC,CACjChD,MAAM,CAACf,MAAM,CAACC,IAAI,CAAC4D,YAAY,CAAC,CAAC,CACjC7C,MAAM,CAAC,KAAK,CAAC;QAEhB,MAAMkD,cAAc,GAAGnF,MAAM,CAC1B+B,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,CAClCC,MAAM,CAACf,MAAM,CAACC,IAAI,CAAC4D,YAAY,CAAC,CAAC,CACjC7C,MAAM,CAAC,KAAK,CAAC;;QAEhB;QACA,MAAMmD,WAAW,GAAGpF,MAAM,CAACwC,eAAe,CACxCvB,MAAM,CAACC,IAAI,CAAC4B,gBAAgB,EAAE,KAAK,CAAC,EACpC7B,MAAM,CAACC,IAAI,CAAC4B,gBAAgB,EAAE,KAAK,CACrC,CAAC;QACDlD,MAAM,CAACwF,WAAW,CAAC,CAAC3C,IAAI,CAAC,IAAI,CAAC;;QAE9B;QACA,MAAM4C,aAAa,GAAGrF,MAAM,CAACwC,eAAe,CAC1CvB,MAAM,CAACC,IAAI,CAAC4B,gBAAgB,EAAE,KAAK,CAAC,EACpC7B,MAAM,CAACC,IAAI,CAACiE,cAAc,EAAE,KAAK,CACnC,CAAC;QACDvF,MAAM,CAACyF,aAAa,CAAC,CAAC5C,IAAI,CAAC,KAAK,CAAC;MACnC;IACF,CAAC,CAAC;IAEF9C,EAAE,CAAC,sEAAsE,EAAE,YAAY;MACrF,MAAMmF,YAAY,GAAGjD,qBAAqB,CAAC,CAAC;MAC5C,MAAMsD,cAAc,GAAG,sBAAsB;MAE7CjF,WAAW,CAACa,IAAI,GAAG+D,YAAY;MAC/B5E,WAAW,CAACc,OAAO,GAAGC,MAAM,CAACC,IAAI,CAAC4D,YAAY,CAAC;MAC/C5E,WAAW,CAACY,OAAO,CAAC,iBAAiB,CAAC,GAAG,QAAQqE,cAAc,EAAE;MACjEjF,WAAW,CAACiB,GAAG,GAAG,kBAAkB;;MAEpC;MACA,MAAMkB,IAAI,GAAGrC,MAAM,CAAC+B,UAAU,CAAC,MAAM,EAAE9B,kBAAkB,CAACqB,UAAU,CAAC;MACrEe,IAAI,CAACL,MAAM,CAAC9B,WAAW,CAACc,OAAO,CAAC;MAChC,MAAMsB,iBAAiB,GAAGD,IAAI,CAACJ,MAAM,CAAC,KAAK,CAAC;;MAE5C;MACA,IAAIwC,OAAO,GAAG,KAAK;MACnB,IAAI;QACFA,OAAO,GAAGzE,MAAM,CAACwC,eAAe,CAACvB,MAAM,CAACC,IAAI,CAACoB,iBAAiB,EAAE,KAAK,CAAC,EAAErB,MAAM,CAACC,IAAI,CAACiE,cAAc,EAAE,KAAK,CAAC,CAAC;MAC7G,CAAC,CAAC,OAAO3E,KAAK,EAAE;QACd;QACAiE,OAAO,GAAG,KAAK;MACjB;MAEA7E,MAAM,CAAC6E,OAAO,CAAC,CAAChC,IAAI,CAAC,KAAK,CAAC;;MAE3B;MACArC,UAAU,CAACG,IAAI,CAAC,mCAAmC,CAAC;MACpDH,UAAU,CAACK,KAAK,CAAC,yCAAyC,EAAE;QAC1DU,GAAG,EAAEjB,WAAW,CAACiB,GAAG;QACpBmE,WAAW,EAAEpF,WAAW,CAACY,OAAO,CAAC,cAAc,CAAC;QAChDyE,UAAU,EAAErF,WAAW,CAACc,OAAO,CAAC0C,MAAM;QACtC8B,iBAAiB,EAAE;QACnB;MACF,CAAC,CAAC;MAEF5F,MAAM,CAACQ,UAAU,CAACG,IAAI,CAAC,CAACmC,oBAAoB,CAAC,mCAAmC,CAAC;IACnF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASb,qBAAqBA,CAAC4D,OAAO,GAAG,aAAa,EAAEC,SAAS,GAAG,iBAAiB,EAAE;EACrF,OAAO;AACT;AACA;AACA;AACA,uBAAuBA,SAAS;AAChC;AACA,uBAAuBD,OAAO;AAC9B;AACA,sEAAsEA,OAAO;AAC7E;AACA;AACA,iDAAiDC,SAAS;AAC1D;AACA;AACA;AACA;AACA,YAAY;AACZ","ignoreList":[]}