{"version":3,"names":["YouTubeService","getVideoDetails","videoId","Error","getChannelDetails","channelId","getChannelVideos","searchVideos","query","getVideoStatistics","getPlaylistDetails","playlistId","getPlaylistVideos","isVideoLive","getLiveStreamDetails","getVideoComments","getChannelUploadPlaylist","validateVideoId","test","validateChannelId","extractVideoId","url","patterns","pattern","match","extractChannelId","getQuotaUsage","validateApiKey","dispose"],"sources":["youtube-service.js"],"sourcesContent":["/**\n * Abstract YouTube service interface\n * Defines the contract for YouTube API operations that can be mocked in tests\n */\nexport class YouTubeService {\n  /**\n   * Get video details by ID\n   * @param {string} videoId - YouTube video ID\n   * @returns {Promise<Object>} Video details object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async getVideoDetails(videoId) {\n    throw new Error('Abstract method: getVideoDetails must be implemented');\n  }\n\n  /**\n   * Get channel details by ID\n   * @param {string} channelId - YouTube channel ID\n   * @returns {Promise<Object>} Channel details object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async getChannelDetails(channelId) {\n    throw new Error('Abstract method: getChannelDetails must be implemented');\n  }\n\n  /**\n   * Get latest videos from a channel\n   * @param {string} channelId - YouTube channel ID\n   * @param {number} maxResults - Maximum number of results\n   * @returns {Promise<Array<Object>>} Array of video objects\n   */\n  // eslint-disable-next-line no-unused-vars\n  async getChannelVideos(channelId) {\n    throw new Error('Abstract method: getChannelVideos must be implemented');\n  }\n\n  /**\n   * Search for videos\n   * @param {string} query - Search query\n   * @param {Object} options - Search options\n   * @returns {Promise<Array<Object>>} Array of video objects\n   */\n  // eslint-disable-next-line no-unused-vars\n  async searchVideos(query) {\n    throw new Error('Abstract method: searchVideos must be implemented');\n  }\n\n  /**\n   * Get video statistics\n   * @param {string} videoId - YouTube video ID\n   * @returns {Promise<Object>} Video statistics object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async getVideoStatistics(videoId) {\n    throw new Error('Abstract method: getVideoStatistics must be implemented');\n  }\n\n  /**\n   * Get playlist details\n   * @param {string} playlistId - YouTube playlist ID\n   * @returns {Promise<Object>} Playlist details object\n   */\n  // eslint-disable-next-line no-unused-vars\n  async getPlaylistDetails(playlistId) {\n    throw new Error('Abstract method: getPlaylistDetails must be implemented');\n  }\n\n  /**\n   * Get videos from a playlist\n   * @param {string} playlistId - YouTube playlist ID\n   * @param {number} maxResults - Maximum number of results\n   * @returns {Promise<Array<Object>>} Array of video objects\n   */\n  // eslint-disable-next-line no-unused-vars\n  async getPlaylistVideos(playlistId) {\n    throw new Error('Abstract method: getPlaylistVideos must be implemented');\n  }\n\n  /**\n   * Check if a video is live\n   * @param {string} videoId - YouTube video ID\n   * @returns {Promise<boolean>} True if video is live\n   */\n  // eslint-disable-next-line no-unused-vars\n  async isVideoLive(videoId) {\n    throw new Error('Abstract method: isVideoLive must be implemented');\n  }\n\n  /**\n   * Get live streaming details\n   * @param {string} videoId - YouTube video ID\n   * @returns {Promise<Object|null>} Live streaming details or null\n   */\n  // eslint-disable-next-line no-unused-vars\n  async getLiveStreamDetails(videoId) {\n    throw new Error('Abstract method: getLiveStreamDetails must be implemented');\n  }\n\n  /**\n   * Get video comments\n   * @param {string} videoId - YouTube video ID\n   * @param {number} maxResults - Maximum number of results\n   * @returns {Promise<Array<Object>>} Array of comment objects\n   */\n  // eslint-disable-next-line no-unused-vars\n  async getVideoComments(videoId) {\n    throw new Error('Abstract method: getVideoComments must be implemented');\n  }\n\n  /**\n   * Get channel's upload playlist ID\n   * @param {string} channelId - YouTube channel ID\n   * @returns {Promise<string>} Upload playlist ID\n   */\n  // eslint-disable-next-line no-unused-vars\n  async getChannelUploadPlaylist(channelId) {\n    throw new Error('Abstract method: getChannelUploadPlaylist must be implemented');\n  }\n\n  /**\n   * Validate video ID format\n   * @param {string} videoId - YouTube video ID\n   * @returns {boolean} True if valid format\n   */\n  validateVideoId(videoId) {\n    if (typeof videoId !== 'string') {\n      return false;\n    }\n\n    // YouTube video IDs are 11 characters long and contain letters, numbers, hyphens, and underscores\n    return /^[A-Za-z0-9_-]{11}$/.test(videoId);\n  }\n\n  /**\n   * Validate channel ID format\n   * @param {string} channelId - YouTube channel ID\n   * @returns {boolean} True if valid format\n   */\n  validateChannelId(channelId) {\n    if (typeof channelId !== 'string') {\n      return false;\n    }\n\n    // YouTube channel IDs start with 'UC' and are 24 characters long\n    return /^UC[A-Za-z0-9_-]{22}$/.test(channelId);\n  }\n\n  /**\n   * Extract video ID from YouTube URL\n   * @param {string} url - YouTube URL\n   * @returns {string|null} Video ID or null if invalid\n   */\n  extractVideoId(url) {\n    if (typeof url !== 'string') {\n      return null;\n    }\n\n    // Handle various YouTube URL formats\n    const patterns = [\n      /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([A-Za-z0-9_-]{11})/,\n      /youtube\\.com\\/v\\/([A-Za-z0-9_-]{11})/,\n      /youtube\\.com\\/.*[?&]v=([A-Za-z0-9_-]{11})/,\n    ];\n\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match && this.validateVideoId(match[1])) {\n        return match[1];\n      }\n    }\n\n    // Check if the string is already a video ID\n    if (this.validateVideoId(url)) {\n      return url;\n    }\n\n    return null;\n  }\n\n  /**\n   * Extract channel ID from YouTube URL\n   * @param {string} url - YouTube URL\n   * @returns {string|null} Channel ID or null if invalid\n   */\n  extractChannelId(url) {\n    if (typeof url !== 'string') {\n      return null;\n    }\n\n    // Handle various YouTube channel URL formats\n    const patterns = [\n      /youtube\\.com\\/channel\\/([A-Za-z0-9_-]{24})/,\n      /youtube\\.com\\/c\\/([A-Za-z0-9_-]+)/,\n      /youtube\\.com\\/user\\/([A-Za-z0-9_-]+)/,\n      /youtube\\.com\\/@([A-Za-z0-9_-]+)/,\n    ];\n\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) {\n        return match[1];\n      }\n    }\n\n    // Check if the string is already a channel ID\n    if (this.validateChannelId(url)) {\n      return url;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get API quota usage information\n   * @returns {Promise<Object>} Quota usage details\n   */\n  async getQuotaUsage() {\n    throw new Error('Abstract method: getQuotaUsage must be implemented');\n  }\n\n  /**\n   * Check if API key is valid\n   * @returns {Promise<boolean>} True if API key is valid\n   */\n  async validateApiKey() {\n    throw new Error('Abstract method: validateApiKey must be implemented');\n  }\n\n  /**\n   * Dispose of resources\n   * @returns {Promise<void>}\n   */\n  async dispose() {\n    // No resources to dispose by default\n  }\n}\n"],"mappings":"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","ignoreList":[]}