{"version":3,"names":["videoUrlRegex","tweetUrlRegex","DuplicateDetector","constructor","maxSize","cleanupInterval","knownVideoIds","Set","knownTweetIds","cleanupTimer","process","env","NODE_ENV","startPeriodicCleanup","extractVideoIds","content","matches","matchAll","map","match","filter","id","extractTweetIds","isVideoIdKnown","videoId","has","isTweetIdKnown","tweetId","addVideoId","add","cleanupIfNeeded","addTweetId","addVideoIds","videoIds","Array","isArray","forEach","addTweetIds","tweetIds","processContent","result","videos","found","duplicates","new","tweets","size","cleanupSet","set","array","from","keepCount","Math","floor","toKeep","slice","clear","item","clearInterval","setInterval","stopPeriodicCleanup","scanDiscordChannelForVideos","discordChannel","limit","_discordChannel$messa","messages","fetch","Error","results","messagesScanned","videoIdsFound","videoIdsAdded","errors","lastMessageId","totalScanned","batchSize","fetchOptions","min","before","message","values","length","push","Promise","resolve","setTimeout","error","type","timestamp","Date","toISOString","scanDiscordChannelForTweets","_discordChannel$messa2","tweetIdsFound","tweetIdsAdded","reset","isDuplicate","url","some","markAsSeen","getStats","totalKnownIds","destroy","createDuplicateDetector","options"],"sources":["duplicate-detector.js"],"sourcesContent":["// duplicate-detector.js\n// Duplicate detection utilities for YouTube videos and X/Twitter posts\n\n/**\n * Regular expression for matching YouTube video URLs\n * Matches various YouTube URL formats and extracts the 11-character video ID\n */\nexport const videoUrlRegex =\n  /https?:\\/\\/(?:(?:www\\.)?youtube\\.com\\/(?:watch\\?v=|live\\/|shorts\\/|embed\\/|v\\/)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/g;\n\n/**\n * Regular expression for matching X/Twitter post URLs\n * Matches URLs from x.com, twitter.com, vxtwitter.com, fxtwitter.com, and nitter instances\n */\nexport const tweetUrlRegex =\n  /https?:\\/\\/(?:[\\w-]+\\.)*(?:x\\.com|twitter\\.com|vxtwitter\\.com|fxtwitter\\.com|nitter\\.[^/]+)\\/(?:(?:i\\/web\\/)?status(?:es)?|[^/]+\\/status(?:es)?)\\/(\\d{10,})/g;\n/**\n * Duplicate detector class for managing known content IDs\n */\nexport class DuplicateDetector {\n  constructor(maxSize = 10000, cleanupInterval = 24 * 60 * 60 * 1000) {\n    this.knownVideoIds = new Set();\n    this.knownTweetIds = new Set();\n    this.maxSize = maxSize;\n    this.cleanupInterval = cleanupInterval;\n    this.cleanupTimer = null;\n\n    // Don't start periodic cleanup in test environment to prevent test timeouts\n    if (process.env.NODE_ENV !== 'test') {\n      this.startPeriodicCleanup();\n    }\n  }\n\n  /**\n   * Extract video IDs from text content\n   * @param {string} content - Text content to search for video URLs\n   * @returns {Array} - Array of extracted video IDs\n   */\n  extractVideoIds(content) {\n    if (!content || typeof content !== 'string') {\n      return [];\n    }\n\n    const matches = [...content.matchAll(videoUrlRegex)];\n    return matches.map((match) => match[1]).filter((id) => id);\n  }\n\n  /**\n   * Extract tweet IDs from text content\n   * @param {string} content - Text content to search for tweet URLs\n   * @returns {Array} - Array of extracted tweet IDs\n   */\n  extractTweetIds(content) {\n    if (!content || typeof content !== 'string') {\n      return [];\n    }\n\n    const matches = [...content.matchAll(tweetUrlRegex)];\n    return matches.map((match) => match[1]).filter((id) => id);\n  }\n\n  /**\n   * Check if a video ID is already known (duplicate)\n   * @param {string} videoId - YouTube video ID to check\n   * @returns {boolean} - True if the video is a duplicate\n   */\n  isVideoIdKnown(videoId) {\n    return this.knownVideoIds.has(videoId);\n  }\n\n  /**\n   * Check if a tweet ID is already known (duplicate)\n   * @param {string} tweetId - X/Twitter post ID to check\n   * @returns {boolean} - True if the tweet is a duplicate\n   */\n  isTweetIdKnown(tweetId) {\n    return this.knownTweetIds.has(tweetId);\n  }\n\n  /**\n   * Add a video ID to the known set\n   * @param {string} videoId - YouTube video ID to add\n   */\n  addVideoId(videoId) {\n    if (videoId && typeof videoId === 'string') {\n      this.knownVideoIds.add(videoId);\n      this.cleanupIfNeeded();\n    }\n  }\n\n  /**\n   * Add a tweet ID to the known set\n   * @param {string} tweetId - X/Twitter post ID to add\n   */\n  addTweetId(tweetId) {\n    if (tweetId && typeof tweetId === 'string') {\n      this.knownTweetIds.add(tweetId);\n      this.cleanupIfNeeded();\n    }\n  }\n\n  /**\n   * Add multiple video IDs to the known set\n   * @param {Array} videoIds - Array of YouTube video IDs to add\n   */\n  addVideoIds(videoIds) {\n    if (Array.isArray(videoIds)) {\n      videoIds.forEach((id) => this.addVideoId(id));\n    }\n  }\n\n  /**\n   * Add multiple tweet IDs to the known set\n   * @param {Array} tweetIds - Array of X/Twitter post IDs to add\n   */\n  addTweetIds(tweetIds) {\n    if (Array.isArray(tweetIds)) {\n      tweetIds.forEach((id) => this.addTweetId(id));\n    }\n  }\n\n  /**\n   * Process content and detect duplicates for both videos and tweets\n   * @param {string} content - Text content to process\n   * @returns {Object} - Object containing video and tweet duplicate information\n   */\n  processContent(content) {\n    const videoIds = this.extractVideoIds(content);\n    const tweetIds = this.extractTweetIds(content);\n\n    const result = {\n      videos: {\n        found: videoIds,\n        duplicates: videoIds.filter((id) => this.isVideoIdKnown(id)),\n        new: videoIds.filter((id) => !this.isVideoIdKnown(id)),\n      },\n      tweets: {\n        found: tweetIds,\n        duplicates: tweetIds.filter((id) => this.isTweetIdKnown(id)),\n        new: tweetIds.filter((id) => !this.isTweetIdKnown(id)),\n      },\n    };\n\n    // Add new IDs to known sets\n    result.videos.new.forEach((id) => this.addVideoId(id));\n    result.tweets.new.forEach((id) => this.addTweetId(id));\n\n    return result;\n  }\n\n  /**\n   * Clean up memory by removing old entries if size exceeds limit\n   */\n  cleanupIfNeeded() {\n    if (this.knownVideoIds.size > this.maxSize) {\n      this.cleanupSet(this.knownVideoIds);\n    }\n    if (this.knownTweetIds.size > this.maxSize) {\n      this.cleanupSet(this.knownTweetIds);\n    }\n  }\n\n  /**\n   * Clean up a Set by keeping only the most recent 80% of entries\n   * @param {Set} set - Set to clean up\n   */\n  cleanupSet(set) {\n    const array = Array.from(set);\n    const keepCount = Math.floor(this.maxSize * 0.8);\n    const toKeep = array.slice(-keepCount);\n\n    set.clear();\n    toKeep.forEach((item) => set.add(item));\n  }\n\n  /**\n   * Start periodic cleanup timer\n   */\n  startPeriodicCleanup() {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n\n    this.cleanupTimer = setInterval(() => {\n      this.cleanupIfNeeded();\n    }, this.cleanupInterval);\n  }\n\n  /**\n   * Stop periodic cleanup timer\n   */\n  stopPeriodicCleanup() {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = null;\n    }\n  }\n\n  /**\n   * Scan Discord channel history for YouTube video IDs and populate known set\n   * @param {Object} discordChannel - Discord channel object to scan\n   * @param {number} limit - Maximum number of messages to scan (default: 1000)\n   * @returns {Promise<Object>} - Object containing scan results\n   */\n  async scanDiscordChannelForVideos(discordChannel, limit = 1000) {\n    if (!discordChannel || typeof discordChannel.messages?.fetch !== 'function') {\n      throw new Error('Invalid Discord channel provided');\n    }\n\n    const results = {\n      messagesScanned: 0,\n      videoIdsFound: [],\n      videoIdsAdded: 0,\n      errors: [],\n    };\n\n    try {\n      let lastMessageId = null;\n      let totalScanned = 0;\n      const batchSize = 100; // Discord API limit per request\n\n      while (totalScanned < limit) {\n        const fetchOptions = { limit: Math.min(batchSize, limit - totalScanned) };\n        if (lastMessageId) {\n          fetchOptions.before = lastMessageId;\n        }\n\n        const messages = await discordChannel.messages.fetch(fetchOptions);\n\n        if (messages.size === 0) {\n          break; // No more messages\n        }\n\n        for (const message of messages.values()) {\n          const videoIds = this.extractVideoIds(message.content);\n\n          if (videoIds.length > 0) {\n            results.videoIdsFound.push(...videoIds);\n\n            // Add to known set\n            videoIds.forEach((id) => {\n              if (!this.isVideoIdKnown(id)) {\n                this.addVideoId(id);\n                results.videoIdsAdded++;\n              }\n            });\n          }\n\n          lastMessageId = message.id;\n          totalScanned++;\n          results.messagesScanned++;\n        }\n\n        // Small delay to avoid rate limiting\n        await new Promise((resolve) => setTimeout(resolve, 100));\n      }\n    } catch (error) {\n      results.errors.push({\n        type: 'fetch_error',\n        message: error.message,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Scan Discord channel history for tweet IDs and populate known set\n   * @param {Object} discordChannel - Discord channel object to scan\n   * @param {number} limit - Maximum number of messages to scan (default: 1000)\n   * @returns {Promise<Object>} - Object containing scan results\n   */\n  async scanDiscordChannelForTweets(discordChannel, limit = 1000) {\n    if (!discordChannel || typeof discordChannel.messages?.fetch !== 'function') {\n      throw new Error('Invalid Discord channel provided');\n    }\n\n    const results = {\n      messagesScanned: 0,\n      tweetIdsFound: [],\n      tweetIdsAdded: 0,\n      errors: [],\n    };\n\n    try {\n      let lastMessageId = null;\n      let totalScanned = 0;\n      const batchSize = 100; // Discord API limit per request\n\n      while (totalScanned < limit) {\n        const fetchOptions = { limit: Math.min(batchSize, limit - totalScanned) };\n        if (lastMessageId) {\n          fetchOptions.before = lastMessageId;\n        }\n\n        const messages = await discordChannel.messages.fetch(fetchOptions);\n\n        if (messages.size === 0) {\n          break; // No more messages\n        }\n\n        for (const message of messages.values()) {\n          const tweetIds = this.extractTweetIds(message.content);\n\n          if (tweetIds.length > 0) {\n            results.tweetIdsFound.push(...tweetIds);\n\n            // Add to known set\n            tweetIds.forEach((id) => {\n              if (!this.isTweetIdKnown(id)) {\n                this.addTweetId(id);\n                results.tweetIdsAdded++;\n              }\n            });\n          }\n\n          lastMessageId = message.id;\n          totalScanned++;\n          results.messagesScanned++;\n        }\n\n        // Small delay to avoid rate limiting\n        await new Promise((resolve) => setTimeout(resolve, 100));\n      }\n    } catch (error) {\n      results.errors.push({\n        type: 'fetch_error',\n        message: error.message,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Clear all known IDs\n   */\n  reset() {\n    this.knownVideoIds.clear();\n    this.knownTweetIds.clear();\n  }\n\n  /**\n   * Check if a URL is a duplicate (simplified interface for applications)\n   * @param {string} url - URL to check for duplicates\n   * @returns {boolean} - True if URL is a duplicate\n   */\n  isDuplicate(url) {\n    if (!url || typeof url !== 'string') {\n      return false;\n    }\n\n    // Check for video URLs\n    const videoIds = this.extractVideoIds(url);\n    if (videoIds.length > 0) {\n      return videoIds.some((id) => this.isVideoIdKnown(id));\n    }\n\n    // Check for tweet URLs\n    const tweetIds = this.extractTweetIds(url);\n    if (tweetIds.length > 0) {\n      return tweetIds.some((id) => this.isTweetIdKnown(id));\n    }\n\n    return false;\n  }\n\n  /**\n   * Mark a URL as seen (simplified interface for applications)\n   * @param {string} url - URL to mark as seen\n   */\n  markAsSeen(url) {\n    if (!url || typeof url !== 'string') {\n      return;\n    }\n\n    // Add video IDs if found\n    const videoIds = this.extractVideoIds(url);\n    videoIds.forEach((id) => this.addVideoId(id));\n\n    // Add tweet IDs if found\n    const tweetIds = this.extractTweetIds(url);\n    tweetIds.forEach((id) => this.addTweetId(id));\n  }\n\n  /**\n   * Get statistics about known IDs\n   * @returns {Object} - Statistics object\n   */\n  getStats() {\n    return {\n      knownVideoIds: this.knownVideoIds.size,\n      knownTweetIds: this.knownTweetIds.size,\n      totalKnownIds: this.knownVideoIds.size + this.knownTweetIds.size,\n      maxSize: this.maxSize,\n      cleanupInterval: this.cleanupInterval,\n    };\n  }\n\n  /**\n   * Destroy the duplicate detector and clean up resources\n   */\n  destroy() {\n    this.stopPeriodicCleanup();\n    this.reset();\n  }\n}\n\n/**\n * Utility function to create a new duplicate detector instance\n * @param {Object} options - Configuration options\n * @returns {DuplicateDetector} - New duplicate detector instance\n */\nexport function createDuplicateDetector(options = {}) {\n  return new DuplicateDetector(options.maxSize, options.cleanupInterval);\n}\n"],"mappings":"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","ignoreList":[]}