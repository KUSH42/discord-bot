{"version":3,"names":["cov_1igr67bo4","actualCoverage","DiscordService","DiscordClientService","constructor","client","f","s","eventHandlers","Map","login","token","sendMessage","channelId","content","channel","channels","fetch","b","isTextBased","Error","send","fetchChannel","fetchGuild","guildId","guilds","onMessage","handler","wrappedHandler","message","error","console","on","off","onReady","onError","handlerError","getCurrentUser","user","isReady","readyAt","getLatency","ws","ping","destroy","editMessage","messageId","newContent","messages","edit","deleteMessage","delete","addReaction","emoji","react","getGuildMember","userId","guild","members","hasPermission","permission","member","permissionsFor","has","setPresence","presence"],"sources":["discord-client-service.js"],"sourcesContent":["import { DiscordService } from '../interfaces/discord-service.js';\n\n/**\n * Discord.js implementation of DiscordService\n */\nexport class DiscordClientService extends DiscordService {\n  constructor(client) {\n    super();\n    this.client = client;\n    this.eventHandlers = new Map();\n  }\n\n  /**\n   * Login to Discord with bot token\n   */\n  async login(token) {\n    await this.client.login(token);\n  }\n\n  /**\n   * Send a message to a Discord channel\n   */\n  async sendMessage(channelId, content) {\n    const channel = await this.client.channels.fetch(channelId);\n    if (!channel || !channel.isTextBased()) {\n      throw new Error(`Channel ${channelId} is not a valid text channel`);\n    }\n    return await channel.send(content);\n  }\n\n  /**\n   * Fetch a Discord channel\n   */\n  async fetchChannel(channelId) {\n    return await this.client.channels.fetch(channelId);\n  }\n\n  /**\n   * Fetch a Discord guild\n   */\n  async fetchGuild(guildId) {\n    return await this.client.guilds.fetch(guildId);\n  }\n\n  /**\n   * Register a message event handler\n   */\n  onMessage(handler) {\n    const wrappedHandler = (message) => {\n      try {\n        handler(message);\n      } catch (error) {\n        console.error('Error in message handler:', error);\n      }\n    };\n\n    this.client.on('messageCreate', wrappedHandler);\n\n    // Return unregister function\n    return () => {\n      this.client.off('messageCreate', wrappedHandler);\n    };\n  }\n\n  /**\n   * Register a ready event handler\n   */\n  onReady(handler) {\n    const wrappedHandler = () => {\n      try {\n        handler();\n      } catch (error) {\n        console.error('Error in ready handler:', error);\n      }\n    };\n\n    this.client.on('ready', wrappedHandler);\n\n    // Return unregister function\n    return () => {\n      this.client.off('ready', wrappedHandler);\n    };\n  }\n\n  /**\n   * Register an error event handler\n   */\n  onError(handler) {\n    const wrappedHandler = (error) => {\n      try {\n        handler(error);\n      } catch (handlerError) {\n        console.error('Error in error handler:', handlerError);\n      }\n    };\n\n    this.client.on('error', wrappedHandler);\n\n    // Return unregister function\n    return () => {\n      this.client.off('error', wrappedHandler);\n    };\n  }\n\n  /**\n   * Get current user information\n   */\n  async getCurrentUser() {\n    return this.client.user;\n  }\n\n  /**\n   * Check if the bot is logged in and ready\n   */\n  isReady() {\n    return this.client.readyAt !== null;\n  }\n\n  /**\n   * Get bot latency/ping\n   */\n  getLatency() {\n    return this.client.ws.ping;\n  }\n\n  /**\n   * Destroy the Discord client connection\n   */\n  async destroy() {\n    await this.client.destroy();\n  }\n\n  /**\n   * Edit a message\n   */\n  async editMessage(channelId, messageId, newContent) {\n    const channel = await this.client.channels.fetch(channelId);\n    if (!channel || !channel.isTextBased()) {\n      throw new Error(`Channel ${channelId} is not a valid text channel`);\n    }\n\n    const message = await channel.messages.fetch(messageId);\n    return await message.edit(newContent);\n  }\n\n  /**\n   * Delete a message\n   */\n  async deleteMessage(channelId, messageId) {\n    const channel = await this.client.channels.fetch(channelId);\n    if (!channel || !channel.isTextBased()) {\n      throw new Error(`Channel ${channelId} is not a valid text channel`);\n    }\n\n    const message = await channel.messages.fetch(messageId);\n    await message.delete();\n  }\n\n  /**\n   * Add a reaction to a message\n   */\n  async addReaction(channelId, messageId, emoji) {\n    const channel = await this.client.channels.fetch(channelId);\n    if (!channel || !channel.isTextBased()) {\n      throw new Error(`Channel ${channelId} is not a valid text channel`);\n    }\n\n    const message = await channel.messages.fetch(messageId);\n    await message.react(emoji);\n  }\n\n  /**\n   * Get user from guild\n   */\n  async getGuildMember(guildId, userId) {\n    const guild = await this.client.guilds.fetch(guildId);\n    return await guild.members.fetch(userId);\n  }\n\n  /**\n   * Check if user has permission in channel\n   */\n  async hasPermission(channelId, userId, permission) {\n    const channel = await this.client.channels.fetch(channelId);\n    if (!channel || !channel.guild) {\n      return false;\n    }\n\n    const member = await channel.guild.members.fetch(userId);\n    return channel.permissionsFor(member).has(permission);\n  }\n\n  /**\n   * Set bot presence/status\n   */\n  async setPresence(presence) {\n    this.client.user.setPresence(presence);\n  }\n}\n"],"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","ignoreList":[]}