{"version":3,"names":["describe","it","expect","beforeEach","afterEach","jest","createMockClient","createMockChannel","createMockRequest","createMockResponse","DuplicateDetector","createDiscordManager","createWebhookLimiter","createCommandRateLimiter","startTime","endTime","clearAllMocks","performance","now","duration","console","log","toFixed","duplicateDetector","numEntries","startMemory","process","memoryUsage","i","youtubeText","toString","padStart","twitterText","markAsSeen","endMemory","memoryIncrease","heapUsed","stats","getStats","totalKnownIds","toBeGreaterThan","toBeLessThan","lookupStart","testText","isDuplicate","lookupEnd","toBe","memoryManager","entries","Map","maxSize","maxAge","add","key","value","cleanup","size","oldestKey","keys","next","delete","set","timestamp","Date","entry","get","initialMemory","maxMemory","cleanupMemory","toBeLessThanOrEqual","sharedSet","Set","promises","numConcurrent","push","Promise","resolve","setTimeout","Math","random","results","all","toHaveLength","lookupPromises","exists","has","lookupResults","every","result","videoUrlRegex","tweetUrlRegex","numUrls","textSegments","largeText","join","regexStart","videoMatches","matchAll","tweetMatches","regexEnd","regexDuration","processingStart","videoIds","map","match","tweetIds","processingEnd","processingDuration","malformedText","repeat","malformedStart","malformedEnd","malformedDuration","mockChannel","numMessages","send","mockImplementation","id","sendStart","batchSize","batch","j","sendEnd","sendDuration","totalMessages","reduce","sum","length","toHaveBeenCalledTimes","messagesPerSecond","numChannels","channels","Array","from","_","name","forEach","channel","concurrentStart","concurrentEnd","concurrentDuration","toHaveBeenCalledWith","numWebhooks","webhookHandler","fn","req","res","status","json","received","webhookStart","method","url","body","webhookEnd","webhookDuration","webhooksPerSecond","createLargePayload","fill","payloadSizes","payload","headers","parseStart","filter","Boolean","parseEnd","parseDuration","throughput","largestResult","webhookRateLimit","commandRateLimit","numRequests","mockReq","ip","mockRes","commandStart","userId","isAllowed","commandEnd","commandDuration","webhookThroughput","commandThroughput","duplicateTracker","cycleCount","cycle","clear","finalMemory","global","gc","afterGCMemory","afterGCIncrease","createCircularStructure","obj1","obj2","ref","structures","midMemory","netIncrease","complexDuplicateDetection","urls","duplicates","videoRegex","tweetRegex","normalizedUrl","toLowerCase","trim","videoMatch","videoId","type","tweetMatch","tweetId","unique","String","cpuStart","cpuEnd","cpuDuration","urlsPerSecond","performanceMetrics","iterations","urlsPerIteration","iteration","iterationStart","iterationEnd","iterationDuration","avgThroughput","m","firstHalfAvg","slice","secondHalfAvg","degradationRatio"],"sources":["load-tests.test.js"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { createMockClient, createMockChannel } from '../mocks/discord.mock.js';\nimport { createMockRequest, createMockResponse } from '../mocks/express.mock.js';\nimport { DuplicateDetector } from '../../src/duplicate-detector.js';\nimport { createDiscordManager } from '../../src/discord-utils.js';\nimport { createWebhookLimiter, createCommandRateLimiter } from '../../src/rate-limiter.js';\n\ndescribe('Performance and Load Tests', () => {\n  let startTime;\n  let endTime;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    startTime = performance.now();\n  });\n\n  afterEach(() => {\n    endTime = performance.now();\n    const duration = endTime - startTime;\n    console.log(`Test completed in ${duration.toFixed(2)}ms`);\n  });\n\n  describe('Memory Management Performance', () => {\n    it('should handle large duplicate detection sets efficiently', () => {\n      const duplicateDetector = new DuplicateDetector();\n      const numEntries = 10000; // Reduced for practical testing\n\n      const startMemory = process.memoryUsage();\n\n      // Test with real YouTube and Twitter URLs\n      for (let i = 0; i < numEntries; i++) {\n        const youtubeText = `Check out this video: https://youtube.com/watch?v=dQw4w9WgXc${i.toString().padStart(4, '0')}`;\n        const twitterText = `Great post: https://x.com/user/status/123456789012345${i.toString().padStart(3, '0')}`;\n\n        // Mark URLs as seen to add them to the known sets\n        duplicateDetector.markAsSeen(youtubeText);\n        duplicateDetector.markAsSeen(twitterText);\n      }\n\n      const endMemory = process.memoryUsage();\n      const memoryIncrease = endMemory.heapUsed - startMemory.heapUsed;\n\n      // Performance assertions using real duplicate detector\n      const stats = duplicateDetector.getStats();\n      expect(stats.totalKnownIds).toBeGreaterThan(numEntries);\n\n      // Memory usage should be reasonable (less than 50MB for 10k entries)\n      expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024);\n\n      // Test lookup performance with actual duplicate detection\n      const lookupStart = performance.now();\n      const testText = 'Check out this video: https://youtube.com/watch?v=dQw4w9WgXc5000';\n      const isDuplicate = duplicateDetector.isDuplicate(testText);\n      const lookupEnd = performance.now();\n\n      expect(isDuplicate).toBe(true); // Should be duplicate since we added it above\n      expect(lookupEnd - lookupStart).toBeLessThan(1); // Sub-millisecond lookup\n    });\n\n    it('should handle memory cleanup for expired entries', () => {\n      const memoryManager = {\n        entries: new Map(),\n        maxSize: 10000,\n        maxAge: 3600000, // 1 hour\n\n        add(key, value) {\n          this.cleanup();\n\n          if (this.entries.size >= this.maxSize) {\n            // Remove oldest entry\n            const oldestKey = this.entries.keys().next().value;\n            this.entries.delete(oldestKey);\n          }\n\n          this.entries.set(key, {\n            value,\n            timestamp: Date.now(),\n          });\n        },\n\n        cleanup() {\n          const now = Date.now();\n          for (const [key, entry] of this.entries) {\n            if (now - entry.timestamp > this.maxAge) {\n              this.entries.delete(key);\n            }\n          }\n        },\n\n        get(key) {\n          const entry = this.entries.get(key);\n          if (!entry) {\n            return null;\n          }\n\n          if (Date.now() - entry.timestamp > this.maxAge) {\n            this.entries.delete(key);\n            return null;\n          }\n\n          return entry.value;\n        },\n      };\n\n      const initialMemory = process.memoryUsage().heapUsed;\n\n      // Add entries up to limit\n      for (let i = 0; i < 15000; i++) {\n        memoryManager.add(`key${i}`, `value${i}`);\n      }\n\n      const maxMemory = process.memoryUsage().heapUsed;\n\n      // Force cleanup\n      memoryManager.cleanup();\n\n      const cleanupMemory = process.memoryUsage().heapUsed;\n\n      // Should not exceed max size\n      expect(memoryManager.entries.size).toBeLessThanOrEqual(10000);\n\n      // Memory should be managed by size, not heap usage (GC timing is unpredictable)\n      expect(memoryManager.entries.size).toBeGreaterThan(0);\n      expect(memoryManager.entries.size).toBeLessThanOrEqual(10000);\n    });\n\n    it('should handle concurrent access to shared data structures', async () => {\n      const sharedSet = new Set();\n      const promises = [];\n      const numConcurrent = 1000;\n\n      // Simulate concurrent additions\n      for (let i = 0; i < numConcurrent; i++) {\n        promises.push(\n          new Promise((resolve) => {\n            // Add some delay to simulate real work\n            setTimeout(() => {\n              sharedSet.add(`item${i}`);\n              resolve(i);\n            }, Math.random() * 10);\n          }),\n        );\n      }\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(numConcurrent);\n      expect(sharedSet.size).toBe(numConcurrent);\n\n      // Test concurrent lookups\n      const lookupPromises = [];\n      for (let i = 0; i < numConcurrent; i++) {\n        lookupPromises.push(\n          new Promise((resolve) => {\n            const exists = sharedSet.has(`item${i}`);\n            resolve(exists);\n          }),\n        );\n      }\n\n      const lookupResults = await Promise.all(lookupPromises);\n      expect(lookupResults.every((result) => result === true)).toBe(true);\n    });\n  });\n\n  describe('Regex Performance at Scale', () => {\n    it('should handle large text with many URLs efficiently', () => {\n      const duplicateDetector = new DuplicateDetector();\n\n      // Define regex patterns locally\n      const videoUrlRegex =\n        /https?:\\/\\/(?:(?:www\\.)?youtube\\.com\\/(?:watch\\?v=|live\\/|shorts\\/|embed\\/|v\\/)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/g;\n      const tweetUrlRegex =\n        /https?:\\/\\/(?:[\\w-]+\\.)*(?:x\\.com|twitter\\.com|vxtwitter\\.com|fxtwitter\\.com|nitter\\.[^/]+)\\/(?:(?:i\\/web\\/)?status(?:es)?|[^/]+\\/status(?:es)?)\\/(\\d+)/g;\n\n      // Generate large text with many URLs using real duplicate detection\n      const numUrls = 10000;\n      const textSegments = [];\n\n      for (let i = 0; i < numUrls / 2; i++) {\n        textSegments.push(\n          `Text segment ${i} with YouTube: https://www.youtube.com/watch?v=video${i.toString().padStart(7, '0')} and`,\n          `Twitter: https://x.com/user/status/12345678901234567${i.toString().padStart(2, '0')} more text.`,\n        );\n      }\n\n      const largeText = textSegments.join(' ');\n\n      const regexStart = performance.now();\n\n      const videoMatches = [...largeText.matchAll(videoUrlRegex)];\n      const tweetMatches = [...largeText.matchAll(tweetUrlRegex)];\n\n      const regexEnd = performance.now();\n      const regexDuration = regexEnd - regexStart;\n\n      expect(videoMatches).toHaveLength(numUrls / 2);\n      expect(tweetMatches).toHaveLength(numUrls / 2);\n      expect(regexDuration).toBeLessThan(1000); // Should complete in under 1 second\n\n      // Test individual URL processing performance\n      const processingStart = performance.now();\n\n      const videoIds = videoMatches.map((match) => match[1]);\n      const tweetIds = tweetMatches.map((match) => match[1]);\n\n      const processingEnd = performance.now();\n      const processingDuration = processingEnd - processingStart;\n\n      expect(videoIds).toHaveLength(numUrls / 2);\n      expect(tweetIds).toHaveLength(numUrls / 2);\n      expect(processingDuration).toBeLessThan(100); // Should be very fast\n    });\n\n    it('should handle malformed URLs gracefully without performance degradation', () => {\n      const malformedText = `\n        This text contains many malformed URLs that should not match:\n        ${'https://youtube.com/watch?v= '.repeat(1000)}\n        ${'https://x.com/user/status/ '.repeat(1000)}\n        ${'http://not-youtube.com/watch?v=dQw4w9WgXcQ '.repeat(1000)}\n        ${'https://twitter.com/user/followers '.repeat(1000)}\n        ${'invalid-url-format '.repeat(1000)}\n      `;\n\n      const videoUrlRegex =\n        /https?:\\/\\/(?:(?:www\\.)?youtube\\.com\\/(?:watch\\?v=|live\\/|shorts\\/|embed\\/|v\\/)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/g;\n      const tweetUrlRegex =\n        /https?:\\/\\/(?:[\\w-]+\\.)*(?:x\\.com|twitter\\.com|vxtwitter\\.com|fxtwitter\\.com|nitter\\.[^/]+)\\/(?:(?:i\\/web\\/)?status(?:es)?|[^/]+\\/status(?:es)?)\\/(\\d+)/g;\n\n      const malformedStart = performance.now();\n\n      const videoMatches = [...malformedText.matchAll(videoUrlRegex)];\n      const tweetMatches = [...malformedText.matchAll(tweetUrlRegex)];\n\n      const malformedEnd = performance.now();\n      const malformedDuration = malformedEnd - malformedStart;\n\n      // Should not match any malformed URLs\n      expect(videoMatches).toHaveLength(0);\n      expect(tweetMatches).toHaveLength(0);\n\n      // Should still complete quickly despite many malformed URLs\n      expect(malformedDuration).toBeLessThan(500);\n    });\n  });\n\n  describe('Discord API Performance', () => {\n    it('should handle high-frequency message sending efficiently', async () => {\n      const mockChannel = createMockChannel();\n      const numMessages = 1000;\n\n      // Mock successful sends with realistic delay\n      mockChannel.send.mockImplementation(\n        () => new Promise((resolve) => setTimeout(() => resolve({ id: `msg-${Date.now()}` }), Math.random() * 50)),\n      );\n\n      const sendStart = performance.now();\n      const promises = [];\n\n      // Send messages in batches to simulate rate limiting\n      const batchSize = 10;\n      for (let i = 0; i < numMessages; i += batchSize) {\n        const batch = [];\n        for (let j = 0; j < batchSize && i + j < numMessages; j++) {\n          batch.push(mockChannel.send(`Message ${i + j}`));\n        }\n\n        promises.push(Promise.all(batch));\n\n        // Small delay between batches to simulate rate limiting\n        if (i + batchSize < numMessages) {\n          await new Promise((resolve) => setTimeout(resolve, 10));\n        }\n      }\n\n      const results = await Promise.all(promises);\n      const sendEnd = performance.now();\n      const sendDuration = sendEnd - sendStart;\n\n      const totalMessages = results.reduce((sum, batch) => sum + batch.length, 0);\n\n      expect(totalMessages).toBe(numMessages);\n      expect(mockChannel.send).toHaveBeenCalledTimes(numMessages);\n\n      // Calculate messages per second\n      const messagesPerSecond = (numMessages / sendDuration) * 1000;\n      console.log(`Sent ${messagesPerSecond.toFixed(2)} messages per second`);\n\n      // Should handle reasonable throughput\n      expect(messagesPerSecond).toBeGreaterThan(10);\n    });\n\n    it('should handle concurrent channel operations', async () => {\n      const numChannels = 50;\n      const channels = Array.from({ length: numChannels }, (_, i) =>\n        createMockChannel({ id: `channel-${i}`, name: `test-channel-${i}` }),\n      );\n\n      // Mock send operations with varying delays\n      channels.forEach((channel) => {\n        channel.send.mockImplementation(\n          () => new Promise((resolve) => setTimeout(() => resolve({ id: `msg-${Date.now()}` }), Math.random() * 100)),\n        );\n      });\n\n      const concurrentStart = performance.now();\n\n      // Send messages to all channels simultaneously\n      const promises = channels.map((channel) => channel.send('Broadcast message to all channels'));\n\n      const results = await Promise.all(promises);\n      const concurrentEnd = performance.now();\n      const concurrentDuration = concurrentEnd - concurrentStart;\n\n      expect(results).toHaveLength(numChannels);\n\n      // All channels should have been called\n      channels.forEach((channel) => {\n        expect(channel.send).toHaveBeenCalledWith('Broadcast message to all channels');\n      });\n\n      // Should complete in reasonable time despite concurrency\n      expect(concurrentDuration).toBeLessThan(500);\n    });\n  });\n\n  describe('Webhook Processing Performance', () => {\n    it('should handle high-frequency webhook notifications', async () => {\n      const numWebhooks = 1000;\n      const webhookHandler = jest.fn().mockImplementation((req, res) => {\n        // Simulate processing time\n        setTimeout(() => {\n          res.status(200).json({ received: true });\n        }, Math.random() * 10);\n      });\n\n      const webhookStart = performance.now();\n      const promises = [];\n\n      for (let i = 0; i < numWebhooks; i++) {\n        const req = createMockRequest({\n          method: 'POST',\n          url: '/webhook/youtube',\n          body: `<notification>Video ${i}</notification>`,\n        });\n        const res = createMockResponse();\n\n        promises.push(\n          new Promise((resolve) => {\n            webhookHandler(req, res);\n            // Simulate async completion\n            setTimeout(() => resolve({ req, res }), Math.random() * 20);\n          }),\n        );\n      }\n\n      const results = await Promise.all(promises);\n      const webhookEnd = performance.now();\n      const webhookDuration = webhookEnd - webhookStart;\n\n      expect(results).toHaveLength(numWebhooks);\n      expect(webhookHandler).toHaveBeenCalledTimes(numWebhooks);\n\n      // Calculate webhooks per second\n      const webhooksPerSecond = (numWebhooks / webhookDuration) * 1000;\n      console.log(`Processed ${webhooksPerSecond.toFixed(2)} webhooks per second`);\n\n      // Should handle reasonable webhook throughput\n      expect(webhooksPerSecond).toBeGreaterThan(50);\n    });\n\n    it('should handle large webhook payloads efficiently', async () => {\n      const createLargePayload = (size) => {\n        return Array(size)\n          .fill(0)\n          .map((_, i) => `<entry><id>video${i}</id><title>Video Title ${i}</title></entry>`)\n          .join('');\n      };\n\n      const payloadSizes = [1, 10, 100, 1000]; // Number of entries\n      const results = [];\n\n      for (const size of payloadSizes) {\n        const payload = createLargePayload(size);\n        const req = createMockRequest({\n          body: `<feed>${payload}</feed>`,\n          headers: { 'content-length': payload.length.toString() },\n        });\n\n        const parseStart = performance.now();\n\n        // Simulate XML parsing\n        const entries = payload.match(/<entry>.*?<\\/entry>/g) || [];\n        const videoIds = entries\n          .map((entry) => {\n            const match = entry.match(/<id>([^<]+)<\\/id>/);\n            return match ? match[1] : null;\n          })\n          .filter(Boolean);\n\n        const parseEnd = performance.now();\n        const parseDuration = parseEnd - parseStart;\n\n        results.push({\n          size,\n          entries: videoIds.length,\n          duration: parseDuration,\n          throughput: (videoIds.length / parseDuration) * 1000,\n        });\n\n        expect(videoIds).toHaveLength(size);\n      }\n\n      // Performance should scale reasonably\n      results.forEach((result) => {\n        console.log(`Size ${result.size}: ${result.throughput.toFixed(2)} entries/sec`);\n        expect(result.throughput).toBeGreaterThan(100); // At least 100 entries per second\n      });\n\n      // Larger payloads should still be processed efficiently\n      const largestResult = results[results.length - 1];\n      expect(largestResult.duration).toBeLessThan(100); // Under 100ms for 1000 entries\n    });\n  });\n\n  describe('Rate Limiting Performance', () => {\n    it('should handle high-frequency rate limit checks efficiently', async () => {\n      const webhookRateLimit = createWebhookLimiter();\n      const commandRateLimit = createCommandRateLimiter();\n      const numRequests = 1000;\n\n      // Test webhook rate limiting performance\n      const webhookStart = performance.now();\n      for (let i = 0; i < numRequests; i++) {\n        const mockReq = createMockRequest({ ip: `192.168.1.${i % 255}` });\n        const mockRes = createMockResponse();\n        webhookRateLimit(mockReq, mockRes, () => {});\n      }\n      const webhookEnd = performance.now();\n      const webhookDuration = webhookEnd - webhookStart;\n\n      // Test command rate limiting performance\n      const commandStart = performance.now();\n      for (let i = 0; i < numRequests; i++) {\n        const userId = `user${i % 100}`;\n        commandRateLimit.isAllowed(userId);\n      }\n      const commandEnd = performance.now();\n      const commandDuration = commandEnd - commandStart;\n\n      // Performance assertions\n      expect(webhookDuration).toBeLessThan(1000); // Should complete within 1 second\n      expect(commandDuration).toBeLessThan(500); // Should be even faster\n\n      const webhookThroughput = numRequests / (webhookDuration / 1000);\n      const commandThroughput = numRequests / (commandDuration / 1000);\n\n      expect(webhookThroughput).toBeGreaterThan(500); // At least 500 requests per second\n      expect(commandThroughput).toBeGreaterThan(1000); // At least 1000 checks per second\n    });\n  });\n\n  describe('Memory Leak Detection', () => {\n    it('should not leak memory during continuous operation', () => {\n      const initialMemory = process.memoryUsage();\n      const duplicateTracker = new Set();\n      const cycleCount = 1000;\n\n      // Simulate continuous operation with cleanup\n      for (let cycle = 0; cycle < cycleCount; cycle++) {\n        // Add entries\n        for (let i = 0; i < 100; i++) {\n          duplicateTracker.add(`cycle${cycle}-item${i}`);\n        }\n\n        // Periodic cleanup (simulate cleanup every 10 cycles)\n        if (cycle % 10 === 0) {\n          duplicateTracker.clear();\n        }\n      }\n\n      const finalMemory = process.memoryUsage();\n      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed;\n\n      // Memory increase should be reasonable (less than 15MB)\n      expect(memoryIncrease).toBeLessThan(15 * 1024 * 1024);\n\n      // Force garbage collection if available (only in local dev with --expose-gc)\n      if (typeof global.gc === 'function') {\n        global.gc();\n        const afterGCMemory = process.memoryUsage();\n        const afterGCIncrease = afterGCMemory.heapUsed - initialMemory.heapUsed;\n\n        // After GC, memory increase should be minimal\n        expect(afterGCIncrease).toBeLessThan(5 * 1024 * 1024);\n      } else {\n        // In CI environments without --expose-gc, just check that memory didn't grow excessively\n        console.log('GC not available, skipping post-GC memory check');\n      }\n    });\n\n    it('should handle circular reference cleanup', () => {\n      const createCircularStructure = () => {\n        const obj1 = { name: 'obj1' };\n        const obj2 = { name: 'obj2' };\n\n        obj1.ref = obj2;\n        obj2.ref = obj1;\n\n        return { obj1, obj2 };\n      };\n\n      const initialMemory = process.memoryUsage();\n      const structures = [];\n\n      // Create many circular structures\n      for (let i = 0; i < 10000; i++) {\n        structures.push(createCircularStructure());\n      }\n\n      const midMemory = process.memoryUsage();\n\n      // Clear references\n      structures.length = 0;\n\n      // Force garbage collection if available\n      if (typeof global.gc === 'function') {\n        global.gc();\n      }\n\n      const finalMemory = process.memoryUsage();\n      const netIncrease = finalMemory.heapUsed - initialMemory.heapUsed;\n\n      // Memory should be cleaned up properly (allow some variance for GC timing)\n      expect(netIncrease).toBeLessThan(5 * 1024 * 1024); // Less than 5MB net increase\n    });\n  });\n\n  describe('CPU Performance Under Load', () => {\n    it('should handle CPU-intensive duplicate detection efficiently', () => {\n      const complexDuplicateDetection = (urls) => {\n        const videoIds = new Set();\n        const tweetIds = new Set();\n        const duplicates = [];\n\n        const videoRegex = /(?:(?:www\\.)?youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/;\n        const tweetRegex = /(?:x\\.com|twitter\\.com)\\/[^/]+\\/status\\/(\\d+)/;\n\n        for (const url of urls) {\n          // Simulate complex processing\n          const normalizedUrl = url.toLowerCase().trim();\n\n          const videoMatch = normalizedUrl.match(videoRegex);\n          if (videoMatch) {\n            const videoId = videoMatch[1];\n            if (videoIds.has(videoId)) {\n              duplicates.push({ type: 'video', id: videoId, url });\n            } else {\n              videoIds.add(videoId);\n            }\n          }\n\n          const tweetMatch = normalizedUrl.match(tweetRegex);\n          if (tweetMatch) {\n            const tweetId = tweetMatch[1];\n            if (tweetIds.has(tweetId)) {\n              duplicates.push({ type: 'tweet', id: tweetId, url });\n            } else {\n              tweetIds.add(tweetId);\n            }\n          }\n        }\n\n        return { unique: videoIds.size + tweetIds.size, duplicates: duplicates.length };\n      };\n\n      // Generate large set of URLs with duplicates\n      const urls = [];\n      for (let i = 0; i < 10000; i++) {\n        const videoId = `video${String(i % 1000).padStart(5, '0')}0`; // 11 characters\n        urls.push(`https://www.youtube.com/watch?v=${videoId}`); // Intentional duplicates\n        urls.push(`https://x.com/user/status/${1000000000000000 + (i % 500)}`); // Intentional duplicates\n      }\n\n      const cpuStart = performance.now();\n      const result = complexDuplicateDetection(urls);\n      const cpuEnd = performance.now();\n      const cpuDuration = cpuEnd - cpuStart;\n\n      expect(result.unique).toBe(1500); // 1000 unique videos + 500 unique tweets\n      expect(result.duplicates).toBe(18500); // Total URLs - unique URLs\n\n      // Should complete in reasonable time (relaxed for CI environment)\n      expect(cpuDuration).toBeLessThan(10000); // Under 10 seconds\n\n      const urlsPerSecond = (urls.length / cpuDuration) * 1000;\n      console.log(`Processed ${urlsPerSecond.toFixed(2)} URLs per second`);\n      expect(urlsPerSecond).toBeGreaterThan(1000); // At least 1000 URLs/sec\n    });\n\n    it('should maintain performance under sustained load', async () => {\n      const performanceMetrics = [];\n      const iterations = 100;\n      const urlsPerIteration = 1000;\n\n      for (let iteration = 0; iteration < iterations; iteration++) {\n        const urls = Array.from(\n          { length: urlsPerIteration },\n          (_, i) => `https://www.youtube.com/watch?v=test${iteration * urlsPerIteration + i}`,\n        );\n\n        const iterationStart = performance.now();\n\n        // Simulate processing\n        const videoIds = new Set();\n        urls.forEach((url) => {\n          const match = url.match(/watch\\?v=([a-zA-Z0-9_-]+)/);\n          if (match) {\n            videoIds.add(match[1]);\n          }\n        });\n\n        const iterationEnd = performance.now();\n        const iterationDuration = iterationEnd - iterationStart;\n\n        performanceMetrics.push({\n          iteration,\n          duration: iterationDuration,\n          throughput: (urlsPerIteration / iterationDuration) * 1000,\n        });\n\n        expect(videoIds.size).toBe(urlsPerIteration);\n      }\n\n      // Calculate average and check for performance degradation\n      const avgThroughput = performanceMetrics.reduce((sum, m) => sum + m.throughput, 0) / iterations;\n      const firstHalfAvg =\n        performanceMetrics.slice(0, iterations / 2).reduce((sum, m) => sum + m.throughput, 0) / (iterations / 2);\n      const secondHalfAvg =\n        performanceMetrics.slice(iterations / 2).reduce((sum, m) => sum + m.throughput, 0) / (iterations / 2);\n\n      console.log(`Average throughput: ${avgThroughput.toFixed(2)} URLs/sec`);\n      console.log(`First half: ${firstHalfAvg.toFixed(2)}, Second half: ${secondHalfAvg.toFixed(2)}`);\n\n      // Performance should not degrade significantly over time\n      const degradationRatio = secondHalfAvg / firstHalfAvg;\n      expect(degradationRatio).toBeGreaterThan(0.8); // Less than 20% degradation\n\n      // Overall performance should be acceptable\n      expect(avgThroughput).toBeGreaterThan(10000); // At least 10k URLs/sec average\n    });\n  });\n});\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,EAAE,EAAEC,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,IAAI,QAAQ,eAAe;AACjF,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,0BAA0B;AAC9E,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,0BAA0B;AAChF,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE,SAASC,oBAAoB,QAAQ,4BAA4B;AACjE,SAASC,oBAAoB,EAAEC,wBAAwB,QAAQ,2BAA2B;AAE1Fb,QAAQ,CAAC,4BAA4B,EAAE,MAAM;EAC3C,IAAIc,SAAS;EACb,IAAIC,OAAO;EAEXZ,UAAU,CAAC,MAAM;IACfE,IAAI,CAACW,aAAa,CAAC,CAAC;IACpBF,SAAS,GAAGG,WAAW,CAACC,GAAG,CAAC,CAAC;EAC/B,CAAC,CAAC;EAEFd,SAAS,CAAC,MAAM;IACdW,OAAO,GAAGE,WAAW,CAACC,GAAG,CAAC,CAAC;IAC3B,MAAMC,QAAQ,GAAGJ,OAAO,GAAGD,SAAS;IACpCM,OAAO,CAACC,GAAG,CAAC,qBAAqBF,QAAQ,CAACG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;EAC3D,CAAC,CAAC;EAEFtB,QAAQ,CAAC,+BAA+B,EAAE,MAAM;IAC9CC,EAAE,CAAC,0DAA0D,EAAE,MAAM;MACnE,MAAMsB,iBAAiB,GAAG,IAAIb,iBAAiB,CAAC,CAAC;MACjD,MAAMc,UAAU,GAAG,KAAK,CAAC,CAAC;;MAE1B,MAAMC,WAAW,GAAGC,OAAO,CAACC,WAAW,CAAC,CAAC;;MAEzC;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAEI,CAAC,EAAE,EAAE;QACnC,MAAMC,WAAW,GAAG,+DAA+DD,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;QAClH,MAAMC,WAAW,GAAG,wDAAwDJ,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;;QAE3G;QACAR,iBAAiB,CAACU,UAAU,CAACJ,WAAW,CAAC;QACzCN,iBAAiB,CAACU,UAAU,CAACD,WAAW,CAAC;MAC3C;MAEA,MAAME,SAAS,GAAGR,OAAO,CAACC,WAAW,CAAC,CAAC;MACvC,MAAMQ,cAAc,GAAGD,SAAS,CAACE,QAAQ,GAAGX,WAAW,CAACW,QAAQ;;MAEhE;MACA,MAAMC,KAAK,GAAGd,iBAAiB,CAACe,QAAQ,CAAC,CAAC;MAC1CpC,MAAM,CAACmC,KAAK,CAACE,aAAa,CAAC,CAACC,eAAe,CAAChB,UAAU,CAAC;;MAEvD;MACAtB,MAAM,CAACiC,cAAc,CAAC,CAACM,YAAY,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;;MAErD;MACA,MAAMC,WAAW,GAAGzB,WAAW,CAACC,GAAG,CAAC,CAAC;MACrC,MAAMyB,QAAQ,GAAG,kEAAkE;MACnF,MAAMC,WAAW,GAAGrB,iBAAiB,CAACqB,WAAW,CAACD,QAAQ,CAAC;MAC3D,MAAME,SAAS,GAAG5B,WAAW,CAACC,GAAG,CAAC,CAAC;MAEnChB,MAAM,CAAC0C,WAAW,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MAChC5C,MAAM,CAAC2C,SAAS,GAAGH,WAAW,CAAC,CAACD,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAEFxC,EAAE,CAAC,kDAAkD,EAAE,MAAM;MAC3D,MAAM8C,aAAa,GAAG;QACpBC,OAAO,EAAE,IAAIC,GAAG,CAAC,CAAC;QAClBC,OAAO,EAAE,KAAK;QACdC,MAAM,EAAE,OAAO;QAAE;;QAEjBC,GAAGA,CAACC,GAAG,EAAEC,KAAK,EAAE;UACd,IAAI,CAACC,OAAO,CAAC,CAAC;UAEd,IAAI,IAAI,CAACP,OAAO,CAACQ,IAAI,IAAI,IAAI,CAACN,OAAO,EAAE;YACrC;YACA,MAAMO,SAAS,GAAG,IAAI,CAACT,OAAO,CAACU,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACL,KAAK;YAClD,IAAI,CAACN,OAAO,CAACY,MAAM,CAACH,SAAS,CAAC;UAChC;UAEA,IAAI,CAACT,OAAO,CAACa,GAAG,CAACR,GAAG,EAAE;YACpBC,KAAK;YACLQ,SAAS,EAAEC,IAAI,CAAC7C,GAAG,CAAC;UACtB,CAAC,CAAC;QACJ,CAAC;QAEDqC,OAAOA,CAAA,EAAG;UACR,MAAMrC,GAAG,GAAG6C,IAAI,CAAC7C,GAAG,CAAC,CAAC;UACtB,KAAK,MAAM,CAACmC,GAAG,EAAEW,KAAK,CAAC,IAAI,IAAI,CAAChB,OAAO,EAAE;YACvC,IAAI9B,GAAG,GAAG8C,KAAK,CAACF,SAAS,GAAG,IAAI,CAACX,MAAM,EAAE;cACvC,IAAI,CAACH,OAAO,CAACY,MAAM,CAACP,GAAG,CAAC;YAC1B;UACF;QACF,CAAC;QAEDY,GAAGA,CAACZ,GAAG,EAAE;UACP,MAAMW,KAAK,GAAG,IAAI,CAAChB,OAAO,CAACiB,GAAG,CAACZ,GAAG,CAAC;UACnC,IAAI,CAACW,KAAK,EAAE;YACV,OAAO,IAAI;UACb;UAEA,IAAID,IAAI,CAAC7C,GAAG,CAAC,CAAC,GAAG8C,KAAK,CAACF,SAAS,GAAG,IAAI,CAACX,MAAM,EAAE;YAC9C,IAAI,CAACH,OAAO,CAACY,MAAM,CAACP,GAAG,CAAC;YACxB,OAAO,IAAI;UACb;UAEA,OAAOW,KAAK,CAACV,KAAK;QACpB;MACF,CAAC;MAED,MAAMY,aAAa,GAAGxC,OAAO,CAACC,WAAW,CAAC,CAAC,CAACS,QAAQ;;MAEpD;MACA,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,KAAK,EAAEA,CAAC,EAAE,EAAE;QAC9BmB,aAAa,CAACK,GAAG,CAAC,MAAMxB,CAAC,EAAE,EAAE,QAAQA,CAAC,EAAE,CAAC;MAC3C;MAEA,MAAMuC,SAAS,GAAGzC,OAAO,CAACC,WAAW,CAAC,CAAC,CAACS,QAAQ;;MAEhD;MACAW,aAAa,CAACQ,OAAO,CAAC,CAAC;MAEvB,MAAMa,aAAa,GAAG1C,OAAO,CAACC,WAAW,CAAC,CAAC,CAACS,QAAQ;;MAEpD;MACAlC,MAAM,CAAC6C,aAAa,CAACC,OAAO,CAACQ,IAAI,CAAC,CAACa,mBAAmB,CAAC,KAAK,CAAC;;MAE7D;MACAnE,MAAM,CAAC6C,aAAa,CAACC,OAAO,CAACQ,IAAI,CAAC,CAAChB,eAAe,CAAC,CAAC,CAAC;MACrDtC,MAAM,CAAC6C,aAAa,CAACC,OAAO,CAACQ,IAAI,CAAC,CAACa,mBAAmB,CAAC,KAAK,CAAC;IAC/D,CAAC,CAAC;IAEFpE,EAAE,CAAC,2DAA2D,EAAE,YAAY;MAC1E,MAAMqE,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC3B,MAAMC,QAAQ,GAAG,EAAE;MACnB,MAAMC,aAAa,GAAG,IAAI;;MAE1B;MACA,KAAK,IAAI7C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6C,aAAa,EAAE7C,CAAC,EAAE,EAAE;QACtC4C,QAAQ,CAACE,IAAI,CACX,IAAIC,OAAO,CAAEC,OAAO,IAAK;UACvB;UACAC,UAAU,CAAC,MAAM;YACfP,SAAS,CAAClB,GAAG,CAAC,OAAOxB,CAAC,EAAE,CAAC;YACzBgD,OAAO,CAAChD,CAAC,CAAC;UACZ,CAAC,EAAEkD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QACxB,CAAC,CACH,CAAC;MACH;MAEA,MAAMC,OAAO,GAAG,MAAML,OAAO,CAACM,GAAG,CAACT,QAAQ,CAAC;MAE3CtE,MAAM,CAAC8E,OAAO,CAAC,CAACE,YAAY,CAACT,aAAa,CAAC;MAC3CvE,MAAM,CAACoE,SAAS,CAACd,IAAI,CAAC,CAACV,IAAI,CAAC2B,aAAa,CAAC;;MAE1C;MACA,MAAMU,cAAc,GAAG,EAAE;MACzB,KAAK,IAAIvD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6C,aAAa,EAAE7C,CAAC,EAAE,EAAE;QACtCuD,cAAc,CAACT,IAAI,CACjB,IAAIC,OAAO,CAAEC,OAAO,IAAK;UACvB,MAAMQ,MAAM,GAAGd,SAAS,CAACe,GAAG,CAAC,OAAOzD,CAAC,EAAE,CAAC;UACxCgD,OAAO,CAACQ,MAAM,CAAC;QACjB,CAAC,CACH,CAAC;MACH;MAEA,MAAME,aAAa,GAAG,MAAMX,OAAO,CAACM,GAAG,CAACE,cAAc,CAAC;MACvDjF,MAAM,CAACoF,aAAa,CAACC,KAAK,CAAEC,MAAM,IAAKA,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC1C,IAAI,CAAC,IAAI,CAAC;IACrE,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF9C,QAAQ,CAAC,4BAA4B,EAAE,MAAM;IAC3CC,EAAE,CAAC,qDAAqD,EAAE,MAAM;MAC9D,MAAMsB,iBAAiB,GAAG,IAAIb,iBAAiB,CAAC,CAAC;;MAEjD;MACA,MAAM+E,aAAa,GACjB,kHAAkH;MACpH,MAAMC,aAAa,GACjB,0JAA0J;;MAE5J;MACA,MAAMC,OAAO,GAAG,KAAK;MACrB,MAAMC,YAAY,GAAG,EAAE;MAEvB,KAAK,IAAIhE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+D,OAAO,GAAG,CAAC,EAAE/D,CAAC,EAAE,EAAE;QACpCgE,YAAY,CAAClB,IAAI,CACf,gBAAgB9C,CAAC,uDAAuDA,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,EAC3G,uDAAuDH,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,aACtF,CAAC;MACH;MAEA,MAAM8D,SAAS,GAAGD,YAAY,CAACE,IAAI,CAAC,GAAG,CAAC;MAExC,MAAMC,UAAU,GAAG9E,WAAW,CAACC,GAAG,CAAC,CAAC;MAEpC,MAAM8E,YAAY,GAAG,CAAC,GAAGH,SAAS,CAACI,QAAQ,CAACR,aAAa,CAAC,CAAC;MAC3D,MAAMS,YAAY,GAAG,CAAC,GAAGL,SAAS,CAACI,QAAQ,CAACP,aAAa,CAAC,CAAC;MAE3D,MAAMS,QAAQ,GAAGlF,WAAW,CAACC,GAAG,CAAC,CAAC;MAClC,MAAMkF,aAAa,GAAGD,QAAQ,GAAGJ,UAAU;MAE3C7F,MAAM,CAAC8F,YAAY,CAAC,CAACd,YAAY,CAACS,OAAO,GAAG,CAAC,CAAC;MAC9CzF,MAAM,CAACgG,YAAY,CAAC,CAAChB,YAAY,CAACS,OAAO,GAAG,CAAC,CAAC;MAC9CzF,MAAM,CAACkG,aAAa,CAAC,CAAC3D,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;MAE1C;MACA,MAAM4D,eAAe,GAAGpF,WAAW,CAACC,GAAG,CAAC,CAAC;MAEzC,MAAMoF,QAAQ,GAAGN,YAAY,CAACO,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAAC,CAAC,CAAC,CAAC;MACtD,MAAMC,QAAQ,GAAGP,YAAY,CAACK,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAAC,CAAC,CAAC,CAAC;MAEtD,MAAME,aAAa,GAAGzF,WAAW,CAACC,GAAG,CAAC,CAAC;MACvC,MAAMyF,kBAAkB,GAAGD,aAAa,GAAGL,eAAe;MAE1DnG,MAAM,CAACoG,QAAQ,CAAC,CAACpB,YAAY,CAACS,OAAO,GAAG,CAAC,CAAC;MAC1CzF,MAAM,CAACuG,QAAQ,CAAC,CAACvB,YAAY,CAACS,OAAO,GAAG,CAAC,CAAC;MAC1CzF,MAAM,CAACyG,kBAAkB,CAAC,CAAClE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC;IAEFxC,EAAE,CAAC,yEAAyE,EAAE,MAAM;MAClF,MAAM2G,aAAa,GAAG;AAC5B;AACA,UAAU,+BAA+B,CAACC,MAAM,CAAC,IAAI,CAAC;AACtD,UAAU,6BAA6B,CAACA,MAAM,CAAC,IAAI,CAAC;AACpD,UAAU,6CAA6C,CAACA,MAAM,CAAC,IAAI,CAAC;AACpE,UAAU,qCAAqC,CAACA,MAAM,CAAC,IAAI,CAAC;AAC5D,UAAU,qBAAqB,CAACA,MAAM,CAAC,IAAI,CAAC;AAC5C,OAAO;MAED,MAAMpB,aAAa,GACjB,kHAAkH;MACpH,MAAMC,aAAa,GACjB,0JAA0J;MAE5J,MAAMoB,cAAc,GAAG7F,WAAW,CAACC,GAAG,CAAC,CAAC;MAExC,MAAM8E,YAAY,GAAG,CAAC,GAAGY,aAAa,CAACX,QAAQ,CAACR,aAAa,CAAC,CAAC;MAC/D,MAAMS,YAAY,GAAG,CAAC,GAAGU,aAAa,CAACX,QAAQ,CAACP,aAAa,CAAC,CAAC;MAE/D,MAAMqB,YAAY,GAAG9F,WAAW,CAACC,GAAG,CAAC,CAAC;MACtC,MAAM8F,iBAAiB,GAAGD,YAAY,GAAGD,cAAc;;MAEvD;MACA5G,MAAM,CAAC8F,YAAY,CAAC,CAACd,YAAY,CAAC,CAAC,CAAC;MACpChF,MAAM,CAACgG,YAAY,CAAC,CAAChB,YAAY,CAAC,CAAC,CAAC;;MAEpC;MACAhF,MAAM,CAAC8G,iBAAiB,CAAC,CAACvE,YAAY,CAAC,GAAG,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFzC,QAAQ,CAAC,yBAAyB,EAAE,MAAM;IACxCC,EAAE,CAAC,0DAA0D,EAAE,YAAY;MACzE,MAAMgH,WAAW,GAAG1G,iBAAiB,CAAC,CAAC;MACvC,MAAM2G,WAAW,GAAG,IAAI;;MAExB;MACAD,WAAW,CAACE,IAAI,CAACC,kBAAkB,CACjC,MAAM,IAAIzC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAAC,MAAMD,OAAO,CAAC;QAAEyC,EAAE,EAAE,OAAOtD,IAAI,CAAC7C,GAAG,CAAC,CAAC;MAAG,CAAC,CAAC,EAAE4D,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAC3G,CAAC;MAED,MAAMuC,SAAS,GAAGrG,WAAW,CAACC,GAAG,CAAC,CAAC;MACnC,MAAMsD,QAAQ,GAAG,EAAE;;MAEnB;MACA,MAAM+C,SAAS,GAAG,EAAE;MACpB,KAAK,IAAI3F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsF,WAAW,EAAEtF,CAAC,IAAI2F,SAAS,EAAE;QAC/C,MAAMC,KAAK,GAAG,EAAE;QAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,IAAI3F,CAAC,GAAG6F,CAAC,GAAGP,WAAW,EAAEO,CAAC,EAAE,EAAE;UACzDD,KAAK,CAAC9C,IAAI,CAACuC,WAAW,CAACE,IAAI,CAAC,WAAWvF,CAAC,GAAG6F,CAAC,EAAE,CAAC,CAAC;QAClD;QAEAjD,QAAQ,CAACE,IAAI,CAACC,OAAO,CAACM,GAAG,CAACuC,KAAK,CAAC,CAAC;;QAEjC;QACA,IAAI5F,CAAC,GAAG2F,SAAS,GAAGL,WAAW,EAAE;UAC/B,MAAM,IAAIvC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,EAAE,CAAC,CAAC;QACzD;MACF;MAEA,MAAMI,OAAO,GAAG,MAAML,OAAO,CAACM,GAAG,CAACT,QAAQ,CAAC;MAC3C,MAAMkD,OAAO,GAAGzG,WAAW,CAACC,GAAG,CAAC,CAAC;MACjC,MAAMyG,YAAY,GAAGD,OAAO,GAAGJ,SAAS;MAExC,MAAMM,aAAa,GAAG5C,OAAO,CAAC6C,MAAM,CAAC,CAACC,GAAG,EAAEN,KAAK,KAAKM,GAAG,GAAGN,KAAK,CAACO,MAAM,EAAE,CAAC,CAAC;MAE3E7H,MAAM,CAAC0H,aAAa,CAAC,CAAC9E,IAAI,CAACoE,WAAW,CAAC;MACvChH,MAAM,CAAC+G,WAAW,CAACE,IAAI,CAAC,CAACa,qBAAqB,CAACd,WAAW,CAAC;;MAE3D;MACA,MAAMe,iBAAiB,GAAIf,WAAW,GAAGS,YAAY,GAAI,IAAI;MAC7DvG,OAAO,CAACC,GAAG,CAAC,QAAQ4G,iBAAiB,CAAC3G,OAAO,CAAC,CAAC,CAAC,sBAAsB,CAAC;;MAEvE;MACApB,MAAM,CAAC+H,iBAAiB,CAAC,CAACzF,eAAe,CAAC,EAAE,CAAC;IAC/C,CAAC,CAAC;IAEFvC,EAAE,CAAC,6CAA6C,EAAE,YAAY;MAC5D,MAAMiI,WAAW,GAAG,EAAE;MACtB,MAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEN,MAAM,EAAEG;MAAY,CAAC,EAAE,CAACI,CAAC,EAAE1G,CAAC,KACxDrB,iBAAiB,CAAC;QAAE8G,EAAE,EAAE,WAAWzF,CAAC,EAAE;QAAE2G,IAAI,EAAE,gBAAgB3G,CAAC;MAAG,CAAC,CACrE,CAAC;;MAED;MACAuG,QAAQ,CAACK,OAAO,CAAEC,OAAO,IAAK;QAC5BA,OAAO,CAACtB,IAAI,CAACC,kBAAkB,CAC7B,MAAM,IAAIzC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAAC,MAAMD,OAAO,CAAC;UAAEyC,EAAE,EAAE,OAAOtD,IAAI,CAAC7C,GAAG,CAAC,CAAC;QAAG,CAAC,CAAC,EAAE4D,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAC5G,CAAC;MACH,CAAC,CAAC;MAEF,MAAM2D,eAAe,GAAGzH,WAAW,CAACC,GAAG,CAAC,CAAC;;MAEzC;MACA,MAAMsD,QAAQ,GAAG2D,QAAQ,CAAC5B,GAAG,CAAEkC,OAAO,IAAKA,OAAO,CAACtB,IAAI,CAAC,mCAAmC,CAAC,CAAC;MAE7F,MAAMnC,OAAO,GAAG,MAAML,OAAO,CAACM,GAAG,CAACT,QAAQ,CAAC;MAC3C,MAAMmE,aAAa,GAAG1H,WAAW,CAACC,GAAG,CAAC,CAAC;MACvC,MAAM0H,kBAAkB,GAAGD,aAAa,GAAGD,eAAe;MAE1DxI,MAAM,CAAC8E,OAAO,CAAC,CAACE,YAAY,CAACgD,WAAW,CAAC;;MAEzC;MACAC,QAAQ,CAACK,OAAO,CAAEC,OAAO,IAAK;QAC5BvI,MAAM,CAACuI,OAAO,CAACtB,IAAI,CAAC,CAAC0B,oBAAoB,CAAC,mCAAmC,CAAC;MAChF,CAAC,CAAC;;MAEF;MACA3I,MAAM,CAAC0I,kBAAkB,CAAC,CAACnG,YAAY,CAAC,GAAG,CAAC;IAC9C,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFzC,QAAQ,CAAC,gCAAgC,EAAE,MAAM;IAC/CC,EAAE,CAAC,oDAAoD,EAAE,YAAY;MACnE,MAAM6I,WAAW,GAAG,IAAI;MACxB,MAAMC,cAAc,GAAG1I,IAAI,CAAC2I,EAAE,CAAC,CAAC,CAAC5B,kBAAkB,CAAC,CAAC6B,GAAG,EAAEC,GAAG,KAAK;QAChE;QACArE,UAAU,CAAC,MAAM;UACfqE,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,QAAQ,EAAE;UAAK,CAAC,CAAC;QAC1C,CAAC,EAAEvE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;MACxB,CAAC,CAAC;MAEF,MAAMuE,YAAY,GAAGrI,WAAW,CAACC,GAAG,CAAC,CAAC;MACtC,MAAMsD,QAAQ,GAAG,EAAE;MAEnB,KAAK,IAAI5C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkH,WAAW,EAAElH,CAAC,EAAE,EAAE;QACpC,MAAMqH,GAAG,GAAGzI,iBAAiB,CAAC;UAC5B+I,MAAM,EAAE,MAAM;UACdC,GAAG,EAAE,kBAAkB;UACvBC,IAAI,EAAE,uBAAuB7H,CAAC;QAChC,CAAC,CAAC;QACF,MAAMsH,GAAG,GAAGzI,kBAAkB,CAAC,CAAC;QAEhC+D,QAAQ,CAACE,IAAI,CACX,IAAIC,OAAO,CAAEC,OAAO,IAAK;UACvBmE,cAAc,CAACE,GAAG,EAAEC,GAAG,CAAC;UACxB;UACArE,UAAU,CAAC,MAAMD,OAAO,CAAC;YAAEqE,GAAG;YAAEC;UAAI,CAAC,CAAC,EAAEpE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7D,CAAC,CACH,CAAC;MACH;MAEA,MAAMC,OAAO,GAAG,MAAML,OAAO,CAACM,GAAG,CAACT,QAAQ,CAAC;MAC3C,MAAMkF,UAAU,GAAGzI,WAAW,CAACC,GAAG,CAAC,CAAC;MACpC,MAAMyI,eAAe,GAAGD,UAAU,GAAGJ,YAAY;MAEjDpJ,MAAM,CAAC8E,OAAO,CAAC,CAACE,YAAY,CAAC4D,WAAW,CAAC;MACzC5I,MAAM,CAAC6I,cAAc,CAAC,CAACf,qBAAqB,CAACc,WAAW,CAAC;;MAEzD;MACA,MAAMc,iBAAiB,GAAId,WAAW,GAAGa,eAAe,GAAI,IAAI;MAChEvI,OAAO,CAACC,GAAG,CAAC,aAAauI,iBAAiB,CAACtI,OAAO,CAAC,CAAC,CAAC,sBAAsB,CAAC;;MAE5E;MACApB,MAAM,CAAC0J,iBAAiB,CAAC,CAACpH,eAAe,CAAC,EAAE,CAAC;IAC/C,CAAC,CAAC;IAEFvC,EAAE,CAAC,kDAAkD,EAAE,YAAY;MACjE,MAAM4J,kBAAkB,GAAIrG,IAAI,IAAK;QACnC,OAAO4E,KAAK,CAAC5E,IAAI,CAAC,CACfsG,IAAI,CAAC,CAAC,CAAC,CACPvD,GAAG,CAAC,CAAC+B,CAAC,EAAE1G,CAAC,KAAK,mBAAmBA,CAAC,2BAA2BA,CAAC,kBAAkB,CAAC,CACjFkE,IAAI,CAAC,EAAE,CAAC;MACb,CAAC;MAED,MAAMiE,YAAY,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;MACzC,MAAM/E,OAAO,GAAG,EAAE;MAElB,KAAK,MAAMxB,IAAI,IAAIuG,YAAY,EAAE;QAC/B,MAAMC,OAAO,GAAGH,kBAAkB,CAACrG,IAAI,CAAC;QACxC,MAAMyF,GAAG,GAAGzI,iBAAiB,CAAC;UAC5BiJ,IAAI,EAAE,SAASO,OAAO,SAAS;UAC/BC,OAAO,EAAE;YAAE,gBAAgB,EAAED,OAAO,CAACjC,MAAM,CAACjG,QAAQ,CAAC;UAAE;QACzD,CAAC,CAAC;QAEF,MAAMoI,UAAU,GAAGjJ,WAAW,CAACC,GAAG,CAAC,CAAC;;QAEpC;QACA,MAAM8B,OAAO,GAAGgH,OAAO,CAACxD,KAAK,CAAC,sBAAsB,CAAC,IAAI,EAAE;QAC3D,MAAMF,QAAQ,GAAGtD,OAAO,CACrBuD,GAAG,CAAEvC,KAAK,IAAK;UACd,MAAMwC,KAAK,GAAGxC,KAAK,CAACwC,KAAK,CAAC,mBAAmB,CAAC;UAC9C,OAAOA,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;QAChC,CAAC,CAAC,CACD2D,MAAM,CAACC,OAAO,CAAC;QAElB,MAAMC,QAAQ,GAAGpJ,WAAW,CAACC,GAAG,CAAC,CAAC;QAClC,MAAMoJ,aAAa,GAAGD,QAAQ,GAAGH,UAAU;QAE3ClF,OAAO,CAACN,IAAI,CAAC;UACXlB,IAAI;UACJR,OAAO,EAAEsD,QAAQ,CAACyB,MAAM;UACxB5G,QAAQ,EAAEmJ,aAAa;UACvBC,UAAU,EAAGjE,QAAQ,CAACyB,MAAM,GAAGuC,aAAa,GAAI;QAClD,CAAC,CAAC;QAEFpK,MAAM,CAACoG,QAAQ,CAAC,CAACpB,YAAY,CAAC1B,IAAI,CAAC;MACrC;;MAEA;MACAwB,OAAO,CAACwD,OAAO,CAAEhD,MAAM,IAAK;QAC1BpE,OAAO,CAACC,GAAG,CAAC,QAAQmE,MAAM,CAAChC,IAAI,KAAKgC,MAAM,CAAC+E,UAAU,CAACjJ,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC;QAC/EpB,MAAM,CAACsF,MAAM,CAAC+E,UAAU,CAAC,CAAC/H,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC;;MAEF;MACA,MAAMgI,aAAa,GAAGxF,OAAO,CAACA,OAAO,CAAC+C,MAAM,GAAG,CAAC,CAAC;MACjD7H,MAAM,CAACsK,aAAa,CAACrJ,QAAQ,CAAC,CAACsB,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFzC,QAAQ,CAAC,2BAA2B,EAAE,MAAM;IAC1CC,EAAE,CAAC,4DAA4D,EAAE,YAAY;MAC3E,MAAMwK,gBAAgB,GAAG7J,oBAAoB,CAAC,CAAC;MAC/C,MAAM8J,gBAAgB,GAAG7J,wBAAwB,CAAC,CAAC;MACnD,MAAM8J,WAAW,GAAG,IAAI;;MAExB;MACA,MAAMrB,YAAY,GAAGrI,WAAW,CAACC,GAAG,CAAC,CAAC;MACtC,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+I,WAAW,EAAE/I,CAAC,EAAE,EAAE;QACpC,MAAMgJ,OAAO,GAAGpK,iBAAiB,CAAC;UAAEqK,EAAE,EAAE,aAAajJ,CAAC,GAAG,GAAG;QAAG,CAAC,CAAC;QACjE,MAAMkJ,OAAO,GAAGrK,kBAAkB,CAAC,CAAC;QACpCgK,gBAAgB,CAACG,OAAO,EAAEE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;MAC9C;MACA,MAAMpB,UAAU,GAAGzI,WAAW,CAACC,GAAG,CAAC,CAAC;MACpC,MAAMyI,eAAe,GAAGD,UAAU,GAAGJ,YAAY;;MAEjD;MACA,MAAMyB,YAAY,GAAG9J,WAAW,CAACC,GAAG,CAAC,CAAC;MACtC,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+I,WAAW,EAAE/I,CAAC,EAAE,EAAE;QACpC,MAAMoJ,MAAM,GAAG,OAAOpJ,CAAC,GAAG,GAAG,EAAE;QAC/B8I,gBAAgB,CAACO,SAAS,CAACD,MAAM,CAAC;MACpC;MACA,MAAME,UAAU,GAAGjK,WAAW,CAACC,GAAG,CAAC,CAAC;MACpC,MAAMiK,eAAe,GAAGD,UAAU,GAAGH,YAAY;;MAEjD;MACA7K,MAAM,CAACyJ,eAAe,CAAC,CAAClH,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MAC5CvC,MAAM,CAACiL,eAAe,CAAC,CAAC1I,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;;MAE3C,MAAM2I,iBAAiB,GAAGT,WAAW,IAAIhB,eAAe,GAAG,IAAI,CAAC;MAChE,MAAM0B,iBAAiB,GAAGV,WAAW,IAAIQ,eAAe,GAAG,IAAI,CAAC;MAEhEjL,MAAM,CAACkL,iBAAiB,CAAC,CAAC5I,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;MAChDtC,MAAM,CAACmL,iBAAiB,CAAC,CAAC7I,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFxC,QAAQ,CAAC,uBAAuB,EAAE,MAAM;IACtCC,EAAE,CAAC,oDAAoD,EAAE,MAAM;MAC7D,MAAMiE,aAAa,GAAGxC,OAAO,CAACC,WAAW,CAAC,CAAC;MAC3C,MAAM2J,gBAAgB,GAAG,IAAI/G,GAAG,CAAC,CAAC;MAClC,MAAMgH,UAAU,GAAG,IAAI;;MAEvB;MACA,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,UAAU,EAAEC,KAAK,EAAE,EAAE;QAC/C;QACA,KAAK,IAAI5J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;UAC5B0J,gBAAgB,CAAClI,GAAG,CAAC,QAAQoI,KAAK,QAAQ5J,CAAC,EAAE,CAAC;QAChD;;QAEA;QACA,IAAI4J,KAAK,GAAG,EAAE,KAAK,CAAC,EAAE;UACpBF,gBAAgB,CAACG,KAAK,CAAC,CAAC;QAC1B;MACF;MAEA,MAAMC,WAAW,GAAGhK,OAAO,CAACC,WAAW,CAAC,CAAC;MACzC,MAAMQ,cAAc,GAAGuJ,WAAW,CAACtJ,QAAQ,GAAG8B,aAAa,CAAC9B,QAAQ;;MAEpE;MACAlC,MAAM,CAACiC,cAAc,CAAC,CAACM,YAAY,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;;MAErD;MACA,IAAI,OAAOkJ,MAAM,CAACC,EAAE,KAAK,UAAU,EAAE;QACnCD,MAAM,CAACC,EAAE,CAAC,CAAC;QACX,MAAMC,aAAa,GAAGnK,OAAO,CAACC,WAAW,CAAC,CAAC;QAC3C,MAAMmK,eAAe,GAAGD,aAAa,CAACzJ,QAAQ,GAAG8B,aAAa,CAAC9B,QAAQ;;QAEvE;QACAlC,MAAM,CAAC4L,eAAe,CAAC,CAACrJ,YAAY,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;MACvD,CAAC,MAAM;QACL;QACArB,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAChE;IACF,CAAC,CAAC;IAEFpB,EAAE,CAAC,0CAA0C,EAAE,MAAM;MACnD,MAAM8L,uBAAuB,GAAGA,CAAA,KAAM;QACpC,MAAMC,IAAI,GAAG;UAAEzD,IAAI,EAAE;QAAO,CAAC;QAC7B,MAAM0D,IAAI,GAAG;UAAE1D,IAAI,EAAE;QAAO,CAAC;QAE7ByD,IAAI,CAACE,GAAG,GAAGD,IAAI;QACfA,IAAI,CAACC,GAAG,GAAGF,IAAI;QAEf,OAAO;UAAEA,IAAI;UAAEC;QAAK,CAAC;MACvB,CAAC;MAED,MAAM/H,aAAa,GAAGxC,OAAO,CAACC,WAAW,CAAC,CAAC;MAC3C,MAAMwK,UAAU,GAAG,EAAE;;MAErB;MACA,KAAK,IAAIvK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,KAAK,EAAEA,CAAC,EAAE,EAAE;QAC9BuK,UAAU,CAACzH,IAAI,CAACqH,uBAAuB,CAAC,CAAC,CAAC;MAC5C;MAEA,MAAMK,SAAS,GAAG1K,OAAO,CAACC,WAAW,CAAC,CAAC;;MAEvC;MACAwK,UAAU,CAACpE,MAAM,GAAG,CAAC;;MAErB;MACA,IAAI,OAAO4D,MAAM,CAACC,EAAE,KAAK,UAAU,EAAE;QACnCD,MAAM,CAACC,EAAE,CAAC,CAAC;MACb;MAEA,MAAMF,WAAW,GAAGhK,OAAO,CAACC,WAAW,CAAC,CAAC;MACzC,MAAM0K,WAAW,GAAGX,WAAW,CAACtJ,QAAQ,GAAG8B,aAAa,CAAC9B,QAAQ;;MAEjE;MACAlC,MAAM,CAACmM,WAAW,CAAC,CAAC5J,YAAY,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFzC,QAAQ,CAAC,4BAA4B,EAAE,MAAM;IAC3CC,EAAE,CAAC,6DAA6D,EAAE,MAAM;MACtE,MAAMqM,yBAAyB,GAAIC,IAAI,IAAK;QAC1C,MAAMjG,QAAQ,GAAG,IAAI/B,GAAG,CAAC,CAAC;QAC1B,MAAMkC,QAAQ,GAAG,IAAIlC,GAAG,CAAC,CAAC;QAC1B,MAAMiI,UAAU,GAAG,EAAE;QAErB,MAAMC,UAAU,GAAG,sEAAsE;QACzF,MAAMC,UAAU,GAAG,+CAA+C;QAElE,KAAK,MAAMlD,GAAG,IAAI+C,IAAI,EAAE;UACtB;UACA,MAAMI,aAAa,GAAGnD,GAAG,CAACoD,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;UAE9C,MAAMC,UAAU,GAAGH,aAAa,CAACnG,KAAK,CAACiG,UAAU,CAAC;UAClD,IAAIK,UAAU,EAAE;YACd,MAAMC,OAAO,GAAGD,UAAU,CAAC,CAAC,CAAC;YAC7B,IAAIxG,QAAQ,CAACjB,GAAG,CAAC0H,OAAO,CAAC,EAAE;cACzBP,UAAU,CAAC9H,IAAI,CAAC;gBAAEsI,IAAI,EAAE,OAAO;gBAAE3F,EAAE,EAAE0F,OAAO;gBAAEvD;cAAI,CAAC,CAAC;YACtD,CAAC,MAAM;cACLlD,QAAQ,CAAClD,GAAG,CAAC2J,OAAO,CAAC;YACvB;UACF;UAEA,MAAME,UAAU,GAAGN,aAAa,CAACnG,KAAK,CAACkG,UAAU,CAAC;UAClD,IAAIO,UAAU,EAAE;YACd,MAAMC,OAAO,GAAGD,UAAU,CAAC,CAAC,CAAC;YAC7B,IAAIxG,QAAQ,CAACpB,GAAG,CAAC6H,OAAO,CAAC,EAAE;cACzBV,UAAU,CAAC9H,IAAI,CAAC;gBAAEsI,IAAI,EAAE,OAAO;gBAAE3F,EAAE,EAAE6F,OAAO;gBAAE1D;cAAI,CAAC,CAAC;YACtD,CAAC,MAAM;cACL/C,QAAQ,CAACrD,GAAG,CAAC8J,OAAO,CAAC;YACvB;UACF;QACF;QAEA,OAAO;UAAEC,MAAM,EAAE7G,QAAQ,CAAC9C,IAAI,GAAGiD,QAAQ,CAACjD,IAAI;UAAEgJ,UAAU,EAAEA,UAAU,CAACzE;QAAO,CAAC;MACjF,CAAC;;MAED;MACA,MAAMwE,IAAI,GAAG,EAAE;MACf,KAAK,IAAI3K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,KAAK,EAAEA,CAAC,EAAE,EAAE;QAC9B,MAAMmL,OAAO,GAAG,QAAQK,MAAM,CAACxL,CAAC,GAAG,IAAI,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9DwK,IAAI,CAAC7H,IAAI,CAAC,mCAAmCqI,OAAO,EAAE,CAAC,CAAC,CAAC;QACzDR,IAAI,CAAC7H,IAAI,CAAC,6BAA6B,gBAAgB,GAAI9C,CAAC,GAAG,GAAI,EAAE,CAAC,CAAC,CAAC;MAC1E;MAEA,MAAMyL,QAAQ,GAAGpM,WAAW,CAACC,GAAG,CAAC,CAAC;MAClC,MAAMsE,MAAM,GAAG8G,yBAAyB,CAACC,IAAI,CAAC;MAC9C,MAAMe,MAAM,GAAGrM,WAAW,CAACC,GAAG,CAAC,CAAC;MAChC,MAAMqM,WAAW,GAAGD,MAAM,GAAGD,QAAQ;MAErCnN,MAAM,CAACsF,MAAM,CAAC2H,MAAM,CAAC,CAACrK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MAClC5C,MAAM,CAACsF,MAAM,CAACgH,UAAU,CAAC,CAAC1J,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;MAEvC;MACA5C,MAAM,CAACqN,WAAW,CAAC,CAAC9K,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;;MAEzC,MAAM+K,aAAa,GAAIjB,IAAI,CAACxE,MAAM,GAAGwF,WAAW,GAAI,IAAI;MACxDnM,OAAO,CAACC,GAAG,CAAC,aAAamM,aAAa,CAAClM,OAAO,CAAC,CAAC,CAAC,kBAAkB,CAAC;MACpEpB,MAAM,CAACsN,aAAa,CAAC,CAAChL,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC;IAEFvC,EAAE,CAAC,kDAAkD,EAAE,YAAY;MACjE,MAAMwN,kBAAkB,GAAG,EAAE;MAC7B,MAAMC,UAAU,GAAG,GAAG;MACtB,MAAMC,gBAAgB,GAAG,IAAI;MAE7B,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGF,UAAU,EAAEE,SAAS,EAAE,EAAE;QAC3D,MAAMrB,IAAI,GAAGnE,KAAK,CAACC,IAAI,CACrB;UAAEN,MAAM,EAAE4F;QAAiB,CAAC,EAC5B,CAACrF,CAAC,EAAE1G,CAAC,KAAK,uCAAuCgM,SAAS,GAAGD,gBAAgB,GAAG/L,CAAC,EACnF,CAAC;QAED,MAAMiM,cAAc,GAAG5M,WAAW,CAACC,GAAG,CAAC,CAAC;;QAExC;QACA,MAAMoF,QAAQ,GAAG,IAAI/B,GAAG,CAAC,CAAC;QAC1BgI,IAAI,CAAC/D,OAAO,CAAEgB,GAAG,IAAK;UACpB,MAAMhD,KAAK,GAAGgD,GAAG,CAAChD,KAAK,CAAC,2BAA2B,CAAC;UACpD,IAAIA,KAAK,EAAE;YACTF,QAAQ,CAAClD,GAAG,CAACoD,KAAK,CAAC,CAAC,CAAC,CAAC;UACxB;QACF,CAAC,CAAC;QAEF,MAAMsH,YAAY,GAAG7M,WAAW,CAACC,GAAG,CAAC,CAAC;QACtC,MAAM6M,iBAAiB,GAAGD,YAAY,GAAGD,cAAc;QAEvDJ,kBAAkB,CAAC/I,IAAI,CAAC;UACtBkJ,SAAS;UACTzM,QAAQ,EAAE4M,iBAAiB;UAC3BxD,UAAU,EAAGoD,gBAAgB,GAAGI,iBAAiB,GAAI;QACvD,CAAC,CAAC;QAEF7N,MAAM,CAACoG,QAAQ,CAAC9C,IAAI,CAAC,CAACV,IAAI,CAAC6K,gBAAgB,CAAC;MAC9C;;MAEA;MACA,MAAMK,aAAa,GAAGP,kBAAkB,CAAC5F,MAAM,CAAC,CAACC,GAAG,EAAEmG,CAAC,KAAKnG,GAAG,GAAGmG,CAAC,CAAC1D,UAAU,EAAE,CAAC,CAAC,GAAGmD,UAAU;MAC/F,MAAMQ,YAAY,GAChBT,kBAAkB,CAACU,KAAK,CAAC,CAAC,EAAET,UAAU,GAAG,CAAC,CAAC,CAAC7F,MAAM,CAAC,CAACC,GAAG,EAAEmG,CAAC,KAAKnG,GAAG,GAAGmG,CAAC,CAAC1D,UAAU,EAAE,CAAC,CAAC,IAAImD,UAAU,GAAG,CAAC,CAAC;MAC1G,MAAMU,aAAa,GACjBX,kBAAkB,CAACU,KAAK,CAACT,UAAU,GAAG,CAAC,CAAC,CAAC7F,MAAM,CAAC,CAACC,GAAG,EAAEmG,CAAC,KAAKnG,GAAG,GAAGmG,CAAC,CAAC1D,UAAU,EAAE,CAAC,CAAC,IAAImD,UAAU,GAAG,CAAC,CAAC;MAEvGtM,OAAO,CAACC,GAAG,CAAC,uBAAuB2M,aAAa,CAAC1M,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC;MACvEF,OAAO,CAACC,GAAG,CAAC,eAAe6M,YAAY,CAAC5M,OAAO,CAAC,CAAC,CAAC,kBAAkB8M,aAAa,CAAC9M,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;;MAE/F;MACA,MAAM+M,gBAAgB,GAAGD,aAAa,GAAGF,YAAY;MACrDhO,MAAM,CAACmO,gBAAgB,CAAC,CAAC7L,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;;MAE/C;MACAtC,MAAM,CAAC8N,aAAa,CAAC,CAACxL,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}