{"version":3,"names":["cov_2g8y4pgfhu","actualCoverage","exec","defaultExec","fs","path","CommandRateLimit","BotApplication","constructor","dependencies","f","s","b","scraperApplication","monitorApplication","discord","discordService","commandProcessor","eventBus","config","state","stateManager","logger","commandRateLimit","commandPrefix","get","supportChannelId","allowedUserIds","getAllowedUserIds","initializeState","eventCleanup","isRunning","buildInfo","loadBuildInfo","buildInfoPath","join","process","cwd","JSON","parse","readFileSync","error","version","build","set","getBoolean","Date","allowedUserIdsStr","split","map","id","trim","start","Error","info","token","getRequired","login","setupEventHandlers","setBotPresence","emit","startTime","getAllConfig","stop","cleanupEventHandlers","destroy","stopTime","err","handleUpdate","message","serviceName","reply","stdout","output","setTimeout","restartError","softRestart","messageHandler","handleMessage","readyHandler","handleReady","errorHandler","handleError","push","onMessage","onReady","onError","subscribe","newLevel","handleLogLevelChange","cleanup","warn","author","bot","content","startsWith","args","slice","length","command","shift","toLowerCase","user","channel","isAllowed","remainingTime","Math","ceil","getRemainingTime","tag","appStats","getStats","scraper","monitor","system","uptime","memory","memoryUsage","timestamp","toISOString","result","processCommand","success","handleCommandResult","replyError","healthData","healthEmbed","createDetailedHealthEmbed","embeds","createHealthEmbed","logMessage","userId","requiresRestart","send","requiresUpdate","newLogLevel","title","color","isReady","fields","name","value","getLatency","inline","postingStatus","announcements","vxTwitter","footer","text","botStartTime","uptimeStr","substr","formatMemory","bytes","round","nextPoll","pollingInterval","next","nextPollStr","announcementEnabled","vxTwitterEnabled","heapUsed","subscriptions","webhooksReceived","videosProcessed","videosAnnounced","totalRuns","successfulRuns","totalTweetsFound","totalTweetsAnnounced","failedRuns","xmlParseFailures","lastError","toLocaleString","getCurrentUserTag","initializeDiscordHistoryScanning","getCurrentUser","readyTime","_this$monitorApplicat","_this$scraperApplicat","duplicateDetector","youtubeChannelId","youtubeChannel","fetchChannel","videoResults","scanDiscordChannelForVideos","messagesScanned","videoIdsAdded","errors","scraperDuplicateDetector","twitterChannels","channelConfig","tweetResults","scanDiscordChannelForTweets","tweetIdsAdded","level","transports","forEach","transport","presence","activities","type","status","setPresence","username","getStatus","isDiscordReady","postingEnabled","currentLogLevel","allowedUsers","eventBusStats","stateStats","dispose"],"sources":["bot-application.js"],"sourcesContent":["import { exec as defaultExec } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { CommandRateLimit } from '../rate-limiter.js';\n\n/**\n * Main bot application orchestrator\n * Coordinates Discord client, command processing, and event handling\n */\nexport class BotApplication {\n  constructor(dependencies) {\n    this.exec = dependencies.exec || defaultExec;\n    this.scraperApplication = dependencies.scraperApplication;\n    this.monitorApplication = dependencies.monitorApplication;\n    this.discord = dependencies.discordService;\n    this.commandProcessor = dependencies.commandProcessor;\n    this.eventBus = dependencies.eventBus;\n    this.config = dependencies.config;\n    this.state = dependencies.stateManager;\n    this.logger = dependencies.logger;\n\n    // Initialize rate limiter for commands\n    this.commandRateLimit = new CommandRateLimit(5, 60000); // 5 commands per minute\n\n    // Bot configuration\n    this.commandPrefix = this.config.get('COMMAND_PREFIX', '!');\n    this.supportChannelId = this.config.get('DISCORD_BOT_SUPPORT_LOG_CHANNEL');\n    this.allowedUserIds = this.getAllowedUserIds();\n\n    // State initialization\n    this.initializeState();\n\n    // Event handler cleanup functions\n    this.eventCleanup = [];\n    this.isRunning = false;\n    this.buildInfo = this.loadBuildInfo();\n  }\n\n  loadBuildInfo() {\n    try {\n      const buildInfoPath = path.join(process.cwd(), 'build-version.json');\n      const buildInfo = JSON.parse(fs.readFileSync(buildInfoPath, 'utf8'));\n      return buildInfo;\n    } catch (error) {\n      this.logger.error('Could not load build information:', error);\n      return { version: 'N/A', build: 'N/A' };\n    }\n  }\n\n  /**\n   * Initialize bot state\n   */\n  initializeState() {\n    // Set default state values\n    this.state.set('postingEnabled', true);\n    this.state.set('announcementEnabled', this.config.getBoolean('ANNOUNCEMENT_ENABLED', false));\n    this.state.set('vxTwitterConversionEnabled', this.config.getBoolean('X_VX_TWITTER_CONVERSION', false));\n    this.state.set('logLevel', this.config.get('LOG_LEVEL', 'info'));\n    this.state.set('botStartTime', new Date());\n  }\n\n  /**\n   * Get allowed user IDs from configuration\n   * @returns {Array<string>} Array of allowed user IDs\n   */\n  getAllowedUserIds() {\n    const allowedUserIdsStr = this.config.get('ALLOWED_USER_IDS', '');\n    return allowedUserIdsStr ? allowedUserIdsStr.split(',').map((id) => id.trim()) : [];\n  }\n\n  /**\n   * Start the bot application\n   * @returns {Promise<void>}\n   */\n  async start() {\n    if (this.isRunning) {\n      throw new Error('Bot application is already running');\n    }\n\n    try {\n      this.logger.info('Starting bot application...');\n\n      // Login to Discord\n      const token = this.config.getRequired('DISCORD_BOT_TOKEN');\n      await this.discord.login(token);\n\n      // Set up event handlers\n      this.setupEventHandlers();\n\n      // Set bot presence\n      await this.setBotPresence();\n\n      this.isRunning = true;\n      this.logger.info('Bot application started successfully');\n\n      // Emit start event\n      this.eventBus.emit('bot.started', {\n        startTime: this.state.get('botStartTime'),\n        config: this.config.getAllConfig(false), // Don't include secrets\n      });\n    } catch (error) {\n      this.logger.error('Failed to start bot application:', error);\n      await this.stop();\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the bot application\n   * @returns {Promise<void>}\n   */\n  async stop() {\n    if (!this.isRunning) {\n      return;\n    }\n\n    try {\n      this.logger.info('Stopping bot application...');\n\n      // Clean up event handlers\n      this.cleanupEventHandlers();\n\n      // Disconnect from Discord\n      await this.discord.destroy();\n\n      this.isRunning = false;\n      this.logger.info('Bot application stopped');\n\n      // Emit stop event\n      this.eventBus.emit('bot.stopped', {\n        stopTime: new Date(),\n      });\n    } catch (err) {\n      this.logger.error('Error stopping bot application:', err);\n    }\n  }\n\n  /**\n   * Perform a soft restart of the bot\n   * @returns {Promise<void>}\n   */\n  async handleUpdate(message) {\n    const serviceName = this.config.get('SYSTEMD_SERVICE_NAME');\n    if (!serviceName) {\n      this.logger.error('SYSTEMD_SERVICE_NAME is not configured.');\n      if (message) {\n        await message.reply('❌ Update functionality is not configured on the server.');\n      }\n      return;\n    }\n\n    this.exec('git pull', async (error, stdout) => {\n      if (error) {\n        this.logger.error(`git pull failed: ${error}`);\n        if (message) {\n          await message.reply(`❌ **Git pull failed:**\\n\\`\\`\\`${error.message}\\`\\`\\``);\n        }\n        return;\n      }\n\n      if (message) {\n        const output = `**✅ Git pull successful:**\\n\\`\\`\\`${stdout || 'No new changes.'}\\`\\`\\``;\n        await message.reply(output);\n      }\n\n      // Delay restart to ensure the message is sent\n      setTimeout(() => {\n        this.exec(`sudo systemctl restart ${serviceName}`, (restartError) => {\n          if (restartError) {\n            this.logger.error(`systemctl restart failed: ${restartError}`);\n            // We cannot reply here as the bot might be down\n          } else {\n            this.logger.info('Systemd restart command issued successfully.');\n          }\n        });\n      }, 5000); // 5-second delay\n    });\n  }\n\n  async softRestart() {\n    this.logger.info('Requesting full bot restart...');\n    this.eventBus.emit('bot.request_restart');\n  }\n\n  /**\n   * Set up Discord event handlers\n   */\n  setupEventHandlers() {\n    // Message handler\n    const messageHandler = async (message) => {\n      await this.handleMessage(message);\n    };\n\n    // Ready handler\n    const readyHandler = async () => {\n      await this.handleReady();\n    };\n\n    // Error handler\n    const errorHandler = (error) => {\n      this.handleError(error);\n    };\n\n    // Register handlers and store cleanup functions\n    this.eventCleanup.push(this.discord.onMessage(messageHandler));\n    this.eventCleanup.push(this.discord.onReady(readyHandler));\n    this.eventCleanup.push(this.discord.onError(errorHandler));\n\n    // State change handlers\n    this.eventCleanup.push(\n      this.state.subscribe('logLevel', (newLevel) => {\n        this.handleLogLevelChange(newLevel);\n      }),\n    );\n  }\n\n  /**\n   * Clean up event handlers\n   */\n  cleanupEventHandlers() {\n    for (const cleanup of this.eventCleanup) {\n      try {\n        cleanup();\n      } catch (error) {\n        this.logger.warn('Error cleaning up event handler:', error);\n      }\n    }\n    this.eventCleanup = [];\n  }\n\n  /**\n   * Handle Discord message events\n   * @param {Object} message - Discord message object\n   */\n  async handleMessage(message) {\n    try {\n      // Ignore bot messages and non-command messages\n      if (message.author.bot || !message.content.startsWith(this.commandPrefix)) {\n        return;\n      }\n\n      // Parse command and get user info\n      const args = message.content.slice(this.commandPrefix.length).trim().split(/ +/);\n      const command = args.shift().toLowerCase();\n      const user = message.author;\n\n      // Only process messages in the support channel or from admin in any other channel\n      if (!user && this.supportChannelId && message.channel.id !== this.supportChannelId) {\n        return;\n      }\n\n      // Validate user\n      if (!user || !user.id) {\n        this.logger.warn('Received message from invalid user object');\n        return;\n      }\n\n      // Rate limiting check\n      if (!this.commandRateLimit.isAllowed(user.id)) {\n        const remainingTime = Math.ceil(this.commandRateLimit.getRemainingTime(user.id) / 1000);\n        await message.reply(\n          `🚫 Rate limit exceeded. Please wait ${remainingTime} seconds before using another command.`,\n        );\n        this.logger.warn(`Rate limit exceeded for user ${user.tag} (${user.id})`);\n        return;\n      }\n\n      // Process command\n      const appStats = {\n        bot: this.getStats(),\n        scraper: this.scraperApplication.getStats(),\n        monitor: this.monitorApplication.getStats(),\n        system: {\n          uptime: process.uptime(),\n          memory: process.memoryUsage(),\n          timestamp: new Date().toISOString(),\n        },\n      };\n\n      this.logger.info(`Processing command: \"${command}\" from user ${user.tag}`);\n      const result = await this.commandProcessor.processCommand(command, args, user.id, appStats);\n      this.logger.info(`Command \"${command}\" result: ${result.success ? 'success' : 'failure'}`);\n\n      // Handle command result\n      await this.handleCommandResult(message, result, command, user);\n    } catch (error) {\n      this.logger.error('Error processing message command:', error);\n      try {\n        await message.reply('❌ An error occurred while processing your command. Please try again.');\n      } catch (replyError) {\n        this.logger.error('Failed to send error reply:', replyError);\n      }\n    }\n  }\n\n  /**\n   * Handle command processing result\n   * @param {Object} message - Original Discord message\n   * @param {Object} result - Command result\n   * @param {string} command - Command name\n   * @param {Object} user - Discord user\n   */\n  async handleCommandResult(message, result, command, user) {\n    try {\n      // Send response message\n      if (result.message) {\n        if (result.healthData) {\n          if (command === 'health-detailed' || command === 'hd') {\n            const healthEmbed = this.createDetailedHealthEmbed(result.healthData);\n            await message.reply({ embeds: [healthEmbed] });\n          } else if (command === 'health') {\n            const healthEmbed = this.createHealthEmbed(result.healthData);\n            await message.reply({ embeds: [healthEmbed] });\n          }\n        } else {\n          await message.reply(result.message);\n        }\n      }\n\n      // Log command execution\n      if (result.logMessage && result.userId) {\n        this.logger.warn(\n          `${user.tag} (${user.id}) executed ${this.commandPrefix}${command} command. ${result.logMessage}`,\n        );\n      }\n\n      // Handle restart request\n      if (result.requiresRestart) {\n        try {\n          await message.channel.send('✅ Full restart initiated. See you in a moment!');\n          await this.softRestart();\n        } catch (error) {\n          this.logger.error('Soft restart failed:', error);\n          await message.channel.send('❌ Soft restart failed. Check logs for details.');\n        }\n      }\n\n      if (result.requiresUpdate) {\n        await this.handleUpdate(message);\n      }\n\n      // Handle log level change\n      if (result.newLogLevel) {\n        this.handleLogLevelChange(result.newLogLevel);\n      }\n    } catch (error) {\n      this.logger.error('Error handling command result:', error);\n    }\n  }\n\n  /**\n   * Create health status embed\n   * @param {Object} healthData - Health data from command processor\n   * @returns {Object} Discord embed object\n   */\n  createHealthEmbed(healthData) {\n    return {\n      title: '🏥 Bot Health Status',\n      color: this.discord.isReady() ? 0x00ff00 : 0xff0000, // Green if ready, red if not\n      fields: [\n        {\n          name: '🤖 Discord Connection',\n          value: this.discord.isReady() ? `✅ Connected (${this.discord.getLatency()}ms ping)` : '❌ Disconnected',\n          inline: true,\n        },\n        {\n          name: '⏱️ Uptime',\n          value: healthData.uptime,\n          inline: true,\n        },\n        {\n          name: '💾 Memory Usage',\n          value: healthData.memoryUsage,\n          inline: true,\n        },\n        {\n          name: '📡 Posting Status',\n          value: healthData.postingStatus === 'Enabled' ? '✅ Enabled' : '❌ Disabled',\n          inline: true,\n        },\n        {\n          name: '📢 Announcements',\n          value: healthData.announcements === 'Enabled' ? '✅ Enabled' : '❌ Disabled',\n          inline: true,\n        },\n        {\n          name: '🐦 VX Twitter',\n          value: healthData.vxTwitter === 'Enabled' ? '✅ Enabled' : '❌ Disabled',\n          inline: true,\n        },\n      ],\n      timestamp: healthData.timestamp,\n      footer: {\n        text: `Bot v${this.buildInfo.version} (Build ${this.buildInfo.build}) | Started: ${healthData.botStartTime}`,\n      },\n    };\n  }\n\n  /**\n   * Create detailed health status embed\n   * @param {Object} healthData - Health data from command processor\n   * @returns {Object} Discord embed object\n   */\n  createDetailedHealthEmbed(healthData) {\n    const { bot, scraper, monitor, system } = healthData;\n    const uptimeStr = new Date(system.uptime * 1000).toISOString().substr(11, 8);\n    const formatMemory = (bytes) => `${Math.round(bytes / 1024 / 1024)} MB`;\n    const nextPoll = scraper.pollingInterval.next;\n    let nextPollStr = 'Not scheduled';\n    if (scraper.isRunning) {\n      if (nextPoll) {\n        nextPollStr = `<t:${Math.round(nextPoll / 1000)}:R>`;\n      } else {\n        nextPollStr = 'In progress...';\n      }\n    }\n\n    return {\n      title: '📊 Detailed Bot Health Status',\n      color: this.discord.isReady() ? 0x00ff00 : 0xff0000,\n      fields: [\n        { name: '🤖 Bot', value: `Status: ${bot.isRunning ? '✅ Running' : '❌ Stopped'}`, inline: true },\n        {\n          name: '▶️ YouTube Monitor',\n          value: `Status: ${monitor.isRunning ? '✅ Running' : '❌ Stopped'}`,\n          inline: true,\n        },\n        { name: '🐦 X Scraper', value: `Status: ${scraper.isRunning ? '✅ Running' : '❌ Stopped'}`, inline: true },\n\n        { name: '📢 Announcements', value: bot.announcementEnabled ? '✅ Enabled' : '❌ Disabled', inline: true },\n        { name: '🔄 VX Twitter', value: bot.vxTwitterEnabled ? '✅ Enabled' : '❌ Disabled', inline: true },\n        { name: '⏳ Next X Poll', value: nextPollStr, inline: true },\n\n        { name: '⏱️ System Uptime', value: uptimeStr, inline: true },\n        { name: '💾 Memory Usage', value: formatMemory(system.memory.heapUsed), inline: true },\n        { name: '📡 Discord Latency', value: `${this.discord.getLatency()}ms`, inline: true },\n\n        {\n          name: 'YouTube Stats',\n          value: `Subs: ${monitor.subscriptions}\\nWebhooks: ${monitor.webhooksReceived}\\nProcessed: ${monitor.videosProcessed}\\nAnnounced: ${monitor.videosAnnounced}`,\n          inline: true,\n        },\n        {\n          name: 'X Stats',\n          value: `Runs: ${scraper.totalRuns}\\nSuccessful: ${scraper.successfulRuns}\\nFound: ${scraper.totalTweetsFound}\\nAnnounced: ${scraper.totalTweetsAnnounced}`,\n          inline: true,\n        },\n        {\n          name: 'Error Info',\n          value: `Scraper Fails: ${scraper.failedRuns}\\nXML Fails: ${monitor.xmlParseFailures}\\nLast Scraper Error: ${scraper.lastError || 'None'}\\nLast Monitor Error: ${monitor.lastError || 'None'}`,\n          inline: true,\n        },\n      ],\n      timestamp: system.timestamp,\n      footer: {\n        text: `Bot v${this.buildInfo.version} (Build ${this.buildInfo.build}) | Started: ${new Date(bot.botStartTime).toLocaleString()}`,\n      },\n    };\n  }\n\n  /**\n   * Handle Discord ready event\n   */\n  async handleReady() {\n    this.logger.info(`Discord bot is ready! Logged in as ${await this.getCurrentUserTag()}`);\n\n    // Initialize Discord history scanning for duplicate detection\n    await this.initializeDiscordHistoryScanning();\n\n    // Emit ready event\n    this.eventBus.emit('discord.ready', {\n      user: await this.discord.getCurrentUser(),\n      readyTime: new Date(),\n    });\n  }\n\n  /**\n   * Initialize Discord history scanning to populate duplicate detection\n   */\n  async initializeDiscordHistoryScanning() {\n    try {\n      this.logger.info('Initializing Discord history scanning for duplicate detection...');\n\n      // Get duplicate detector from monitor application\n      const duplicateDetector = this.monitorApplication?.duplicateDetector;\n      if (!duplicateDetector) {\n        this.logger.warn('Duplicate detector not available, skipping Discord history scanning');\n        return;\n      }\n\n      // Scan YouTube announcement channel\n      const youtubeChannelId = this.config.get('DISCORD_YOUTUBE_CHANNEL_ID');\n      if (youtubeChannelId) {\n        try {\n          const youtubeChannel = await this.discord.fetchChannel(youtubeChannelId);\n          if (youtubeChannel) {\n            this.logger.info(`Scanning YouTube channel history (${youtubeChannelId})...`);\n            const videoResults = await duplicateDetector.scanDiscordChannelForVideos(youtubeChannel, 1000);\n\n            this.logger.info(\n              `YouTube channel scan completed: ${videoResults.messagesScanned} messages, ${videoResults.videoIdsAdded} new video IDs found`,\n            );\n\n            if (videoResults.errors.length > 0) {\n              this.logger.warn(`YouTube channel scan had ${videoResults.errors.length} errors`);\n            }\n          } else {\n            this.logger.warn(`Could not fetch YouTube channel: ${youtubeChannelId}`);\n          }\n        } catch (error) {\n          this.logger.error(`Failed to scan YouTube channel history: ${error.message}`);\n        }\n      } else {\n        this.logger.info('No YouTube channel ID configured, skipping YouTube history scanning');\n      }\n\n      // Scan X/Twitter announcement channels if scraper application has duplicate detector\n      const scraperDuplicateDetector = this.scraperApplication?.duplicateDetector;\n      if (scraperDuplicateDetector) {\n        const twitterChannels = [\n          { id: this.config.get('DISCORD_X_POSTS_CHANNEL_ID'), name: 'X posts' },\n          { id: this.config.get('DISCORD_X_REPLIES_CHANNEL_ID'), name: 'X replies' },\n          { id: this.config.get('DISCORD_X_QUOTES_CHANNEL_ID'), name: 'X quotes' },\n          { id: this.config.get('DISCORD_X_RETWEETS_CHANNEL_ID'), name: 'X retweets' },\n        ];\n\n        for (const channelConfig of twitterChannels) {\n          if (channelConfig.id) {\n            try {\n              const channel = await this.discord.fetchChannel(channelConfig.id);\n              if (channel) {\n                this.logger.info(`Scanning ${channelConfig.name} channel history (${channelConfig.id})...`);\n                const tweetResults = await scraperDuplicateDetector.scanDiscordChannelForTweets(channel, 1000);\n\n                this.logger.info(\n                  `${channelConfig.name} channel scan completed: ${tweetResults.messagesScanned} messages, ${tweetResults.tweetIdsAdded} new tweet IDs found`,\n                );\n\n                if (tweetResults.errors.length > 0) {\n                  this.logger.warn(`${channelConfig.name} channel scan had ${tweetResults.errors.length} errors`);\n                }\n              } else {\n                this.logger.warn(`Could not fetch ${channelConfig.name} channel: ${channelConfig.id}`);\n              }\n            } catch (error) {\n              this.logger.error(`Failed to scan ${channelConfig.name} channel history: ${error.message}`);\n            }\n          }\n        }\n      } else {\n        this.logger.info('No scraper duplicate detector available, skipping X/Twitter history scanning');\n      }\n\n      this.logger.info('Discord history scanning initialization completed');\n    } catch (error) {\n      this.logger.error('Failed to initialize Discord history scanning:', error);\n      // Don't throw - let bot continue running even if scanning fails\n    }\n  }\n\n  /**\n   * Handle Discord error events\n   * @param {Error} error - Discord error\n   */\n  handleError(error) {\n    this.logger.error('Discord client error:', error);\n\n    // Emit error event\n    this.eventBus.emit('discord.error', {\n      error,\n      timestamp: new Date(),\n    });\n  }\n\n  /**\n   * Handle log level changes\n   * @param {string} newLevel - New log level\n   */\n  handleLogLevelChange(newLevel) {\n    try {\n      // Update logger level if possible\n      if (this.logger && typeof this.logger.level !== 'undefined') {\n        this.logger.level = newLevel;\n\n        // Update transport levels\n        if (this.logger.transports) {\n          this.logger.transports.forEach((transport) => {\n            transport.level = newLevel;\n          });\n        }\n      }\n\n      this.logger.info(`Log level changed to: ${newLevel}`);\n    } catch (err) {\n      this.logger.error('Error changing log level:', err);\n    }\n  }\n\n  /**\n   * Set bot presence/status\n   */\n  async setBotPresence() {\n    try {\n      const presence = {\n        activities: [\n          {\n            name: 'for new content',\n            type: 3, // Watching\n          },\n        ],\n        status: 'online',\n      };\n\n      await this.discord.setPresence(presence);\n    } catch (error) {\n      this.logger.warn('Failed to set bot presence:', error);\n    }\n  }\n\n  /**\n   * Get current user tag\n   * @returns {Promise<string>} User tag\n   */\n  async getCurrentUserTag() {\n    try {\n      const user = await this.discord.getCurrentUser();\n      return user.tag || user.username || 'Unknown';\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  /**\n   * Check if bot is running\n   * @returns {boolean} True if running\n   */\n  isRunning() {\n    return this.isRunning;\n  }\n\n  /**\n   * Get bot status information\n   * @returns {Object} Status information\n   */\n  getStatus() {\n    return {\n      isRunning: this.isRunning,\n      isDiscordReady: this.discord.isReady(),\n      botStartTime: this.state.get('botStartTime'),\n      postingEnabled: this.state.get('postingEnabled'),\n      announcementEnabled: this.state.get('announcementEnabled'),\n      vxTwitterEnabled: this.state.get('vxTwitterConversionEnabled'),\n      currentLogLevel: this.state.get('logLevel'),\n      allowedUsers: this.allowedUserIds.length,\n      supportChannelId: this.supportChannelId,\n    };\n  }\n\n  /**\n   * Get bot statistics\n   * @returns {Object} Bot statistics\n   */\n  getStats() {\n    return {\n      ...this.getStatus(),\n      commandRateLimit: this.commandRateLimit.getStats(),\n      commandProcessor: this.commandProcessor.getStats(),\n      eventBusStats: this.eventBus.getStats(),\n      stateStats: this.state.getStats(),\n    };\n  }\n\n  /**\n   * Dispose of resources\n   * @returns {Promise<void>}\n   */\n  async dispose() {\n    await this.stop();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}