{"version":3,"names":["splitMessage","text","maxLength","length","char","chunks","lines","split","currentChunk","line","push","trim","lineChunks","match","RegExp","DiscordManager","constructor","client","logger","config","isPostingEnabled","mirrorMessage","supportChannelId","sendMirroredMessage","targetChannel","content","info","name","id","supportChannel","channels","fetch","isTextBased","send","err","error","mirrorContent","part","setPostingEnabled","enabled","setMirrorMessage","createDiscordManager"],"sources":["discord-utils.js"],"sourcesContent":["// discord-utils.js\n// Discord utility functions for message handling and posting\n\n/**\n * Splits a string into multiple chunks of a specified maximum length, respecting line breaks.\n * @param {string} text - The text to split\n * @param {Object} options - Options for splitting\n * @param {number} options.maxLength - Maximum length of each chunk (default: 2000)\n * @returns {string[]} Array of text chunks\n */\nexport function splitMessage(text, { maxLength = 2000 } = {}) {\n  if (text.length <= maxLength) {\n    return [text];\n  }\n  const char = '\\n';\n  const chunks = [];\n  const lines = text.split(char);\n  let currentChunk = '';\n  for (const line of lines) {\n    if (line.length > maxLength) {\n      if (currentChunk.length > 0) {\n        chunks.push(currentChunk.trim());\n      }\n      const lineChunks = line.match(new RegExp(`.{1,${maxLength}}`, 'g')) || [];\n      chunks.push(...lineChunks);\n      currentChunk = '';\n      continue;\n    }\n    if (currentChunk.length + line.length + char.length > maxLength) {\n      chunks.push(currentChunk.trim());\n      currentChunk = '';\n    }\n    currentChunk += line + char;\n  }\n  if (currentChunk.length > 0) {\n    chunks.push(currentChunk.trim());\n  }\n  return chunks;\n}\n\n/**\n * Discord manager class for handling Discord client operations\n */\nexport class DiscordManager {\n  constructor(client, logger, config = {}) {\n    this.client = client;\n    this.logger = logger;\n    this.isPostingEnabled = config.isPostingEnabled || false;\n    this.mirrorMessage = config.mirrorMessage || false;\n    this.supportChannelId = config.supportChannelId;\n  }\n\n  /**\n   * Sends a message to a target channel and mirrors it to the support log channel.\n   * @param {Object} targetChannel - Discord channel object\n   * @param {string} content - Message content to send\n   */\n  async sendMirroredMessage(targetChannel, content) {\n    if (!this.isPostingEnabled) {\n      this.logger.info(`Posting is disabled. Skipping message to ${targetChannel.name}.`);\n      if (this.supportChannelId && targetChannel.id !== this.supportChannelId) {\n        try {\n          const supportChannel = await this.client.channels.fetch(this.supportChannelId);\n          if (supportChannel && supportChannel.isTextBased()) {\n            await supportChannel.send(`(Posting is currently disabled. Skipped message to ${targetChannel.name})`);\n          }\n        } catch (err) {\n          this.logger.error(`Failed to send disabled posting notification:`, err);\n        }\n      }\n      return;\n    }\n\n    await targetChannel.send(content);\n\n    // Optionally send a notification to the support channel that posting is disabled\n    if (this.supportChannelId && this.mirrorMessage && targetChannel.id !== this.supportChannelId) {\n      try {\n        const supportChannel = await this.client.channels.fetch(this.supportChannelId);\n        if (supportChannel && supportChannel.isTextBased()) {\n          const mirrorContent = `[Bot message from #${targetChannel.name}]:\\n>>> ${content}`;\n          for (const part of splitMessage(mirrorContent)) {\n            if (part) {\n              await supportChannel.send(part);\n            }\n          }\n        }\n      } catch (err) {\n        this.logger.error(`Failed to send mirrored message:`, err);\n      }\n    }\n  }\n\n  /**\n   * Update posting enabled state\n   * @param {boolean} enabled - Whether posting is enabled\n   */\n  setPostingEnabled(enabled) {\n    this.isPostingEnabled = enabled;\n  }\n\n  /**\n   * Update mirror message state\n   * @param {boolean} enabled - Whether message mirroring is enabled\n   */\n  setMirrorMessage(enabled) {\n    this.mirrorMessage = enabled;\n  }\n}\n\n/**\n * Helper function to create a Discord manager instance\n * @param {Object} client - Discord client instance\n * @param {Object} logger - Winston logger instance\n * @param {Object} config - Configuration options\n * @returns {DiscordManager} New Discord manager instance\n */\nexport function createDiscordManager(client, logger, config = {}) {\n  return new DiscordManager(client, logger, config);\n}\n"],"mappings":"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","ignoreList":[]}